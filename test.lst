gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  16:27:33
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 16:25:33 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
                                           ;	.line	24; src/test.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
001adc   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	25; src/test.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
001ade   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	26; src/test.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
001ae0   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	28; src/test.c	BUTTON0_TRIS = 1; //configure button0 as input
001ae2   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	30; src/test.c	LCDInit();
001ae4   ec52     call	0xaa4, 0            	CALL	_LCDInit
001ae6   f005
                                           ;	.line	31; src/test.c	DelayMs(100);
001ae8   0e10     movlw	0x10               	MOVLW	0x10
001aea   6e00     movwf	0, 0               	MOVWF	r0x00
001aec   0e98     movlw	0x98               	MOVLW	0x98
001aee   6e01     movwf	0x1, 0             	MOVWF	r0x01
001af0   0e02     movlw	0x2                	MOVLW	0x02
001af2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001af4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00105_DS_:
001af6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001af8   f004
001afa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001afc   f005
001afe   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b00   f006
001b02   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001b04   f007
001b06   0eff     movlw	0xff               	MOVLW	0xff
001b08   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001b0a   0eff     movlw	0xff               	MOVLW	0xff
001b0c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001b0e   0eff     movlw	0xff               	MOVLW	0xff
001b10   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b12   0eff     movlw	0xff               	MOVLW	0xff
001b14   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b16   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b18   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001b1a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001b1c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001b1e   e1eb     bnz	0x1af6               	BNZ	_00105_DS_
                                           ;	.line	36; src/test.c	EWRPTL = LOW(w);
001b20   0e05     movlw	0x5                	MOVLW	0x05
001b22   010e     movlb	0xe                	BANKSEL	_EWRPTL
001b24   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001b26   010e     movlb	0xe                	BANKSEL	_EWRPTH
                                           ;	.line	37; src/test.c	EWRPTH = HIGH(w);
001b28   6be3     clrf	0xe3, 0x1           	CLRF	_EWRPTH, B
                                           ;	.line	38; src/test.c	EDATA='1';
001b2a   0e31     movlw	0x31               	MOVLW	0x31
001b2c   6e61     movwf	0x61, 0            	MOVWF	_EDATA
                                           ;	.line	39; src/test.c	EDATA='2';
001b2e   0e32     movlw	0x32               	MOVLW	0x32
001b30   6e61     movwf	0x61, 0            	MOVWF	_EDATA
                                           ;	.line	40; src/test.c	EDATA='3';
001b32   0e33     movlw	0x33               	MOVLW	0x33
001b34   6e61     movwf	0x61, 0            	MOVWF	_EDATA
                                           ;	.line	41; src/test.c	EDATA='4';
001b36   0e34     movlw	0x34               	MOVLW	0x34
001b38   6e61     movwf	0x61, 0            	MOVWF	_EDATA
                                           ;	.line	42; src/test.c	EDATA='5';
001b3a   0e35     movlw	0x35               	MOVLW	0x35
001b3c   6e61     movwf	0x61, 0            	MOVWF	_EDATA
                                           ;	.line	43; src/test.c	EDATA=0;
001b3e   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	47; src/test.c	DisplayString (0,"Test of Ethernet buffer"); //first arg is start position
001b40   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001b42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b44   0e16     movlw	0x16               	MOVLW	HIGH(__str_0)
001b46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b48   0e44     movlw	0x44               	MOVLW	LOW(__str_0)
001b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b4c   0e00     movlw	0                  	MOVLW	0x00
001b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b50   ece6     call	0x19cc, 0           	CALL	_DisplayString
001b52   f00c
001b54   0e04     movlw	0x4                	MOVLW	0x04
001b56   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	50; src/test.c	DisplayString (16, "      Push But1");    
001b58   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001b5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b5c   0e16     movlw	0x16               	MOVLW	HIGH(__str_1)
001b5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b60   0e5c     movlw	0x5c               	MOVLW	LOW(__str_1)
001b62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b64   0e10     movlw	0x10               	MOVLW	0x10
001b66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b68   ece6     call	0x19cc, 0           	CALL	_DisplayString
001b6a   f00c
001b6c   0e04     movlw	0x4                	MOVLW	0x04
001b6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	52; src/test.c	ERDPTL = 5;
001b70   0e05     movlw	0x5                	MOVLW	0x05
001b72   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	53; src/test.c	ERDPTH = 0;
001b74   6a7b     clrf	0x7b, 0             	CLRF	_ERDPTH
                                           ;	.line	56; src/test.c	for(i = 16; i < 21; i++)
001b76   0e10     movlw	0x10               	MOVLW	0x10
001b78   6e00     movwf	0, 0               	MOVWF	r0x00
001b7a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00117_DS_:
001b7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b7e   0f80     addlw	0x80               	ADDLW	0x80
001b80   0f80     addlw	0x80               	ADDLW	0x80
001b82   e102     bnz	0x1b88               	BNZ	_00137_DS_
001b84   0e15     movlw	0x15               	MOVLW	0x15
001b86   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00137_DS_:
001b88   e210     bc	0x1baa                	BC	_00120_DS_
                                           ;	.line	58; src/test.c	LCDText[i] =  EDATA;
001b8a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001b8c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001b8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b90   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001b92   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001b94   6e03     movwf	0x3, 0             	MOVWF	r0x03
001b96   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001b98   ffe9
001b9a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001b9c   ffea
001b9e   cf61     movff	0xf61, 0xfef       	MOVFF	_EDATA, INDF0
001ba0   ffef
                                           ;	.line	56; src/test.c	for(i = 16; i < 21; i++)
001ba2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001ba4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ba6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001ba8   d7e9     bra	0x1b7c               	BRA	_00117_DS_
                                           _00120_DS_:
                                           ;	.line	60; src/test.c	LCDUpdate();
001baa   ec1d     call	0x83a, 0            	CALL	_LCDUpdate
001bac   f004
                                           _00115_DS_:
                                           ;	.line	65; src/test.c	if(BUTTON1_IO == 0u) //If Button 0 is pressed
001bae   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
001bb0   d008     bra	0x1bc2               	BRA	_00112_DS_
                                           ;	.line	66; src/test.c	LED_PUT(0x07);  //turn on the 3 red leds
001bb2   cf91     movff	0xf91, 0           	MOVFF	_LATJ, r0x00
001bb4   f000
001bb6   0ef8     movlw	0xf8               	MOVLW	0xf8
001bb8   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
001bba   0e07     movlw	0x7                	MOVLW	0x07
001bbc   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
001bbe   6e91     movwf	0x91, 0            	MOVWF	_LATJ
001bc0   d002     bra	0x1bc6               	BRA	_00131_DS_
                                           _00112_DS_:
                                           ;	.line	68; src/test.c	LED_PUT(0x00);  //turn them off
001bc2   0ef8     movlw	0xf8               	MOVLW	0xf8
001bc4   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           _00131_DS_:
                                           ;	.line	69; src/test.c	for(i=0;i<1000;i++);
001bc6   0ee8     movlw	0xe8               	MOVLW	0xe8
001bc8   6e00     movwf	0, 0               	MOVWF	r0x00
001bca   0e03     movlw	0x3                	MOVLW	0x03
001bcc   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00123_DS_:
001bce   0eff     movlw	0xff               	MOVLW	0xff
001bd0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001bd2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001bd4   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
001bd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bd8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001bda   e1f9     bnz	0x1bce               	BNZ	_00123_DS_
001bdc   d7e8     bra	0x1bae               	BRA	_00115_DS_
001bde   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	174; src/test.c	strlcpy(char *dst, const char *src, size_t siz)
000d00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d02   ffe5
000d04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d06   ffd9
000d08   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d0a   ffe5
000d0c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d0e   ffe5
000d10   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d12   ffe5
000d14   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d16   ffe5
000d18   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d1a   ffe5
000d1c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d1e   ffe5
000d20   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d22   ffe5
000d24   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d26   ffe5
000d28   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d2a   ffe5
000d2c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000d2e   ffe5
000d30   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000d32   ffe5
000d34   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000d36   ffe5
000d38   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000d3a   ffe5
000d3c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000d3e   ffe5
000d40   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000d42   ffe5
000d44   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000d46   ffe5
000d48   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000d4a   ffe5
000d4c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000d4e   ffe5
000d50   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000d52   ffe5
000d54   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000d56   ffe5
000d58   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000d5a   ffe5
000d5c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000d5e   ffe5
000d60   0e02     movlw	0x2                	MOVLW	0x02
000d62   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d64   f000
000d66   0e03     movlw	0x3                	MOVLW	0x03
000d68   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d6a   f001
000d6c   0e04     movlw	0x4                	MOVLW	0x04
000d6e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000d70   f002
000d72   0e05     movlw	0x5                	MOVLW	0x05
000d74   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000d76   f003
000d78   0e06     movlw	0x6                	MOVLW	0x06
000d7a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000d7c   f004
000d7e   0e07     movlw	0x7                	MOVLW	0x07
000d80   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000d82   f005
000d84   0e08     movlw	0x8                	MOVLW	0x08
000d86   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000d88   f006
000d8a   0e09     movlw	0x9                	MOVLW	0x09
000d8c   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000d8e   f007
                                           ;	.line	176; src/test.c	char       *d = dst;
000d90   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000d92   f008
000d94   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000d96   f009
000d98   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000d9a   f00a
                                           ;	.line	177; src/test.c	const char *s = src;
000d9c   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
000d9e   f00b
000da0   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
000da2   f00c
000da4   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
000da6   f00d
                                           ;	.line	178; src/test.c	size_t      n = siz;
000da8   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
000daa   f00e
000dac   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
000dae   f00f
                                           ;	.line	181; src/test.c	if (n != 0)
000db0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000db2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000db4   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000db6   d03e     bra	0xe34                	BRA	_00184_DS_
                                           ;	.line	183; src/test.c	while (--n != 0)
000db8   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
000dba   f010
000dbc   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
000dbe   f011
000dc0   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
000dc2   f012
000dc4   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
000dc6   f013
000dc8   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
000dca   f014
                                           _00180_DS_:
000dcc   0eff     movlw	0xff               	MOVLW	0xff
000dce   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
000dd0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000dd2   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
000dd4   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000dd6   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
000dd8   e01d     bz	0xe14                 	BZ	_00199_DS_
                                           ;	.line	185; src/test.c	if ((*d++ = *s++) == '\0')
000dda   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000ddc   ffe9
000dde   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000de0   fff3
000de2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000de4   ec11     call	0x2c22, 0           	CALL	__gptrget1
000de6   f016
000de8   6e15     movwf	0x15, 0            	MOVWF	r0x15
000dea   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
000dec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000dee   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
000df0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000df2   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
000df4   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000df6   ffe5
000df8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000dfa   ffe9
000dfc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000dfe   fff3
000e00   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e02   ec48     call	0x2c90, 0           	CALL	__gptrput1
000e04   f016
000e06   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e08   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e0a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000e0c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e0e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000e10   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000e12   e1dc     bnz	0xdcc                	BNZ	_00180_DS_
                                           _00199_DS_:
                                           ;	.line	186; src/test.c	break;
000e14   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
000e16   f00b
000e18   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
000e1a   f00c
000e1c   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
000e1e   f00d
000e20   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000e22   f008
000e24   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000e26   f009
000e28   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000e2a   f00a
000e2c   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
000e2e   f00e
000e30   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
000e32   f00f
                                           _00184_DS_:
                                           ;	.line	191; src/test.c	if (n == 0)
000e34   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000e36   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
000e38   e127     bnz	0xe88                	BNZ	_00191_DS_
                                           ;	.line	193; src/test.c	if (siz != 0)
000e3a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e3c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e3e   e009     bz	0xe52                 	BZ	_00198_DS_
                                           ;	.line	194; src/test.c	*d = '\0';          /* NUL-terminate dst */
000e40   0e00     movlw	0                  	MOVLW	0x00
000e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e44   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000e46   ffe9
000e48   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000e4a   fff3
000e4c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000e4e   ec48     call	0x2c90, 0           	CALL	__gptrput1
000e50   f016
                                           _00198_DS_:
                                           ;	.line	195; src/test.c	while (*s++)
000e52   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
000e54   f000
000e56   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
000e58   f001
000e5a   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
000e5c   f002
                                           _00187_DS_:
000e5e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000e60   ffe9
000e62   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000e64   fff3
000e66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e68   ec11     call	0x2c22, 0           	CALL	__gptrget1
000e6a   f016
000e6c   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e6e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e70   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e72   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000e74   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e76   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000e78   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e7a   e1f1     bnz	0xe5e                	BNZ	_00187_DS_
000e7c   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
000e7e   f00b
000e80   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
000e82   f00c
000e84   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
000e86   f00d
                                           _00191_DS_:
                                           ;	.line	199; src/test.c	return (s - src - 1);       /* count does not include NUL */
000e88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e8a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
000e8c   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e90   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
000e92   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e94   0eff     movlw	0xff               	MOVLW	0xff
000e96   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000e98   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e9a   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
000e9c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000e9e   fff3
000ea0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ea2   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
000ea4   f015
000ea6   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
000ea8   f014
000eaa   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
000eac   f013
000eae   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
000eb0   f012
000eb2   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
000eb4   f011
000eb6   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000eb8   f010
000eba   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000ebc   f00f
000ebe   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000ec0   f00e
000ec2   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000ec4   f00d
000ec6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000ec8   f00c
000eca   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000ecc   f00b
000ece   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000ed0   f00a
000ed2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000ed4   f009
000ed6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ed8   f008
000eda   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000edc   f007
000ede   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ee0   f006
000ee2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ee4   f005
000ee6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ee8   f004
000eea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000eec   f003
000eee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ef0   f002
000ef2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ef4   f001
000ef6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ef8   f000
000efa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000efc   ffd9
000efe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	122; src/test.c	void DisplayString(BYTE pos, char* text)
0019cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0019ce   ffe5
0019d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0019d2   ffd9
0019d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0019d6   ffe5
0019d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0019da   ffe5
0019dc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0019de   ffe5
0019e0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0019e2   ffe5
0019e4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0019e6   ffe5
0019e8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0019ea   ffe5
0019ec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0019ee   ffe5
0019f0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0019f2   ffe5
0019f4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0019f6   ffe5
0019f8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0019fa   ffe5
0019fc   0e02     movlw	0x2                	MOVLW	0x02
0019fe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001a00   f000
001a02   0e03     movlw	0x3                	MOVLW	0x03
001a04   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001a06   f001
001a08   0e04     movlw	0x4                	MOVLW	0x04
001a0a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001a0c   f002
001a0e   0e05     movlw	0x5                	MOVLW	0x05
001a10   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001a12   f003
                                           ;	.line	124; src/test.c	BYTE        l = strlen(text);/*number of actual chars in the string*/
001a14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a20   ecf9     call	0x29f2, 0           	CALL	_strlen
001a22   f014
001a24   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a26   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001a28   f005
001a2a   0e03     movlw	0x3                	MOVLW	0x03
001a2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	125; src/test.c	BYTE      max = 32-pos;    /*available space on the lcd*/
001a2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a30   0820     sublw	0x20               	SUBLW	0x20
001a32   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	126; src/test.c	char       *d = (char*)&LCDText[pos];
001a34   6a06     clrf	0x6, 0              	CLRF	r0x06
001a36   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001a38   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a3a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001a3c   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001a3e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a40   6e06     movwf	0x6, 0             	MOVWF	r0x06
001a42   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a44   6e00     movwf	0, 0               	MOVWF	r0x00
001a46   0e80     movlw	0x80               	MOVLW	0x80
001a48   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	128; src/test.c	size_t      n = (l<max)?l:max;
001a4a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a4c   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001a4e   e302     bnc	0x1a54               	BNC	_00168_DS_
001a50   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001a52   f004
                                           _00168_DS_:
001a54   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	130; src/test.c	if (n != 0)
001a56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a58   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001a5a   e027     bz	0x1aaa                	BZ	_00164_DS_
                                           _00160_DS_:
                                           ;	.line	131; src/test.c	while (n-- != 0)*d++ = *s++;
001a5c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001a5e   f008
001a60   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001a62   f009
001a64   0eff     movlw	0xff               	MOVLW	0xff
001a66   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a68   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001a6a   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001a6c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a6e   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001a70   e01c     bz	0x1aaa                	BZ	_00164_DS_
001a72   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001a74   ffe9
001a76   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001a78   fff3
001a7a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a7c   ec11     call	0x2c22, 0           	CALL	__gptrget1
001a7e   f016
001a80   6e08     movwf	0x8, 0             	MOVWF	r0x08
001a82   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001a84   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a86   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001a88   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a8a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001a8c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a8e   ffe5
001a90   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a92   ffe9
001a94   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001a96   fff3
001a98   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a9a   ec48     call	0x2c90, 0           	CALL	__gptrput1
001a9c   f016
001a9e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001aa0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aa2   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001aa4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aa6   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001aa8   d7d9     bra	0x1a5c               	BRA	_00160_DS_
                                           _00164_DS_:
                                           ;	.line	132; src/test.c	LCDUpdate();
001aaa   ec1d     call	0x83a, 0            	CALL	_LCDUpdate
001aac   f004
001aae   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ab0   f009
001ab2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ab4   f008
001ab6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ab8   f007
001aba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001abc   f006
001abe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ac0   f005
001ac2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ac4   f004
001ac6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ac8   f003
001aca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001acc   f002
001ace   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ad0   f001
001ad2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ad4   f000
001ad6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ad8   ffd9
001ada   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	83; src/test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
001526   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001528   ffe5
00152a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00152c   ffd9
00152e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001530   ffe5
001532   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001534   ffe5
001536   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001538   ffe5
00153a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00153c   ffe5
00153e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001540   ffe5
001542   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001544   ffe5
001546   0e02     movlw	0x2                	MOVLW	0x02
001548   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00154a   f000
00154c   0e03     movlw	0x3                	MOVLW	0x03
00154e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001550   f001
001552   0e04     movlw	0x4                	MOVLW	0x04
001554   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001556   f002
                                           ;	.line	91; src/test.c	ultoa(w, WDigit, radix);      
001558   6a03     clrf	0x3, 0              	CLRF	r0x03
00155a   6a04     clrf	0x4, 0              	CLRF	r0x04
00155c   0e0a     movlw	0xa                	MOVLW	0x0a
00155e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001560   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001564   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001568   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00156a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00156c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001574   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001578   ec80     call	0xf00, 0            	CALL	_ultoa
00157a   f007
00157c   0e07     movlw	0x7                	MOVLW	0x07
00157e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	92; src/test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001580   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00144_DS_:
001582   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001584   6e03     movwf	0x3, 0             	MOVWF	r0x03
001586   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001588   6e02     movwf	0x2, 0             	MOVWF	r0x02
00158a   0e80     movlw	0x80               	MOVLW	0x80
00158c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00158e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001590   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001592   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001596   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001598   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00159a   ecf9     call	0x29f2, 0           	CALL	_strlen
00159c   f014
00159e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015a0   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0015a2   f003
0015a4   0e03     movlw	0x3                	MOVLW	0x03
0015a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0015a8   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0015aa   f004
0015ac   6a05     clrf	0x5, 0              	CLRF	r0x05
0015ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0015b0   0f80     addlw	0x80               	ADDLW	0x80
0015b2   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0015b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015b6   0f80     addlw	0x80               	ADDLW	0x80
0015b8   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0015ba   e102     bnz	0x15c0               	BNZ	_00154_DS_
0015bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015be   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00154_DS_:
0015c0   e21c     bc	0x15fa                	BC	_00147_DS_
                                           ;	.line	94; src/test.c	LCDText[LCDPos++] = WDigit[j];
0015c2   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0015c4   f002
0015c6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015c8   6a03     clrf	0x3, 0              	CLRF	r0x03
0015ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0015cc   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0015ce   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0015d0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0015d2   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0015d4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0015d6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0015d8   6a05     clrf	0x5, 0              	CLRF	r0x05
0015da   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0015dc   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0015de   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0015e0   ffe9
0015e2   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0015e4   ffea
0015e6   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0015e8   f004
0015ea   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0015ec   ffe9
0015ee   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0015f0   ffea
0015f2   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
0015f4   ffef
                                           ;	.line	92; src/test.c	for(j = 0; j < strlen((char*)WDigit); j++)
0015f6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0015f8   d7c4     bra	0x1582               	BRA	_00144_DS_
                                           _00147_DS_:
                                           ;	.line	96; src/test.c	if(LCDPos < 32u)
0015fa   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0015fc   f001
0015fe   6a02     clrf	0x2, 0              	CLRF	r0x02
001600   0e00     movlw	0                  	MOVLW	0x00
001602   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001604   e102     bnz	0x160a               	BNZ	_00155_DS_
001606   0e20     movlw	0x20               	MOVLW	0x20
001608   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00155_DS_:
00160a   e20b     bc	0x1622                	BC	_00143_DS_
                                           ;	.line	97; src/test.c	LCDText[LCDPos] = 0;
00160c   6a01     clrf	0x1, 0              	CLRF	r0x01
00160e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001610   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001612   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001614   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001616   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001618   ffe9
00161a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00161c   ffea
00161e   0e00     movlw	0                  	MOVLW	0x00
001620   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00143_DS_:
                                           ;	.line	98; src/test.c	LCDUpdate();
001622   ec1d     call	0x83a, 0            	CALL	_LCDUpdate
001624   f004
001626   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001628   f005
00162a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00162c   f004
00162e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001630   f003
001632   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001634   f002
001636   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001638   f001
00163a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00163c   f000
00163e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001640   ffd9
001642   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001644   6554     cpfsgt	0x54, 0x1         	DB	0x54, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x74, 0x68, 0x65
001646   7473     btg	0x73, 0x2, 0         
001648   6f20     movwf	0x20, 0x1          
00164a   2066     addwfc	0x66, 0, 0        
00164c   7445     btg	0x45, 0x2, 0         
00164e   6568     cpfsgt	0x68, 0x1         
001650   6e72     movwf	0x72, 0            	DB	0x72, 0x6e, 0x65, 0x74, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00
001652   7465     btg	0x65, 0x2, 0         
001654   6220     cpfseq	0x20, 0           
001656   6675     tstfsz	0x75, 0           
001658   6566     cpfsgt	0x66, 0x1         
00165a   0072     dw	0x72  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_1:
00165c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x42
00165e   2020     addwfc	0x20, 0, 0        
001660   2020     addwfc	0x20, 0, 0        
001662   7550     btg	0x50, 0x2, 0x1       
001664   6873     setf	0x73, 0             
001666   4220     rrncf	0x20, 0x1, 0       
001668   7475     btg	0x75, 0x2, 0         	DB	0x75, 0x74, 0x31, 0x00
00166a   0031     dw	0x31  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1338 (0x053a) bytes ( 1.02%)
                                           ;           	  669 (0x029d) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.16%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 16:23:32 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002778   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00277a   ffe5
00277c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00277e   ffd9
002780   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002782   ffe5
002784   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002786   ffe5
002788   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00278a   ffe5
00278c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00278e   ffe5
002790   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002792   ffe5
002794   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002796   ffe5
002798   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00279a   ffe5
00279c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00279e   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
0027a0   0e01     movlw	0x1                	MOVLW	0x01
0027a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a4   0e00     movlw	0                  	MOVLW	0x00
0027a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a8   ec78     call	0x2af0, 0           	CALL	_LCDWrite
0027aa   f015
0027ac   0e02     movlw	0x2                	MOVLW	0x02
0027ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0027b0   0e48     movlw	0x48               	MOVLW	0x48
0027b2   6e00     movwf	0, 0               	MOVWF	r0x00
0027b4   0e0d     movlw	0xd                	MOVLW	0x0d
0027b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0027ba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0027bc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0027be   f004
0027c0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027c2   f005
0027c4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027c6   f006
0027c8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027ca   f007
0027cc   0eff     movlw	0xff               	MOVLW	0xff
0027ce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027d0   0eff     movlw	0xff               	MOVLW	0xff
0027d2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0027d4   0eff     movlw	0xff               	MOVLW	0xff
0027d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027d8   0eff     movlw	0xff               	MOVLW	0xff
0027da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0027dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027de   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0027e0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0027e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0027e4   e1eb     bnz	0x27bc               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0027e6   0e00     movlw	0                  	MOVLW	0x00
0027e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ea   0e20     movlw	0x20               	MOVLW	0x20
0027ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ee   0e20     movlw	0x20               	MOVLW	0x20
0027f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0027f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0027f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027fa   ecb9     call	0x2172, 0           	CALL	_memset
0027fc   f010
0027fe   0e05     movlw	0x5                	MOVLW	0x05
002800   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002802   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002804   f007
002806   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002808   f006
00280a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280c   f005
00280e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002810   f004
002812   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002814   f003
002816   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002818   f002
00281a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281c   f001
00281e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002820   f000
002822   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002824   ffd9
002826   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
00083a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00083c   ffe5
00083e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000840   ffd9
000842   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000844   ffe5
000846   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000848   ffe5
00084a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00084c   ffe5
00084e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000850   ffe5
000852   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000854   ffe5
000856   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000858   ffe5
00085a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00085c   ffe5
00085e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000860   ffe5
000862   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000864   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000866   0e02     movlw	0x2                	MOVLW	0x02
000868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086a   0e00     movlw	0                  	MOVLW	0x00
00086c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086e   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000870   f015
000872   0e02     movlw	0x2                	MOVLW	0x02
000874   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000876   0e48     movlw	0x48               	MOVLW	0x48
000878   6e00     movwf	0, 0               	MOVWF	r0x00
00087a   0e0d     movlw	0xd                	MOVLW	0x0d
00087c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00087e   6a02     clrf	0x2, 0              	CLRF	r0x02
000880   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000882   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000884   f004
000886   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000888   f005
00088a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00088c   f006
00088e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000890   f007
000892   0eff     movlw	0xff               	MOVLW	0xff
000894   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000896   0eff     movlw	0xff               	MOVLW	0xff
000898   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008a4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008a6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008a8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008aa   e1eb     bnz	0x882                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008ac   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b0   f001
0008b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0008b4   0e00     movlw	0                  	MOVLW	0x00
0008b6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008b8   e102     bnz	0x8be                	BNZ	_00297_DS_
0008ba   0e10     movlw	0x10               	MOVLW	0x10
0008bc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c0   d057     bra	0x970                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008c2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008c4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008c6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0008ca   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008cc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008ce   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d0   ffe9
0008d2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008d4   ffea
0008d6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008d8   f001
0008da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008dc   e119     bnz	0x910                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008de   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e0   f001
                                           _00253_DS_:
0008e2   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008e4   f002
0008e6   6a03     clrf	0x3, 0              	CLRF	r0x03
0008e8   0e00     movlw	0                  	MOVLW	0x00
0008ea   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008ec   e102     bnz	0x8f2                	BNZ	_00298_DS_
0008ee   0e10     movlw	0x10               	MOVLW	0x10
0008f0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008f2   e20e     bc	0x910                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008f4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008f6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0008f8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008fa   6a03     clrf	0x3, 0              	CLRF	r0x03
0008fc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008fe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000900   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000902   ffe9
000904   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000906   ffea
000908   0e20     movlw	0x20               	MOVLW	0x20
00090a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
00090c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00090e   d7e9     bra	0x8e2                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000910   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000912   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000914   6e01     movwf	0x1, 0             	MOVWF	r0x01
000916   6a02     clrf	0x2, 0              	CLRF	r0x02
000918   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00091a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00091c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00091e   ffe9
000920   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000922   ffea
000924   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000926   f001
000928   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00092a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092c   0e01     movlw	0x1                	MOVLW	0x01
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000932   f015
000934   0e02     movlw	0x2                	MOVLW	0x02
000936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000938   0e55     movlw	0x55               	MOVLW	0x55
00093a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00093c   6a02     clrf	0x2, 0              	CLRF	r0x02
00093e   6a03     clrf	0x3, 0              	CLRF	r0x03
000940   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000942   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000944   f005
000946   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000948   f006
00094a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00094c   f007
00094e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000950   f008
000952   0eff     movlw	0xff               	MOVLW	0xff
000954   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000956   0eff     movlw	0xff               	MOVLW	0xff
000958   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000962   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000964   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000966   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000968   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00096a   e1eb     bnz	0x942                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
00096c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00096e   d79f     bra	0x8ae                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000970   0ec0     movlw	0xc0               	MOVLW	0xc0
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   0e00     movlw	0                  	MOVLW	0x00
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   ec78     call	0x2af0, 0           	CALL	_LCDWrite
00097a   f015
00097c   0e02     movlw	0x2                	MOVLW	0x02
00097e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000980   0e55     movlw	0x55               	MOVLW	0x55
000982   6e00     movwf	0, 0               	MOVWF	r0x00
000984   6a01     clrf	0x1, 0              	CLRF	r0x01
000986   6a02     clrf	0x2, 0              	CLRF	r0x02
000988   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00098a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00098c   f004
00098e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000990   f005
000992   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000994   f006
000996   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000998   f007
00099a   0eff     movlw	0xff               	MOVLW	0xff
00099c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00099e   0eff     movlw	0xff               	MOVLW	0xff
0009a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009b2   e1eb     bnz	0x98a                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009b4   0e10     movlw	0x10               	MOVLW	0x10
0009b6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009b8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ba   f001
0009bc   6a02     clrf	0x2, 0              	CLRF	r0x02
0009be   0e00     movlw	0                  	MOVLW	0x00
0009c0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009c2   e102     bnz	0x9c8                	BNZ	_00299_DS_
0009c4   0e20     movlw	0x20               	MOVLW	0x20
0009c6   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009c8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009ca   d057     bra	0xa7a                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009cc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009ce   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009d2   6a02     clrf	0x2, 0              	CLRF	r0x02
0009d4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009d8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009da   ffe9
0009dc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009de   ffea
0009e0   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009e2   f001
0009e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e6   e119     bnz	0xa1a                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009e8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ea   f001
                                           _00261_DS_:
0009ec   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009ee   f002
0009f0   6a03     clrf	0x3, 0              	CLRF	r0x03
0009f2   0e00     movlw	0                  	MOVLW	0x00
0009f4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009f6   e102     bnz	0x9fc                	BNZ	_00300_DS_
0009f8   0e20     movlw	0x20               	MOVLW	0x20
0009fa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0009fc   e20e     bc	0xa1a                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
0009fe   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a00   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a02   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a04   6a03     clrf	0x3, 0              	CLRF	r0x03
000a06   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a0a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a0c   ffe9
000a0e   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a10   ffea
000a12   0e20     movlw	0x20               	MOVLW	0x20
000a14   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a16   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a18   d7e9     bra	0x9ec                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a1a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a1c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   6a02     clrf	0x2, 0              	CLRF	r0x02
000a22   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a26   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a28   ffe9
000a2a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a2c   ffea
000a2e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a30   f001
000a32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0e01     movlw	0x1                	MOVLW	0x01
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000a3c   f015
000a3e   0e02     movlw	0x2                	MOVLW	0x02
000a40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a42   0e55     movlw	0x55               	MOVLW	0x55
000a44   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a46   6a02     clrf	0x2, 0              	CLRF	r0x02
000a48   6a03     clrf	0x3, 0              	CLRF	r0x03
000a4a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a4c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a4e   f005
000a50   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a52   f006
000a54   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a56   f007
000a58   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a5a   f008
000a5c   0eff     movlw	0xff               	MOVLW	0xff
000a5e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a60   0eff     movlw	0xff               	MOVLW	0xff
000a62   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a6c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a6e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a70   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a72   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a74   e1eb     bnz	0xa4c                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a76   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a78   d79f     bra	0x9b8                	BRA	_00265_DS_
                                           _00269_DS_:
000a7a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a7c   f008
000a7e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a80   f007
000a82   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a84   f006
000a86   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a88   f005
000a8a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a8c   f004
000a8e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a90   f003
000a92   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a94   f002
000a96   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000a98   f001
000a9a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a9c   f000
000a9e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa0   ffd9
000aa2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aa4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aa6   ffe5
000aa8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000aaa   ffd9
000aac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000aae   ffe5
000ab0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ab2   ffe5
000ab4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ab6   ffe5
000ab8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000aba   ffe5
000abc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000abe   ffe5
000ac0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ac2   ffe5
000ac4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ac6   ffe5
000ac8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000aca   ffe5
000acc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ace   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad0   0e00     movlw	0                  	MOVLW	0x00
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   0e20     movlw	0x20               	MOVLW	0x20
000ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad8   0e20     movlw	0x20               	MOVLW	0x20
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   ecb9     call	0x2172, 0           	CALL	_memset
000ae6   f010
000ae8   0e05     movlw	0x5                	MOVLW	0x05
000aea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000aec   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000aee   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af0   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000af2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000af4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000af6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000af8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000afa   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000afc   0ea0     movlw	0xa0               	MOVLW	0xa0
000afe   6e00     movwf	0, 0               	MOVWF	r0x00
000b00   0e09     movlw	0x9                	MOVLW	0x09
000b02   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b04   0e01     movlw	0x1                	MOVLW	0x01
000b06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b08   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b0a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b0c   f004
000b0e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b10   f005
000b12   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b14   f006
000b16   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b18   f007
000b1a   0eff     movlw	0xff               	MOVLW	0xff
000b1c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b1e   0eff     movlw	0xff               	MOVLW	0xff
000b20   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b2c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b2e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b30   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b32   e1eb     bnz	0xb0a                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b34   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b36   0e03     movlw	0x3                	MOVLW	0x03
000b38   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b3a   0000     nop                      	nop 
000b3c   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b3e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b40   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b42   f001
000b44   6a02     clrf	0x2, 0              	CLRF	r0x02
000b46   0e00     movlw	0                  	MOVLW	0x00
000b48   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b4a   e102     bnz	0xb50                	BNZ	_00220_DS_
000b4c   0e03     movlw	0x3                	MOVLW	0x03
000b4e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b50   e239     bc	0xbc4                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b52   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b54   0e11     movlw	0x11               	MOVLW	0x11
000b56   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b58   6a02     clrf	0x2, 0              	CLRF	r0x02
000b5a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b5c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b5e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b60   f005
000b62   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b64   f006
000b66   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b68   f007
000b6a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b6c   f008
000b6e   0eff     movlw	0xff               	MOVLW	0xff
000b70   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b72   0eff     movlw	0xff               	MOVLW	0xff
000b74   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b80   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b84   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b86   e1eb     bnz	0xb5e                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b88   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b8a   0e48     movlw	0x48               	MOVLW	0x48
000b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b8e   0e0d     movlw	0xd                	MOVLW	0x0d
000b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b92   6a03     clrf	0x3, 0              	CLRF	r0x03
000b94   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b96   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b98   f005
000b9a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b9c   f006
000b9e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba0   f007
000ba2   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000ba4   f008
000ba6   0eff     movlw	0xff               	MOVLW	0xff
000ba8   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000baa   0eff     movlw	0xff               	MOVLW	0xff
000bac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bb6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bba   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bbc   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bbe   e1eb     bnz	0xb96                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bc2   d7be     bra	0xb40                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bc4   0e38     movlw	0x38               	MOVLW	0x38
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   0e00     movlw	0                  	MOVLW	0x00
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000bce   f015
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bd4   0e55     movlw	0x55               	MOVLW	0x55
000bd6   6e00     movwf	0, 0               	MOVWF	r0x00
000bd8   6a01     clrf	0x1, 0              	CLRF	r0x01
000bda   6a02     clrf	0x2, 0              	CLRF	r0x02
000bdc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000bde   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be0   f004
000be2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000be4   f005
000be6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000be8   f006
000bea   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bec   f007
000bee   0eff     movlw	0xff               	MOVLW	0xff
000bf0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bf2   0eff     movlw	0xff               	MOVLW	0xff
000bf4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bfe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c00   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c02   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c04   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c06   e1eb     bnz	0xbde                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c08   0e06     movlw	0x6                	MOVLW	0x06
000c0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0c   0e00     movlw	0                  	MOVLW	0x00
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000c12   f015
000c14   0e02     movlw	0x2                	MOVLW	0x02
000c16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c18   0e55     movlw	0x55               	MOVLW	0x55
000c1a   6e00     movwf	0, 0               	MOVWF	r0x00
000c1c   6a01     clrf	0x1, 0              	CLRF	r0x01
000c1e   6a02     clrf	0x2, 0              	CLRF	r0x02
000c20   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c22   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c24   f004
000c26   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c28   f005
000c2a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c2c   f006
000c2e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c30   f007
000c32   0eff     movlw	0xff               	MOVLW	0xff
000c34   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c36   0eff     movlw	0xff               	MOVLW	0xff
000c38   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c44   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c46   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c48   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c4a   e1eb     bnz	0xc22                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c4c   0e0c     movlw	0xc                	MOVLW	0x0c
000c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c50   0e00     movlw	0                  	MOVLW	0x00
000c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c54   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000c56   f015
000c58   0e02     movlw	0x2                	MOVLW	0x02
000c5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c5c   0e55     movlw	0x55               	MOVLW	0x55
000c5e   6e00     movwf	0, 0               	MOVWF	r0x00
000c60   6a01     clrf	0x1, 0              	CLRF	r0x01
000c62   6a02     clrf	0x2, 0              	CLRF	r0x02
000c64   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c66   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c68   f004
000c6a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c6c   f005
000c6e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c70   f006
000c72   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c74   f007
000c76   0eff     movlw	0xff               	MOVLW	0xff
000c78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c7a   0eff     movlw	0xff               	MOVLW	0xff
000c7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c88   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c8a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c8c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c8e   e1eb     bnz	0xc66                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c90   0e01     movlw	0x1                	MOVLW	0x01
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   0e00     movlw	0                  	MOVLW	0x00
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   ec78     call	0x2af0, 0           	CALL	_LCDWrite
000c9a   f015
000c9c   0e02     movlw	0x2                	MOVLW	0x02
000c9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca0   0e48     movlw	0x48               	MOVLW	0x48
000ca2   6e00     movwf	0, 0               	MOVWF	r0x00
000ca4   0e0d     movlw	0xd                	MOVLW	0x0d
000ca6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca8   6a02     clrf	0x2, 0              	CLRF	r0x02
000caa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cac   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cae   f004
000cb0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cb2   f005
000cb4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cb6   f006
000cb8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cba   f007
000cbc   0eff     movlw	0xff               	MOVLW	0xff
000cbe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc0   0eff     movlw	0xff               	MOVLW	0xff
000cc2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ccc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cce   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cd2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cd4   e1eb     bnz	0xcac                	BNZ	_00185_DS_
000cd6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cd8   f008
000cda   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cdc   f007
000cde   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce0   f006
000ce2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ce4   f005
000ce6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ce8   f004
000cea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cec   f003
000cee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf0   f002
000cf2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cf4   f001
000cf6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf8   f000
000cfa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cfc   ffd9
000cfe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002af0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002af2   ffe5
002af4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002af6   ffd9
002af8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002afa   ffe5
002afc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002afe   ffe5
002b00   0e02     movlw	0x2                	MOVLW	0x02
002b02   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b04   f000
002b06   0e03     movlw	0x3                	MOVLW	0x03
002b08   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b0a   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002b0c   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002b0e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002b10   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002b12   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002b14   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b16   0b01     andlw	0x1                	ANDLW	0x01
002b18   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b1a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b1c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002b1e   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002b20   0bfb     andlw	0xfb               	ANDLW	0xfb
002b22   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002b24   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002b26   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002b28   ff8d
002b2a   0000     nop                      	nop 
002b2c   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002b2e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002b30   0000     nop                      	nop 
002b32   0000     nop                      	nop 
002b34   0000     nop                      	nop 
002b36   0000     nop                      	nop 
002b38   0000     nop                      	nop 
002b3a   0000     nop                      	nop 
002b3c   0000     nop                      	nop 
002b3e   0000     nop                      	nop 
002b40   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002b42   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002b44   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b46   f001
002b48   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b4a   f000
002b4c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b4e   ffd9
002b50   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 16:23:32 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _set_time
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	256
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	64; src/newtime.c	int time_equals(time t1, time t2){
00123e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001240   ffe5
001242   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001244   ffd9
001246   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001248   ffe5
00124a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00124c   ffe5
00124e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001250   ffe5
001252   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001254   ffe5
001256   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001258   ffe5
00125a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00125c   ffe5
00125e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001260   ffe5
001262   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001264   ffe5
001266   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001268   ffe5
00126a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00126c   ffe5
00126e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001270   ffe5
001272   0e02     movlw	0x2                	MOVLW	0x02
001274   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001276   f000
001278   0e03     movlw	0x3                	MOVLW	0x03
00127a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00127c   f001
00127e   0e04     movlw	0x4                	MOVLW	0x04
001280   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001282   f002
001284   0e05     movlw	0x5                	MOVLW	0x05
001286   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001288   f003
00128a   0e06     movlw	0x6                	MOVLW	0x06
00128c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00128e   f004
001290   0e07     movlw	0x7                	MOVLW	0x07
001292   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001294   f005
                                           ;	.line	65; src/newtime.c	if(t1->seconds != t2->seconds)
001296   5000     movf	0, 0, 0             	MOVF	r0x00, W
001298   0f04     addlw	0x4                	ADDLW	0x04
00129a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00129c   0e00     movlw	0                  	MOVLW	0x00
00129e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0012a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0012a2   0e00     movlw	0                  	MOVLW	0x00
0012a4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0012a6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0012a8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0012aa   ffe9
0012ac   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0012ae   fff3
0012b0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0012b2   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
0012b4   f015
0012b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0012b8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0012ba   f007
0012bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012be   0f04     addlw	0x4                	ADDLW	0x04
0012c0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0012c2   0e00     movlw	0                  	MOVLW	0x00
0012c4   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0012c6   6e09     movwf	0x9, 0             	MOVWF	r0x09
0012c8   0e00     movlw	0                  	MOVLW	0x00
0012ca   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0012cc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0012ce   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0012d0   ffe9
0012d2   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0012d4   fff3
0012d6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0012d8   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
0012da   f015
0012dc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0012de   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0012e0   f009
0012e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012e4   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0012e6   e103     bnz	0x12ee               	BNZ	_00166_DS_
0012e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012ea   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0012ec   e003     bz	0x12f4                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	66; src/newtime.c	return 0;
0012ee   6af3     clrf	0xf3, 0             	CLRF	PRODL
0012f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0012f2   d04e     bra	0x1390               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	67; src/newtime.c	if(t1->minutes != t2->minutes)
0012f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012f6   0f02     addlw	0x2                	ADDLW	0x02
0012f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0012fa   0e00     movlw	0                  	MOVLW	0x00
0012fc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0012fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
001300   0e00     movlw	0                  	MOVLW	0x00
001302   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001304   6e08     movwf	0x8, 0             	MOVWF	r0x08
001306   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001308   ffe9
00130a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00130c   fff3
00130e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001310   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
001312   f015
001314   6e06     movwf	0x6, 0             	MOVWF	r0x06
001316   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001318   f007
00131a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00131c   0f02     addlw	0x2                	ADDLW	0x02
00131e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001320   0e00     movlw	0                  	MOVLW	0x00
001322   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001324   6e09     movwf	0x9, 0             	MOVWF	r0x09
001326   0e00     movlw	0                  	MOVLW	0x00
001328   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00132a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00132c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00132e   ffe9
001330   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001332   fff3
001334   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001336   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
001338   f015
00133a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00133c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00133e   f009
001340   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001342   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001344   e103     bnz	0x134c               	BNZ	_00168_DS_
001346   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001348   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00134a   e003     bz	0x1352                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	68; src/newtime.c	return 0;
00134c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00134e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001350   d01f     bra	0x1390               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	69; src/newtime.c	if(t1->hours != t2->hours)
001352   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001354   ffe9
001356   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001358   fff3
00135a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00135c   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
00135e   f015
001360   6e00     movwf	0, 0               	MOVWF	r0x00
001362   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001364   f001
001366   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001368   ffe9
00136a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00136c   fff3
00136e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001370   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
001372   f015
001374   6e03     movwf	0x3, 0             	MOVWF	r0x03
001376   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001378   f004
00137a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00137c   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
00137e   e103     bnz	0x1386               	BNZ	_00170_DS_
001380   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001382   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
001384   e003     bz	0x138c                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	70; src/newtime.c	return 0;
001386   6af3     clrf	0xf3, 0             	CLRF	PRODL
001388   6ae8     clrf	0xe8, 0             	CLRF	WREG
00138a   d002     bra	0x1390               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	71; src/newtime.c	return 1;
00138c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00138e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
001390   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001392   f00a
001394   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001396   f009
001398   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00139a   f008
00139c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00139e   f007
0013a0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0013a2   f006
0013a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0013a6   f005
0013a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0013aa   f004
0013ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0013ae   f003
0013b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0013b2   f002
0013b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0013b6   f001
0013b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0013ba   f000
0013bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0013be   ffd9
0013c0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	60; src/newtime.c	void time_print(time t, char* str){
001790   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001792   ffe5
001794   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001796   ffd9
001798   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00179a   ffe5
00179c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00179e   ffe5
0017a0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0017a2   ffe5
0017a4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0017a6   ffe5
0017a8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0017aa   ffe5
0017ac   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0017ae   ffe5
0017b0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0017b2   ffe5
0017b4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017b6   ffe5
0017b8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0017ba   ffe5
0017bc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0017be   ffe5
0017c0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0017c2   ffe5
0017c4   0e02     movlw	0x2                	MOVLW	0x02
0017c6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017c8   f000
0017ca   0e03     movlw	0x3                	MOVLW	0x03
0017cc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017ce   f001
0017d0   0e04     movlw	0x4                	MOVLW	0x04
0017d2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017d4   f002
0017d6   0e05     movlw	0x5                	MOVLW	0x05
0017d8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0017da   f003
0017dc   0e06     movlw	0x6                	MOVLW	0x06
0017de   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0017e0   f004
0017e2   0e07     movlw	0x7                	MOVLW	0x07
0017e4   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0017e6   f005
                                           ;	.line	61; src/newtime.c	sprintf(str, "%02u:%02u:%02u", t->hours, t->minutes, t->seconds);
0017e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017ea   0f04     addlw	0x4                	ADDLW	0x04
0017ec   6e06     movwf	0x6, 0             	MOVWF	r0x06
0017ee   0e00     movlw	0                  	MOVLW	0x00
0017f0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0017f2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0017f4   0e00     movlw	0                  	MOVLW	0x00
0017f6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0017f8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0017fa   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0017fc   ffe9
0017fe   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001800   fff3
001802   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001804   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
001806   f015
001808   6e06     movwf	0x6, 0             	MOVWF	r0x06
00180a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00180c   f007
00180e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001810   0f02     addlw	0x2                	ADDLW	0x02
001812   6e08     movwf	0x8, 0             	MOVWF	r0x08
001814   0e00     movlw	0                  	MOVLW	0x00
001816   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001818   6e09     movwf	0x9, 0             	MOVWF	r0x09
00181a   0e00     movlw	0                  	MOVLW	0x00
00181c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00181e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001820   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001822   ffe9
001824   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001826   fff3
001828   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00182a   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
00182c   f015
00182e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001830   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001832   f009
001834   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001836   ffe9
001838   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00183a   fff3
00183c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00183e   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
001840   f015
001842   6e00     movwf	0, 0               	MOVWF	r0x00
001844   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001846   f001
001848   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00184a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00184c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00184e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001850   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001854   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001858   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00185a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00185e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001860   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001864   0e29     movlw	0x29               	MOVLW	HIGH(__str_0)
001866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001868   0ee2     movlw	0xe2               	MOVLW	LOW(__str_0)
00186a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00186c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00186e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001870   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001872   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001874   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001878   ec62     call	0x1ec4, 0           	CALL	_sprintf
00187a   f00f
00187c   0e0c     movlw	0xc                	MOVLW	0x0c
00187e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001880   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001882   f00a
001884   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001886   f009
001888   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00188a   f008
00188c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00188e   f007
001890   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001892   f006
001894   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001896   f005
001898   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00189a   f004
00189c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00189e   f003
0018a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018a2   f002
0018a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018a6   f001
0018a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018aa   f000
0018ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018ae   ffd9
0018b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	56; src/newtime.c	void add_hour(time t){
002a72   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a74   ffe5
002a76   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a78   ffd9
002a7a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a7c   ffe5
002a7e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a80   ffe5
002a82   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a84   ffe5
002a86   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a88   ffe5
002a8a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a8c   ffe5
002a8e   0e02     movlw	0x2                	MOVLW	0x02
002a90   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a92   f000
002a94   0e03     movlw	0x3                	MOVLW	0x03
002a96   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a98   f001
002a9a   0e04     movlw	0x4                	MOVLW	0x04
002a9c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002a9e   f002
                                           ;	.line	57; src/newtime.c	set_hours(t,t->hours + 1);
002aa0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002aa2   ffe9
002aa4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002aa6   fff3
002aa8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002aaa   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
002aac   f015
002aae   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ab0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ab2   f004
002ab4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002ab6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002ab8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002aba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002abc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002abe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aca   5000     movf	0, 0, 0             	MOVF	r0x00, W
002acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ace   ec4a     call	0x2494, 0           	CALL	_set_hours
002ad0   f012
002ad2   0e05     movlw	0x5                	MOVLW	0x05
002ad4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ad6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002ad8   f004
002ada   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002adc   f003
002ade   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002ae0   f002
002ae2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ae4   f001
002ae6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ae8   f000
002aea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002aec   ffd9
002aee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	51; src/newtime.c	void add_minute(time t){
002550   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002552   ffe5
002554   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002556   ffd9
002558   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00255a   ffe5
00255c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00255e   ffe5
002560   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002562   ffe5
002564   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002566   ffe5
002568   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00256a   ffe5
00256c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00256e   ffe5
002570   0e02     movlw	0x2                	MOVLW	0x02
002572   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002574   f000
002576   0e03     movlw	0x3                	MOVLW	0x03
002578   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00257a   f001
00257c   0e04     movlw	0x4                	MOVLW	0x04
00257e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002580   f002
                                           ;	.line	52; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002582   5000     movf	0, 0, 0             	MOVF	r0x00, W
002584   0f02     addlw	0x2                	ADDLW	0x02
002586   6e03     movwf	0x3, 0             	MOVWF	r0x03
002588   0e00     movlw	0                  	MOVLW	0x00
00258a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00258c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00258e   0e00     movlw	0                  	MOVLW	0x00
002590   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002592   6e05     movwf	0x5, 0             	MOVWF	r0x05
002594   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002596   ffe9
002598   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00259a   fff3
00259c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00259e   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
0025a0   f015
0025a2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025a4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025a6   f004
0025a8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0025aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0025ac   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0025ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c2   ec82     call	0x2304, 0           	CALL	_set_minutes
0025c4   f011
0025c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025c8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025ca   f004
0025cc   0e05     movlw	0x5                	MOVLW	0x05
0025ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025d2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0025d4   e00a     bz	0x25ea                	BZ	_00139_DS_
                                           ;	.line	53; src/newtime.c	add_hour(t);
0025d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e2   ec39     call	0x2a72, 0           	CALL	_add_hour
0025e4   f015
0025e6   0e03     movlw	0x3                	MOVLW	0x03
0025e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0025ea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0025ec   f005
0025ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0025f0   f004
0025f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0025f4   f003
0025f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0025f8   f002
0025fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025fc   f001
0025fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002600   f000
002602   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002604   ffd9
002606   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	46; src/newtime.c	void add_second(time t){
002608   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00260a   ffe5
00260c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00260e   ffd9
002610   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002612   ffe5
002614   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002616   ffe5
002618   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00261a   ffe5
00261c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00261e   ffe5
002620   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002622   ffe5
002624   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002626   ffe5
002628   0e02     movlw	0x2                	MOVLW	0x02
00262a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00262c   f000
00262e   0e03     movlw	0x3                	MOVLW	0x03
002630   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002632   f001
002634   0e04     movlw	0x4                	MOVLW	0x04
002636   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002638   f002
                                           ;	.line	47; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
00263a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00263c   0f04     addlw	0x4                	ADDLW	0x04
00263e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002640   0e00     movlw	0                  	MOVLW	0x00
002642   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002644   6e04     movwf	0x4, 0             	MOVWF	r0x04
002646   0e00     movlw	0                  	MOVLW	0x00
002648   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00264a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00264c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00264e   ffe9
002650   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002652   fff3
002654   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002656   ecfb     call	0x2bf6, 0           	CALL	__gptrget2
002658   f015
00265a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00265c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00265e   f004
002660   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002662   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002664   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002666   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00266c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002672   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002676   5000     movf	0, 0, 0             	MOVF	r0x00, W
002678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267a   ec1e     call	0x223c, 0           	CALL	_set_seconds
00267c   f011
00267e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002680   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002682   f004
002684   0e05     movlw	0x5                	MOVLW	0x05
002686   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002688   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00268a   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
00268c   e00a     bz	0x26a2                	BZ	_00132_DS_
                                           ;	.line	48; src/newtime.c	add_minute(t);
00268e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002692   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002696   5000     movf	0, 0, 0             	MOVF	r0x00, W
002698   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00269a   eca8     call	0x2550, 0           	CALL	_add_minute
00269c   f012
00269e   0e03     movlw	0x3                	MOVLW	0x03
0026a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
0026a2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026a4   f005
0026a6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026a8   f004
0026aa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026ac   f003
0026ae   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026b0   f002
0026b2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026b4   f001
0026b6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026b8   f000
0026ba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026bc   ffd9
0026be   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
00223c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00223e   ffe5
002240   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002242   ffd9
002244   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002246   ffe5
002248   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00224a   ffe5
00224c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00224e   ffe5
002250   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002252   ffe5
002254   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002256   ffe5
002258   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00225a   ffe5
00225c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00225e   ffe5
002260   0e02     movlw	0x2                	MOVLW	0x02
002262   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002264   f000
002266   0e03     movlw	0x3                	MOVLW	0x03
002268   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226a   f001
00226c   0e04     movlw	0x4                	MOVLW	0x04
00226e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002270   f002
002272   0e05     movlw	0x5                	MOVLW	0x05
002274   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002276   f003
002278   0e06     movlw	0x6                	MOVLW	0x06
00227a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00227c   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
00227e   0e00     movlw	0                  	MOVLW	0x00
002280   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002282   0e3c     movlw	0x3c               	MOVLW	0x3c
002284   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002286   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002288   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00228a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00228c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00228e   ec6f     call	0x1cde, 0           	CALL	__divsint
002290   f00e
002292   6e05     movwf	0x5, 0             	MOVWF	r0x05
002294   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002296   f006
002298   0e04     movlw	0x4                	MOVLW	0x04
00229a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
00229c   0e04     movlw	0x4                	MOVLW	0x04
00229e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0022a0   0e00     movlw	0                  	MOVLW	0x00
0022a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022a4   0e00     movlw	0                  	MOVLW	0x00
0022a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022a8   0e00     movlw	0                  	MOVLW	0x00
0022aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ac   0e3c     movlw	0x3c               	MOVLW	0x3c
0022ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b8   ecd7     call	0x1fae, 0           	CALL	__modsint
0022ba   f00f
0022bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022be   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0022c0   f004
0022c2   0e04     movlw	0x4                	MOVLW	0x04
0022c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0022c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0022c8   ffe5
0022ca   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0022cc   fff4
0022ce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0022d0   ffe9
0022d2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022d4   fff3
0022d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022d8   ec3c     call	0x2c78, 0           	CALL	__gptrput2
0022da   f016
                                           ;	.line	42; src/newtime.c	return overflow;
0022dc   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0022de   fff3
0022e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0022e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0022e4   f006
0022e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0022e8   f005
0022ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0022ec   f004
0022ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0022f0   f003
0022f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0022f4   f002
0022f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0022f8   f001
0022fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0022fc   f000
0022fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002300   ffd9
002302   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
002304   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002306   ffe5
002308   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00230a   ffd9
00230c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00230e   ffe5
002310   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002312   ffe5
002314   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002316   ffe5
002318   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00231a   ffe5
00231c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00231e   ffe5
002320   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002322   ffe5
002324   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002326   ffe5
002328   0e02     movlw	0x2                	MOVLW	0x02
00232a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00232c   f000
00232e   0e03     movlw	0x3                	MOVLW	0x03
002330   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002332   f001
002334   0e04     movlw	0x4                	MOVLW	0x04
002336   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002338   f002
00233a   0e05     movlw	0x5                	MOVLW	0x05
00233c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00233e   f003
002340   0e06     movlw	0x6                	MOVLW	0x06
002342   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002344   f004
                                           ;	.line	34; src/newtime.c	int overflow = value / 60;
002346   0e00     movlw	0                  	MOVLW	0x00
002348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234a   0e3c     movlw	0x3c               	MOVLW	0x3c
00234c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002352   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002356   ec6f     call	0x1cde, 0           	CALL	__divsint
002358   f00e
00235a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00235c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00235e   f006
002360   0e04     movlw	0x4                	MOVLW	0x04
002362   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value % 60;
002364   0e02     movlw	0x2                	MOVLW	0x02
002366   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002368   0e00     movlw	0                  	MOVLW	0x00
00236a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00236c   0e00     movlw	0                  	MOVLW	0x00
00236e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002370   0e00     movlw	0                  	MOVLW	0x00
002372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002374   0e3c     movlw	0x3c               	MOVLW	0x3c
002376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00237a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00237c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00237e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002380   ecd7     call	0x1fae, 0           	CALL	__modsint
002382   f00f
002384   6e03     movwf	0x3, 0             	MOVWF	r0x03
002386   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002388   f004
00238a   0e04     movlw	0x4                	MOVLW	0x04
00238c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00238e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002390   ffe5
002392   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002394   fff4
002396   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002398   ffe9
00239a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00239c   fff3
00239e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023a0   ec3c     call	0x2c78, 0           	CALL	__gptrput2
0023a2   f016
                                           ;	.line	36; src/newtime.c	return overflow;
0023a4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0023a6   fff3
0023a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023aa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0023ac   f006
0023ae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0023b0   f005
0023b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023b4   f004
0023b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023b8   f003
0023ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023bc   f002
0023be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023c0   f001
0023c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0023c4   f000
0023c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0023c8   ffd9
0023ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002494   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002496   ffe5
002498   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00249a   ffd9
00249c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00249e   ffe5
0024a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024a2   ffe5
0024a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024a6   ffe5
0024a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024aa   ffe5
0024ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024ae   ffe5
0024b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024b2   ffe5
0024b4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024b6   ffe5
0024b8   0e02     movlw	0x2                	MOVLW	0x02
0024ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024bc   f000
0024be   0e03     movlw	0x3                	MOVLW	0x03
0024c0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024c2   f001
0024c4   0e04     movlw	0x4                	MOVLW	0x04
0024c6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024c8   f002
0024ca   0e05     movlw	0x5                	MOVLW	0x05
0024cc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024ce   f003
0024d0   0e06     movlw	0x6                	MOVLW	0x06
0024d2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024d4   f004
                                           ;	.line	28; src/newtime.c	int overflow = value / 24;
0024d6   0e00     movlw	0                  	MOVLW	0x00
0024d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024da   0e18     movlw	0x18               	MOVLW	0x18
0024dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e6   ec6f     call	0x1cde, 0           	CALL	__divsint
0024e8   f00e
0024ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
0024ec   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0024ee   f006
0024f0   0e04     movlw	0x4                	MOVLW	0x04
0024f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value % 24;
0024f4   0e00     movlw	0                  	MOVLW	0x00
0024f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f8   0e18     movlw	0x18               	MOVLW	0x18
0024fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002500   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002502   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002504   ecd7     call	0x1fae, 0           	CALL	__modsint
002506   f00f
002508   6e03     movwf	0x3, 0             	MOVWF	r0x03
00250a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00250c   f004
00250e   0e04     movlw	0x4                	MOVLW	0x04
002510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002512   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002514   ffe5
002516   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002518   fff4
00251a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00251c   ffe9
00251e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002520   fff3
002522   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002524   ec3c     call	0x2c78, 0           	CALL	__gptrput2
002526   f016
                                           ;	.line	30; src/newtime.c	return overflow;
002528   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00252a   fff3
00252c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00252e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002530   f006
002532   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002534   f005
002536   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002538   f004
00253a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00253c   f003
00253e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002540   f002
002542   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002544   f001
002546   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002548   f000
00254a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00254c   ffd9
00254e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_time	code
                                           _set_time:
                                           ;	.line	21; src/newtime.c	void set_time(time t, int hours, int minutes, int seconds){
002092   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002094   ffe5
002096   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002098   ffd9
00209a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00209c   ffe5
00209e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020a0   ffe5
0020a2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0020a4   ffe5
0020a6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020a8   ffe5
0020aa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0020ac   ffe5
0020ae   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0020b0   ffe5
0020b2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0020b4   ffe5
0020b6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0020b8   ffe5
0020ba   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0020bc   ffe5
0020be   0e02     movlw	0x2                	MOVLW	0x02
0020c0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0020c2   f000
0020c4   0e03     movlw	0x3                	MOVLW	0x03
0020c6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0020c8   f001
0020ca   0e04     movlw	0x4                	MOVLW	0x04
0020cc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0020ce   f002
0020d0   0e05     movlw	0x5                	MOVLW	0x05
0020d2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0020d4   f003
0020d6   0e06     movlw	0x6                	MOVLW	0x06
0020d8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0020da   f004
0020dc   0e07     movlw	0x7                	MOVLW	0x07
0020de   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0020e0   f005
0020e2   0e08     movlw	0x8                	MOVLW	0x08
0020e4   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0020e6   f006
0020e8   0e09     movlw	0x9                	MOVLW	0x09
0020ea   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0020ec   f007
0020ee   0e0a     movlw	0xa                	MOVLW	0x0a
0020f0   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0020f2   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0020f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002100   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002104   5000     movf	0, 0, 0             	MOVF	r0x00, W
002106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002108   ec4a     call	0x2494, 0           	CALL	_set_hours
00210a   f012
00210c   0e05     movlw	0x5                	MOVLW	0x05
00210e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002110   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002114   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002118   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00211a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00211e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002120   5000     movf	0, 0, 0             	MOVF	r0x00, W
002122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002124   ec82     call	0x2304, 0           	CALL	_set_minutes
002126   f011
002128   0e05     movlw	0x5                	MOVLW	0x05
00212a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
00212c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00212e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002130   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002134   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002136   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002138   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00213a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00213e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002140   ec1e     call	0x223c, 0           	CALL	_set_seconds
002142   f011
002144   0e05     movlw	0x5                	MOVLW	0x05
002146   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002148   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00214a   f008
00214c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00214e   f007
002150   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002152   f006
002154   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002156   f005
002158   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00215a   f004
00215c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00215e   f003
002160   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002162   f002
002164   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002166   f001
002168   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00216a   f000
00216c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00216e   ffd9
002170   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
00296a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00296c   ffe5
00296e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002970   ffd9
002972   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002974   ffe5
002976   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002978   ffe5
00297a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00297c   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
00297e   0e06     movlw	0x6                	MOVLW	0x06
002980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002982   ec5c     call	0x10b8, 0           	CALL	_malloc
002984   f008
002986   6e00     movwf	0, 0               	MOVWF	r0x00
002988   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00298a   f001
00298c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00298e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002990   6e01     movwf	0x1, 0             	MOVWF	r0x01
002992   5000     movf	0, 0, 0             	MOVF	r0x00, W
002994   6e00     movwf	0, 0               	MOVWF	r0x00
002996   0e80     movlw	0x80               	MOVLW	0x80
002998   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	set_time(t,0,0,0);
00299a   0e00     movlw	0                  	MOVLW	0x00
00299c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00299e   0e00     movlw	0                  	MOVLW	0x00
0029a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029a2   0e00     movlw	0                  	MOVLW	0x00
0029a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029a6   0e00     movlw	0                  	MOVLW	0x00
0029a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029aa   0e00     movlw	0                  	MOVLW	0x00
0029ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ae   0e00     movlw	0                  	MOVLW	0x00
0029b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029be   ec49     call	0x2092, 0           	CALL	_set_time
0029c0   f010
0029c2   0e09     movlw	0x9                	MOVLW	0x09
0029c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
0029c6   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0029c8   fff4
0029ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0029cc   fff3
0029ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029d0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029d2   f002
0029d4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029d6   f001
0029d8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029da   f000
0029dc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029de   ffd9
0029e0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0029e2   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30
0029e4   7532     btg	0x32, 0x2, 0x1       
0029e6   253a     addwf	0x3a, 0, 0x1       
0029e8   3230     rrcf	0x30, 0x1, 0        
0029ea   3a75     swapf	0x75, 0x1, 0       
0029ec   3025     rrcf	0x25, 0, 0          
0029ee   7532     btg	0x32, 0x2, 0x1       	DB	0x32, 0x75, 0x00
0029f0   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	  256 (0x0100) bytes ( 6.67%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
