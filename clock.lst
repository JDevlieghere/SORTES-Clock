gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  21:13:12
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 21:13:12 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_clock
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _main
                                           	global _alarm_led
                                           	global _lowPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_lowPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_lowPriorityInterruptHandler:
000008   ef4f     goto	0x149e              	GOTO	_lowPriorityInterruptHandler
00000a   f00a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	36; src/clock.c	_time = time_create();
002b8e   ec04     call	0x2a08, 0           	CALL	_time_create
002b90   f015
002b92   010f     movlb	0xf                	BANKSEL	__time
002b94   6f55     movwf	0x55, 0x1          	MOVWF	__time, B
002b96   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (__time + 1)
002b98   ff56
002b9a   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (__time + 2)
002b9c   ff57
                                           ;	.line	37; src/clock.c	_alarm = time_create();
002b9e   ec04     call	0x2a08, 0           	CALL	_time_create
002ba0   f015
002ba2   010f     movlb	0xf                	BANKSEL	__alarm
002ba4   6f58     movwf	0x58, 0x1          	MOVWF	__alarm, B
002ba6   cff3     movff	0xff3, 0xf59       	MOVFF	PRODL, (__alarm + 1)
002ba8   ff59
002baa   cff4     movff	0xff4, 0xf5a       	MOVFF	PRODH, (__alarm + 2)
002bac   ff5a
                                           ;	.line	39; src/clock.c	init();
002bae   ec96     call	0x2d2c, 0           	CALL	_init
002bb0   f016
002bb2   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	40; src/clock.c	init_clock(_time);
002bb4   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
002bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bb8   010f     movlb	0xf                	BANKSEL	(__time + 1)
002bba   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
002bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bbe   010f     movlb	0xf                	BANKSEL	__time
002bc0   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
002bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bc4   ecab     call	0x1b56, 0           	CALL	_init_clock
002bc6   f00d
002bc8   0e03     movlw	0x3                	MOVLW	0x03
002bca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/clock.c	time_set(_alarm,0,0,5);
002bcc   0e00     movlw	0                  	MOVLW	0x00
002bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bd0   0e05     movlw	0x5                	MOVLW	0x05
002bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bd4   0e00     movlw	0                  	MOVLW	0x00
002bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bd8   0e00     movlw	0                  	MOVLW	0x00
002bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bdc   0e00     movlw	0                  	MOVLW	0x00
002bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002be0   0e00     movlw	0                  	MOVLW	0x00
002be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002be4   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
002be6   515a     movf	0x5a, 0, 0x1        	MOVF	(__alarm + 2), W, B
002be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bea   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
002bec   5159     movf	0x59, 0, 0x1        	MOVF	(__alarm + 1), W, B
002bee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bf0   010f     movlb	0xf                	BANKSEL	__alarm
002bf2   5158     movf	0x58, 0, 0x1        	MOVF	__alarm, W, B
002bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bf6   ec03     call	0x2006, 0           	CALL	_time_set
002bf8   f010
002bfa   0e09     movlw	0x9                	MOVLW	0x09
002bfc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	42; src/clock.c	update_display();
002bfe   ec23     call	0x2846, 0           	CALL	_update_display
002c00   f014
                                           ;	.line	43; src/clock.c	return 0;
002c02   6af3     clrf	0xf3, 0             	CLRF	PRODL
002c04   6ae8     clrf	0xe8, 0             	CLRF	WREG
002c06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	131; src/clock.c	void init(void){
002d2c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d2e   ffe5
002d30   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d32   ffd9
                                           ;	.line	133; src/clock.c	LCDInit();
002d34   ec56     call	0xaac, 0            	CALL	_LCDInit
002d36   f005
                                           ;	.line	136; src/clock.c	INTCONbits.GIE = 1;
002d38   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	137; src/clock.c	INTCONbits.PEIE = 1;
002d3a   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	140; src/clock.c	T0CONbits.TMR0ON = 0;
002d3c   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	143; src/clock.c	TMR0H = 0x00000000;
002d3e   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	144; src/clock.c	TMR0L = 0x00000000;
002d40   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	147; src/clock.c	T0CONbits.T08BIT = 0;
002d42   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	150; src/clock.c	T0CONbits.T0CS = 0;
002d44   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	153; src/clock.c	T0CONbits.PSA = 1;
002d46   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	156; src/clock.c	INTCONbits.TMR0IE = 1;
002d48   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	165; src/clock.c	LED0_TRIS = 0;
002d4a   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	166; src/clock.c	LED1_TRIS = 0;   
002d4c   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	167; src/clock.c	LED2_TRIS = 0;
002d4e   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	168; src/clock.c	LED3_TRIS = 0;
002d50   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	171; src/clock.c	LED0_IO = 0; 
002d52   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	172; src/clock.c	LED1_IO = 0;
002d54   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	173; src/clock.c	LED2_IO = 0;
002d56   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	174; src/clock.c	LED3_IO = 1;
002d58   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
002d5a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d5c   ffd9
002d5e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__lowPriorityInterruptHandler	code
                                           _lowPriorityInterruptHandler:
                                           ;	.line	104; src/clock.c	void lowPriorityInterruptHandler (void) __interrupt(1){
00149e   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0014a0   ffe5
0014a2   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0014a4   ffe5
0014a6   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0014a8   ffe5
0014aa   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0014ac   ffe5
0014ae   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0014b0   ffe5
0014b2   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0014b4   ffe5
0014b6   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0014b8   ffe5
0014ba   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0014bc   ffe5
0014be   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0014c0   ffe5
0014c2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014c4   ffe5
0014c6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014c8   ffd9
0014ca   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014cc   ffe5
0014ce   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0014d0   ffe5
                                           ;	.line	105; src/clock.c	if (INTCONbits.TMR0IF == 1) {
0014d2   6a00     clrf	0, 0                	CLRF	r0x00
0014d4   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0014d6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0014d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014da   0a01     xorlw	0x1                	XORLW	0x01
0014dc   e001     bz	0x14e0                	BZ	_00195_DS_
0014de   d06b     bra	0x15b6               	BRA	_00186_DS_
                                           _00195_DS_:
0014e0   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	106; src/clock.c	overflow_counter++;
0014e2   2b52     incf	0x52, 0x1, 0x1      	INCF	_overflow_counter, F, B
0014e4   e302     bnc	0x14ea               	BNC	_10206_DS_
0014e6   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0014e8   2b53     incf	0x53, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10206_DS_:
0014ea   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	107; src/clock.c	if(overflow_counter == 50){
0014ec   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
0014ee   0a32     xorlw	0x32               	XORLW	0x32
0014f0   e103     bnz	0x14f8               	BNZ	_00196_DS_
0014f2   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0014f4   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0014f6   e001     bz	0x14fa                	BZ	_00197_DS_
                                           _00196_DS_:
0014f8   d003     bra	0x1500               	BRA	_00182_DS_
                                           _00197_DS_:
                                           ;	.line	108; src/clock.c	toggle_led();
0014fa   ecb0     call	0x2d60, 0           	CALL	_toggle_led
0014fc   f016
0014fe   d05a     bra	0x15b4               	BRA	_00183_DS_
                                           _00182_DS_:
001500   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	109; src/clock.c	}else if(overflow_counter == 100){
001502   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
001504   0a64     xorlw	0x64               	XORLW	0x64
001506   e103     bnz	0x150e               	BNZ	_00198_DS_
001508   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
00150a   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
00150c   e001     bz	0x1510                	BZ	_00199_DS_
                                           _00198_DS_:
00150e   d052     bra	0x15b4               	BRA	_00183_DS_
                                           _00199_DS_:
001510   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	110; src/clock.c	if(time_equals(_alarm,_time)){
001512   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
001514   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001516   010f     movlb	0xf                	BANKSEL	(__time + 1)
001518   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
00151a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00151c   010f     movlb	0xf                	BANKSEL	__time
00151e   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
001520   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001522   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001524   515a     movf	0x5a, 0, 0x1        	MOVF	(__alarm + 2), W, B
001526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001528   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
00152a   5159     movf	0x59, 0, 0x1        	MOVF	(__alarm + 1), W, B
00152c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00152e   010f     movlb	0xf                	BANKSEL	__alarm
001530   5158     movf	0x58, 0, 0x1        	MOVF	__alarm, W, B
001532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001534   ec23     call	0x1046, 0           	CALL	_time_equals
001536   f008
001538   6e00     movwf	0, 0               	MOVWF	r0x00
00153a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00153c   f001
00153e   0e06     movlw	0x6                	MOVLW	0x06
001540   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001542   5000     movf	0, 0, 0             	MOVF	r0x00, W
001544   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001546   e005     bz	0x1552                	BZ	_00174_DS_
                                           ;	.line	111; src/clock.c	alarm_going_off = 1;
001548   0e01     movlw	0x1                	MOVLW	0x01
00154a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
00154c   6f4e     movwf	0x4e, 0x1          	MOVWF	_alarm_going_off, B
00154e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001550   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00174_DS_:
001552   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	113; src/clock.c	if(alarm_going_off){
001554   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_going_off, W, B
001556   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001558   114f     iorwf	0x4f, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
00155a   e017     bz	0x158a                	BZ	_00178_DS_
00155c   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	114; src/clock.c	alarm_counter++;
00155e   2b50     incf	0x50, 0x1, 0x1      	INCF	_alarm_counter, F, B
001560   e302     bnc	0x1566               	BNC	_20207_DS_
001562   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001564   2b51     incf	0x51, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20207_DS_:
                                           ;	.line	115; src/clock.c	alarm_led();
001566   ec35     call	0x2c6a, 0           	CALL	_alarm_led
001568   f016
00156a   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	116; src/clock.c	if(alarm_counter==30){
00156c   5150     movf	0x50, 0, 0x1        	MOVF	_alarm_counter, W, B
00156e   0a1e     xorlw	0x1e               	XORLW	0x1e
001570   e103     bnz	0x1578               	BNZ	_00200_DS_
001572   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001574   5151     movf	0x51, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001576   e001     bz	0x157a                	BZ	_00201_DS_
                                           _00200_DS_:
001578   d008     bra	0x158a               	BRA	_00178_DS_
                                           _00201_DS_:
00157a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	117; src/clock.c	alarm_going_off =0;
00157c   6b4e     clrf	0x4e, 0x1           	CLRF	_alarm_going_off, B
00157e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001580   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
001582   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	118; src/clock.c	alarm_counter = 0;
001584   6b50     clrf	0x50, 0x1           	CLRF	_alarm_counter, B
001586   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001588   6b51     clrf	0x51, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00178_DS_:
00158a   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	121; src/clock.c	overflow_counter = 0;
00158c   6b52     clrf	0x52, 0x1           	CLRF	_overflow_counter, B
00158e   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001590   6b53     clrf	0x53, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	122; src/clock.c	toggle_led();
001592   ecb0     call	0x2d60, 0           	CALL	_toggle_led
001594   f016
001596   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	123; src/clock.c	add_second(_time);
001598   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
00159a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00159c   010f     movlb	0xf                	BANKSEL	(__time + 1)
00159e   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
0015a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015a2   010f     movlb	0xf                	BANKSEL	__time
0015a4   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
0015a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015a8   ecbe     call	0x257c, 0           	CALL	_add_second
0015aa   f012
0015ac   0e03     movlw	0x3                	MOVLW	0x03
0015ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	124; src/clock.c	update_display();
0015b0   ec23     call	0x2846, 0           	CALL	_update_display
0015b2   f014
                                           _00183_DS_:
                                           ;	.line	126; src/clock.c	INTCONbits.TMR0IF = 0;
0015b4   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00186_DS_:
0015b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015b8   f001
0015ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0015bc   f000
0015be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0015c0   ffd9
0015c2   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0015c4   fffb
0015c6   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0015c8   fffa
0015ca   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0015cc   ffea
0015ce   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0015d0   ffe9
0015d2   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0015d4   fff4
0015d6   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0015d8   fff3
0015da   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0015dc   ffe0
0015de   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0015e0   ffd8
0015e2   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0015e4   ffe8
0015e6   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	98; src/clock.c	char* to_double_digits(int value){
00297c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00297e   ffe5
002980   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002982   ffd9
002984   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002986   ffe5
002988   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00298a   ffe5
00298c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00298e   ffe5
002990   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002992   ffe5
002994   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002996   ffe5
002998   0e02     movlw	0x2                	MOVLW	0x02
00299a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00299c   f000
00299e   0e03     movlw	0x3                	MOVLW	0x03
0029a0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029a2   f001
                                           ;	.line	100; src/clock.c	sprintf(buffer, "%02d", value);
0029a4   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
0029a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029a8   0e5b     movlw	0x5b               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0029aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0029ac   0e80     movlw	0x80               	MOVLW	0x80
0029ae   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b8   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
0029ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029bc   0e28     movlw	0x28               	MOVLW	HIGH(__str_3)
0029be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c0   0ede     movlw	0xde               	MOVLW	LOW(__str_3)
0029c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d0   ec1c     call	0x1e38, 0           	CALL	_sprintf
0029d2   f00f
0029d4   0e08     movlw	0x8                	MOVLW	0x08
0029d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	101; src/clock.c	return buffer;
0029d8   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
0029da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0029dc   0e5b     movlw	0x5b               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0029de   6e00     movwf	0, 0               	MOVWF	r0x00
0029e0   0e80     movlw	0x80               	MOVLW	0x80
0029e2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0029e4   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0029e6   fff4
0029e8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0029ea   fff3
0029ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029f0   f004
0029f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029f4   f003
0029f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029f8   f002
0029fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029fc   f001
0029fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a00   f000
002a02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a04   ffd9
002a06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	87; src/clock.c	void display_string(BYTE pos, char* text){
001948   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00194a   ffe5
00194c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00194e   ffd9
001950   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001952   ffe5
001954   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001956   ffe5
001958   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00195a   ffe5
00195c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00195e   ffe5
001960   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001962   ffe5
001964   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001966   ffe5
001968   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00196a   ffe5
00196c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00196e   ffe5
001970   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001972   ffe5
001974   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001976   ffe5
001978   0e02     movlw	0x2                	MOVLW	0x02
00197a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00197c   f000
00197e   0e03     movlw	0x3                	MOVLW	0x03
001980   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001982   f001
001984   0e04     movlw	0x4                	MOVLW	0x04
001986   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001988   f002
00198a   0e05     movlw	0x5                	MOVLW	0x05
00198c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00198e   f003
                                           ;	.line	88; src/clock.c	BYTE        l = strlen(text);
001990   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001994   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001996   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001998   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00199a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199c   ec48     call	0x2a90, 0           	CALL	_strlen
00199e   f015
0019a0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019a2   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0019a4   f005
0019a6   0e03     movlw	0x3                	MOVLW	0x03
0019a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	89; src/clock.c	BYTE      max = 32-pos;    
0019aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019ac   0820     sublw	0x20               	SUBLW	0x20
0019ae   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	90; src/clock.c	char       *d = (char*)&LCDText[pos];
0019b0   6a06     clrf	0x6, 0              	CLRF	r0x06
0019b2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0019b4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0019b6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0019b8   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0019ba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019bc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019c0   6e00     movwf	0, 0               	MOVWF	r0x00
0019c2   0e80     movlw	0x80               	MOVLW	0x80
0019c4   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	92; src/clock.c	size_t      n = (l<max)?l:max;
0019c6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019c8   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0019ca   e302     bnc	0x19d0               	BNC	_00158_DS_
0019cc   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0019ce   f004
                                           _00158_DS_:
0019d0   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	93; src/clock.c	if (n != 0)
0019d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019d4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0019d6   e027     bz	0x1a26                	BZ	_00154_DS_
                                           _00150_DS_:
                                           ;	.line	94; src/clock.c	while (n-- != 0)*d++ = *s++;
0019d8   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0019da   f008
0019dc   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
0019de   f009
0019e0   0eff     movlw	0xff               	MOVLW	0xff
0019e2   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019e4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019e6   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0019e8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0019ea   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
0019ec   e01c     bz	0x1a26                	BZ	_00154_DS_
0019ee   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0019f0   ffe9
0019f2   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0019f4   fff3
0019f6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019f8   ecf4     call	0x2de8, 0           	CALL	__gptrget1
0019fa   f016
0019fc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019fe   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001a00   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a02   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001a04   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a06   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001a08   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a0a   ffe5
001a0c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a0e   ffe9
001a10   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001a12   fff3
001a14   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a16   ec2b     call	0x2e56, 0           	CALL	__gptrput1
001a18   f017
001a1a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001a1c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a1e   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001a20   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a22   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001a24   d7d9     bra	0x19d8               	BRA	_00150_DS_
                                           _00154_DS_:
                                           ;	.line	95; src/clock.c	LCDUpdate();
001a26   ec21     call	0x842, 0            	CALL	_LCDUpdate
001a28   f004
001a2a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a2c   f009
001a2e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a30   f008
001a32   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a34   f007
001a36   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a38   f006
001a3a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a3c   f005
001a3e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a40   f004
001a42   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a44   f003
001a46   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a48   f002
001a4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a4c   f001
001a4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a50   f000
001a52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a54   ffd9
001a56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	70; src/clock.c	int get_input(int maxvalue, char *text){
0011ca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011cc   ffe5
0011ce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011d0   ffd9
0011d2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011d4   ffe5
0011d6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011d8   ffe5
0011da   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011dc   ffe5
0011de   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011e0   ffe5
0011e2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011e4   ffe5
0011e6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011e8   ffe5
0011ea   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011ec   ffe5
0011ee   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011f0   ffe5
0011f2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011f4   ffe5
0011f6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011f8   ffe5
0011fa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011fc   ffe5
0011fe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001200   ffe5
001202   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001204   ffe5
001206   0e02     movlw	0x2                	MOVLW	0x02
001208   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00120a   f000
00120c   0e03     movlw	0x3                	MOVLW	0x03
00120e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001210   f001
001212   0e04     movlw	0x4                	MOVLW	0x04
001214   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001216   f002
001218   0e05     movlw	0x5                	MOVLW	0x05
00121a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00121c   f003
00121e   0e06     movlw	0x6                	MOVLW	0x06
001220   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001222   f004
                                           ;	.line	71; src/clock.c	BYTE length = strlen(text);
001224   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001228   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00122a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00122e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001230   ec48     call	0x2a90, 0           	CALL	_strlen
001232   f015
001234   6e05     movwf	0x5, 0             	MOVWF	r0x05
001236   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001238   f006
00123a   0e03     movlw	0x3                	MOVLW	0x03
00123c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	72; src/clock.c	int value = 0;
00123e   6a06     clrf	0x6, 0              	CLRF	r0x06
001240   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	73; src/clock.c	display_string(0, text);
001242   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001244   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001246   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001248   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00124a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00124c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00124e   0e00     movlw	0                  	MOVLW	0x00
001250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001252   eca4     call	0x1948, 0           	CALL	_display_string
001254   f00c
001256   0e04     movlw	0x4                	MOVLW	0x04
001258   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	74; src/clock.c	while(1)
00125a   2805     incf	0x5, 0, 0           	INCF	r0x05, W
00125c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00145_DS_:
                                           ;	.line	76; src/clock.c	DelayMs(10);
00125e   0e68     movlw	0x68               	MOVLW	0x68
001260   6e03     movwf	0x3, 0             	MOVWF	r0x03
001262   0e42     movlw	0x42               	MOVLW	0x42
001264   6e04     movwf	0x4, 0             	MOVWF	r0x04
001266   6a05     clrf	0x5, 0              	CLRF	r0x05
001268   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00130_DS_:
00126a   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
00126c   f009
00126e   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
001270   f00a
001272   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
001274   f00b
001276   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
001278   f00c
00127a   0eff     movlw	0xff               	MOVLW	0xff
00127c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00127e   0eff     movlw	0xff               	MOVLW	0xff
001280   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001282   0eff     movlw	0xff               	MOVLW	0xff
001284   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001286   0eff     movlw	0xff               	MOVLW	0xff
001288   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
00128a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00128c   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
00128e   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
001290   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
001292   e1eb     bnz	0x126a               	BNZ	_00130_DS_
                                           ;	.line	77; src/clock.c	if(BUTTON1_IO == 0u){
001294   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
001296   d006     bra	0x12a4               	BRA	_00137_DS_
                                           ;	.line	78; src/clock.c	LCDErase();
001298   ec76     call	0x26ec, 0           	CALL	_LCDErase
00129a   f013
                                           ;	.line	79; src/clock.c	return value;
00129c   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00129e   fff3
0012a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012a2   d02e     bra	0x1300               	BRA	_00143_DS_
                                           _00137_DS_:
                                           ;	.line	81; src/clock.c	if(BUTTON0_IO == 0u) 
0012a4   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0012a6   d012     bra	0x12cc               	BRA	_00139_DS_
                                           ;	.line	82; src/clock.c	value = (++value)%maxvalue;
0012a8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0012aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012ac   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0012ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012be   ec91     call	0x1f22, 0           	CALL	__modsint
0012c0   f00f
0012c2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0012c4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0012c6   f007
0012c8   0e04     movlw	0x4                	MOVLW	0x04
0012ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
                                           ;	.line	83; src/clock.c	display_string(length + 1, to_double_digits(value));
0012cc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d4   ecbe     call	0x297c, 0           	CALL	_to_double_digits
0012d6   f014
0012d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0012da   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0012dc   f004
0012de   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0012e0   f005
0012e2   0e02     movlw	0x2                	MOVLW	0x02
0012e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0012e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f6   eca4     call	0x1948, 0           	CALL	_display_string
0012f8   f00c
0012fa   0e04     movlw	0x4                	MOVLW	0x04
0012fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012fe   d7af     bra	0x125e               	BRA	_00145_DS_
                                           _00143_DS_:
001300   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001302   f00c
001304   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001306   f00b
001308   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00130a   f00a
00130c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00130e   f009
001310   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001312   f008
001314   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001316   f007
001318   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00131a   f006
00131c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00131e   f005
001320   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001322   f004
001324   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001326   f003
001328   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00132a   f002
00132c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00132e   f001
001330   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001332   f000
001334   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001336   ffd9
001338   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_clock	code
                                           _init_clock:
                                           ;	.line	60; src/clock.c	void init_clock(time t){
001b56   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b58   ffe5
001b5a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b5c   ffd9
001b5e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b60   ffe5
001b62   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001b64   ffe5
001b66   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001b68   ffe5
001b6a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001b6c   ffe5
001b6e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001b70   ffe5
001b72   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001b74   ffe5
001b76   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001b78   ffe5
001b7a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001b7c   ffe5
001b7e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001b80   ffe5
001b82   0e02     movlw	0x2                	MOVLW	0x02
001b84   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001b86   f000
001b88   0e03     movlw	0x3                	MOVLW	0x03
001b8a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001b8c   f001
001b8e   0e04     movlw	0x4                	MOVLW	0x04
001b90   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001b92   f002
                                           ;	.line	62; src/clock.c	h = get_input(24, "HOURS:");
001b94   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b98   0e28     movlw	0x28               	MOVLW	HIGH(__str_0)
001b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b9c   0ec2     movlw	0xc2               	MOVLW	LOW(__str_0)
001b9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ba0   0e00     movlw	0                  	MOVLW	0x00
001ba2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ba4   0e18     movlw	0x18               	MOVLW	0x18
001ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ba8   ece5     call	0x11ca, 0           	CALL	_get_input
001baa   f008
001bac   6e03     movwf	0x3, 0             	MOVWF	r0x03
001bae   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001bb0   f004
001bb2   0e05     movlw	0x5                	MOVLW	0x05
001bb4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	63; src/clock.c	m = get_input(60, "MINUTES:");
001bb6   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bba   0e28     movlw	0x28               	MOVLW	HIGH(__str_1)
001bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bbe   0eca     movlw	0xca               	MOVLW	LOW(__str_1)
001bc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc2   0e00     movlw	0                  	MOVLW	0x00
001bc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc6   0e3c     movlw	0x3c               	MOVLW	0x3c
001bc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bca   ece5     call	0x11ca, 0           	CALL	_get_input
001bcc   f008
001bce   6e05     movwf	0x5, 0             	MOVWF	r0x05
001bd0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001bd2   f006
001bd4   0e05     movlw	0x5                	MOVLW	0x05
001bd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	64; src/clock.c	s = get_input(60, "SECONDS:");
001bd8   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bdc   0e28     movlw	0x28               	MOVLW	HIGH(__str_2)
001bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be0   0ed4     movlw	0xd4               	MOVLW	LOW(__str_2)
001be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be4   0e00     movlw	0                  	MOVLW	0x00
001be6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be8   0e3c     movlw	0x3c               	MOVLW	0x3c
001bea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bec   ece5     call	0x11ca, 0           	CALL	_get_input
001bee   f008
001bf0   6e07     movwf	0x7, 0             	MOVWF	r0x07
001bf2   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
001bf4   f008
001bf6   0e05     movlw	0x5                	MOVLW	0x05
001bf8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	65; src/clock.c	time_set(t,h,m,s);
001bfa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfe   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c02   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c06   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c0a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c0e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c12   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c16   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1e   ec03     call	0x2006, 0           	CALL	_time_set
001c20   f010
001c22   0e09     movlw	0x9                	MOVLW	0x09
001c24   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	67; src/clock.c	T0CONbits.TMR0ON = 1;
001c26   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001c28   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c2a   f008
001c2c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c2e   f007
001c30   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c32   f006
001c34   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c36   f005
001c38   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c3a   f004
001c3c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001c3e   f003
001c40   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001c42   f002
001c44   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001c46   f001
001c48   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001c4a   f000
001c4c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c4e   ffd9
001c50   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	55; src/clock.c	void alarm_led(void){
002c6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c6c   ffe5
002c6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c70   ffd9
002c72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c74   ffe5
                                           ;	.line	56; src/clock.c	LED1_IO^=1;
002c76   6a00     clrf	0, 0                	CLRF	r0x00
002c78   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
002c7a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002c7c   0e01     movlw	0x1                	MOVLW	0x01
002c7e   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002c80   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c82   0b01     andlw	0x1                	ANDLW	0x01
002c84   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002c86   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002c88   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002c8a   0bfd     andlw	0xfd               	ANDLW	0xfd
002c8c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002c8e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	57; src/clock.c	LED2_IO^=1;
002c90   6a00     clrf	0, 0                	CLRF	r0x00
002c92   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
002c94   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002c96   0e01     movlw	0x1                	MOVLW	0x01
002c98   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002c9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c9c   0b01     andlw	0x1                	ANDLW	0x01
002c9e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002ca0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002ca2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002ca4   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002ca6   0bfb     andlw	0xfb               	ANDLW	0xfb
002ca8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002caa   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002cac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002cae   f000
002cb0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002cb2   ffd9
002cb4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	51; src/clock.c	void toggle_led(void){
002d60   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d62   ffe5
002d64   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d66   ffd9
002d68   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d6a   ffe5
                                           ;	.line	52; src/clock.c	LED0_IO^=1;
002d6c   6a00     clrf	0, 0                	CLRF	r0x00
002d6e   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
002d70   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002d72   0e01     movlw	0x1                	MOVLW	0x01
002d74   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002d76   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d78   0b01     andlw	0x1                	ANDLW	0x01
002d7a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002d7c   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002d7e   0bfe     andlw	0xfe               	ANDLW	0xfe
002d80   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002d82   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002d84   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d86   f000
002d88   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d8a   ffd9
002d8c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	46; src/clock.c	void update_display(void){
002846   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002848   ffe5
00284a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00284c   ffd9
00284e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002850   ffe5
002852   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002854   ffe5
002856   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002858   ffe5
                                           ;	.line	47; src/clock.c	time_print(_time, display_line);
00285a   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00285c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00285e   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002860   6e00     movwf	0, 0               	MOVWF	r0x00
002862   0e80     movlw	0x80               	MOVLW	0x80
002864   6e02     movwf	0x2, 0             	MOVWF	r0x02
002866   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00286a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00286c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00286e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002872   010f     movlb	0xf                	BANKSEL	(__time + 2)
002874   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
002876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002878   010f     movlb	0xf                	BANKSEL	(__time + 1)
00287a   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
00287c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00287e   010f     movlb	0xf                	BANKSEL	__time
002880   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
002882   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002884   ec86     call	0x170c, 0           	CALL	_time_print
002886   f00b
002888   0e06     movlw	0x6                	MOVLW	0x06
00288a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	48; src/clock.c	display_string(0, display_line);
00288c   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00288e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002890   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002892   6e00     movwf	0, 0               	MOVWF	r0x00
002894   0e80     movlw	0x80               	MOVLW	0x80
002896   6e02     movwf	0x2, 0             	MOVWF	r0x02
002898   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00289a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00289c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00289e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a4   0e00     movlw	0                  	MOVLW	0x00
0028a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a8   eca4     call	0x1948, 0           	CALL	_display_string
0028aa   f00c
0028ac   0e04     movlw	0x4                	MOVLW	0x04
0028ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028b2   f002
0028b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028b6   f001
0028b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028ba   f000
0028bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028be   ffd9
0028c0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0028c2   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
0028c4   5255     movf	0x55, 0x1, 0        
0028c6   3a53     swapf	0x53, 0x1, 0       
0028c8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0028ca   494d     infsnz	0x4d, 0, 0x1      	DB	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x3a, 0x00
0028cc   554e     subfwb	0x4e, 0, 0x1      
0028ce   4554     rlncf	0x54, 0, 0x1       
0028d0   3a53     swapf	0x53, 0x1, 0       
0028d2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0028d4   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x3a, 0x00
0028d6   4f43     dcfsnz	0x43, 0x1, 0x1    
0028d8   444e     rlncf	0x4e, 0, 0         
0028da   3a53     swapf	0x53, 0x1, 0       
0028dc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0028de   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
0028e0   6432     cpfsgt	0x32, 0           
0028e2   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1792 (0x0700) bytes ( 1.37%)
                                           ;           	  896 (0x0380) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
0026ec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026ee   ffe5
0026f0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026f2   ffd9
0026f4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026f6   ffe5
0026f8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026fa   ffe5
0026fc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0026fe   ffe5
002700   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002702   ffe5
002704   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002706   ffe5
002708   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00270a   ffe5
00270c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00270e   ffe5
002710   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002712   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002714   0e01     movlw	0x1                	MOVLW	0x01
002716   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002718   0e00     movlw	0                  	MOVLW	0x00
00271a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271c   ec04     call	0x2c08, 0           	CALL	_LCDWrite
00271e   f016
002720   0e02     movlw	0x2                	MOVLW	0x02
002722   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002724   0e48     movlw	0x48               	MOVLW	0x48
002726   6e00     movwf	0, 0               	MOVWF	r0x00
002728   0e0d     movlw	0xd                	MOVLW	0x0d
00272a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00272c   6a02     clrf	0x2, 0              	CLRF	r0x02
00272e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002730   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002732   f004
002734   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002736   f005
002738   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00273a   f006
00273c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00273e   f007
002740   0eff     movlw	0xff               	MOVLW	0xff
002742   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002744   0eff     movlw	0xff               	MOVLW	0xff
002746   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002748   0eff     movlw	0xff               	MOVLW	0xff
00274a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00274c   0eff     movlw	0xff               	MOVLW	0xff
00274e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002750   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002752   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002754   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002756   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002758   e1eb     bnz	0x2730               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
00275a   0e00     movlw	0                  	MOVLW	0x00
00275c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00275e   0e20     movlw	0x20               	MOVLW	0x20
002760   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002762   0e20     movlw	0x20               	MOVLW	0x20
002764   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002766   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002768   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00276a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00276c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00276e   ec73     call	0x20e6, 0           	CALL	_memset
002770   f010
002772   0e05     movlw	0x5                	MOVLW	0x05
002774   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002776   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002778   f007
00277a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00277c   f006
00277e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002780   f005
002782   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002784   f004
002786   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002788   f003
00278a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00278c   f002
00278e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002790   f001
002792   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002794   f000
002796   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002798   ffd9
00279a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000878   f016
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec04     call	0x2c08, 0           	CALL	_LCDWrite
00093a   f016
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000982   f016
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000a44   f016
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ec73     call	0x20e6, 0           	CALL	_memset
000aee   f010
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000bd6   f016
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000c1a   f016
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000c5e   f016
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ec04     call	0x2c08, 0           	CALL	_LCDWrite
000ca2   f016
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002c08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c0a   ffe5
002c0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c0e   ffd9
002c10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c12   ffe5
002c14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c16   ffe5
002c18   0e02     movlw	0x2                	MOVLW	0x02
002c1a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c1c   f000
002c1e   0e03     movlw	0x3                	MOVLW	0x03
002c20   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c22   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002c24   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002c26   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002c28   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002c2a   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002c2c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c2e   0b01     andlw	0x1                	ANDLW	0x01
002c30   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002c32   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002c34   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002c36   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002c38   0bfb     andlw	0xfb               	ANDLW	0xfb
002c3a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002c3c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002c3e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002c40   ff8d
002c42   0000     nop                      	nop 
002c44   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002c46   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002c48   0000     nop                      	nop 
002c4a   0000     nop                      	nop 
002c4c   0000     nop                      	nop 
002c4e   0000     nop                      	nop 
002c50   0000     nop                      	nop 
002c52   0000     nop                      	nop 
002c54   0000     nop                      	nop 
002c56   0000     nop                      	nop 
002c58   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002c5a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002c5c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c5e   f001
002c60   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c62   f000
002c64   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c66   ffd9
002c68   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
001046   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001048   ffe5
00104a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00104c   ffd9
00104e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001050   ffe5
001052   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001054   ffe5
001056   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001058   ffe5
00105a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00105c   ffe5
00105e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001060   ffe5
001062   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001064   ffe5
001066   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001068   ffe5
00106a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00106c   ffe5
00106e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001070   ffe5
001072   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001074   ffe5
001076   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001078   ffe5
00107a   0e02     movlw	0x2                	MOVLW	0x02
00107c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00107e   f000
001080   0e03     movlw	0x3                	MOVLW	0x03
001082   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001084   f001
001086   0e04     movlw	0x4                	MOVLW	0x04
001088   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00108a   f002
00108c   0e05     movlw	0x5                	MOVLW	0x05
00108e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001090   f003
001092   0e06     movlw	0x6                	MOVLW	0x06
001094   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001096   f004
001098   0e07     movlw	0x7                	MOVLW	0x07
00109a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00109c   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
00109e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010a0   0f04     addlw	0x4                	ADDLW	0x04
0010a2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010a4   0e00     movlw	0                  	MOVLW	0x00
0010a6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0010a8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0010aa   0e00     movlw	0                  	MOVLW	0x00
0010ac   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0010ae   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010b0   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0010b2   ffe9
0010b4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0010b6   fff3
0010b8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0010ba   ecde     call	0x2dbc, 0           	CALL	__gptrget2
0010bc   f016
0010be   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010c0   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0010c2   f007
0010c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010c6   0f04     addlw	0x4                	ADDLW	0x04
0010c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010ca   0e00     movlw	0                  	MOVLW	0x00
0010cc   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0010ce   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010d0   0e00     movlw	0                  	MOVLW	0x00
0010d2   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0010d4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0010d6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0010d8   ffe9
0010da   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0010dc   fff3
0010de   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010e0   ecde     call	0x2dbc, 0           	CALL	__gptrget2
0010e2   f016
0010e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010e6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0010e8   f009
0010ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010ec   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0010ee   e103     bnz	0x10f6               	BNZ	_00166_DS_
0010f0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0010f2   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0010f4   e003     bz	0x10fc                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
0010f6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0010f8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010fa   d04e     bra	0x1198               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
0010fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010fe   0f02     addlw	0x2                	ADDLW	0x02
001100   6e06     movwf	0x6, 0             	MOVWF	r0x06
001102   0e00     movlw	0                  	MOVLW	0x00
001104   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001106   6e07     movwf	0x7, 0             	MOVWF	r0x07
001108   0e00     movlw	0                  	MOVLW	0x00
00110a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00110c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00110e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001110   ffe9
001112   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001114   fff3
001116   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001118   ecde     call	0x2dbc, 0           	CALL	__gptrget2
00111a   f016
00111c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00111e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001120   f007
001122   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001124   0f02     addlw	0x2                	ADDLW	0x02
001126   6e08     movwf	0x8, 0             	MOVWF	r0x08
001128   0e00     movlw	0                  	MOVLW	0x00
00112a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00112c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00112e   0e00     movlw	0                  	MOVLW	0x00
001130   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001132   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001134   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001136   ffe9
001138   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00113a   fff3
00113c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00113e   ecde     call	0x2dbc, 0           	CALL	__gptrget2
001140   f016
001142   6e08     movwf	0x8, 0             	MOVWF	r0x08
001144   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001146   f009
001148   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00114a   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00114c   e103     bnz	0x1154               	BNZ	_00168_DS_
00114e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001150   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001152   e003     bz	0x115a                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
001154   6af3     clrf	0xf3, 0             	CLRF	PRODL
001156   6ae8     clrf	0xe8, 0             	CLRF	WREG
001158   d01f     bra	0x1198               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
00115a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00115c   ffe9
00115e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001160   fff3
001162   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001164   ecde     call	0x2dbc, 0           	CALL	__gptrget2
001166   f016
001168   6e00     movwf	0, 0               	MOVWF	r0x00
00116a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00116c   f001
00116e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001170   ffe9
001172   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001174   fff3
001176   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001178   ecde     call	0x2dbc, 0           	CALL	__gptrget2
00117a   f016
00117c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00117e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001180   f004
001182   5000     movf	0, 0, 0             	MOVF	r0x00, W
001184   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
001186   e103     bnz	0x118e               	BNZ	_00170_DS_
001188   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00118a   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
00118c   e003     bz	0x1194                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
00118e   6af3     clrf	0xf3, 0             	CLRF	PRODL
001190   6ae8     clrf	0xe8, 0             	CLRF	WREG
001192   d002     bra	0x1198               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
001194   6af3     clrf	0xf3, 0             	CLRF	PRODL
001196   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
001198   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00119a   f00a
00119c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00119e   f009
0011a0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0011a2   f008
0011a4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0011a6   f007
0011a8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0011aa   f006
0011ac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0011ae   f005
0011b0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0011b2   f004
0011b4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0011b6   f003
0011b8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0011ba   f002
0011bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011be   f001
0011c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011c2   f000
0011c4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011c6   ffd9
0011c8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
00170c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00170e   ffe5
001710   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001712   ffd9
001714   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001716   ffe5
001718   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00171a   ffe5
00171c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00171e   ffe5
001720   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001722   ffe5
001724   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001726   ffe5
001728   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00172a   ffe5
00172c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00172e   ffe5
001730   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001732   ffe5
001734   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001736   ffe5
001738   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00173a   ffe5
00173c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00173e   ffe5
001740   0e02     movlw	0x2                	MOVLW	0x02
001742   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001744   f000
001746   0e03     movlw	0x3                	MOVLW	0x03
001748   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00174a   f001
00174c   0e04     movlw	0x4                	MOVLW	0x04
00174e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001750   f002
001752   0e05     movlw	0x5                	MOVLW	0x05
001754   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001756   f003
001758   0e06     movlw	0x6                	MOVLW	0x06
00175a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00175c   f004
00175e   0e07     movlw	0x7                	MOVLW	0x07
001760   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001762   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001764   5000     movf	0, 0, 0             	MOVF	r0x00, W
001766   0f04     addlw	0x4                	ADDLW	0x04
001768   6e06     movwf	0x6, 0             	MOVWF	r0x06
00176a   0e00     movlw	0                  	MOVLW	0x00
00176c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00176e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001770   0e00     movlw	0                  	MOVLW	0x00
001772   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001774   6e08     movwf	0x8, 0             	MOVWF	r0x08
001776   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001778   ffe9
00177a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00177c   fff3
00177e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001780   ecde     call	0x2dbc, 0           	CALL	__gptrget2
001782   f016
001784   6e06     movwf	0x6, 0             	MOVWF	r0x06
001786   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001788   f007
00178a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00178c   0f02     addlw	0x2                	ADDLW	0x02
00178e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001790   0e00     movlw	0                  	MOVLW	0x00
001792   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001794   6e09     movwf	0x9, 0             	MOVWF	r0x09
001796   0e00     movlw	0                  	MOVLW	0x00
001798   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00179a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00179c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00179e   ffe9
0017a0   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0017a2   fff3
0017a4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0017a6   ecde     call	0x2dbc, 0           	CALL	__gptrget2
0017a8   f016
0017aa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0017ac   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0017ae   f009
0017b0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0017b2   ffe9
0017b4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0017b6   fff3
0017b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017ba   ecde     call	0x2dbc, 0           	CALL	__gptrget2
0017bc   f016
0017be   6e00     movwf	0, 0               	MOVWF	r0x00
0017c0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0017c2   f001
0017c4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0017c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0017ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017cc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0017ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017d0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0017d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017dc   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0017de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e0   0e2a     movlw	0x2a               	MOVLW	HIGH(__str_0)
0017e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e4   0e80     movlw	0x80               	MOVLW	LOW(__str_0)
0017e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0017ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0017ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f4   ec1c     call	0x1e38, 0           	CALL	_sprintf
0017f6   f00f
0017f8   0e0c     movlw	0xc                	MOVLW	0x0c
0017fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017fc   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0017fe   f00a
001800   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001802   f009
001804   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001806   f008
001808   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00180a   f007
00180c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00180e   f006
001810   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001812   f005
001814   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001816   f004
001818   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00181a   f003
00181c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00181e   f002
001820   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001822   f001
001824   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001826   f000
001828   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00182a   ffd9
00182c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002b10   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b12   ffe5
002b14   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b16   ffd9
002b18   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1a   ffe5
002b1c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b1e   ffe5
002b20   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b22   ffe5
002b24   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b26   ffe5
002b28   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b2a   ffe5
002b2c   0e02     movlw	0x2                	MOVLW	0x02
002b2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b30   f000
002b32   0e03     movlw	0x3                	MOVLW	0x03
002b34   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b36   f001
002b38   0e04     movlw	0x4                	MOVLW	0x04
002b3a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002b3c   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002b3e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002b40   ffe9
002b42   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002b44   fff3
002b46   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b48   ecde     call	0x2dbc, 0           	CALL	__gptrget2
002b4a   f016
002b4c   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b4e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002b50   f004
002b52   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002b54   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002b56   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002b58   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b5c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002b66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b68   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b6c   ec04     call	0x2408, 0           	CALL	_set_hours
002b6e   f012
002b70   0e05     movlw	0x5                	MOVLW	0x05
002b72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002b74   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002b76   f004
002b78   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b7a   f003
002b7c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b7e   f002
002b80   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b82   f001
002b84   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b86   f000
002b88   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b8a   ffd9
002b8c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
0024c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0024c6   ffe5
0024c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0024ca   ffd9
0024cc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024ce   ffe5
0024d0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024d2   ffe5
0024d4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024d6   ffe5
0024d8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024da   ffe5
0024dc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024de   ffe5
0024e0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024e2   ffe5
0024e4   0e02     movlw	0x2                	MOVLW	0x02
0024e6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024e8   f000
0024ea   0e03     movlw	0x3                	MOVLW	0x03
0024ec   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024ee   f001
0024f0   0e04     movlw	0x4                	MOVLW	0x04
0024f2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024f4   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
0024f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024f8   0f02     addlw	0x2                	ADDLW	0x02
0024fa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0024fc   0e00     movlw	0                  	MOVLW	0x00
0024fe   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002500   6e04     movwf	0x4, 0             	MOVWF	r0x04
002502   0e00     movlw	0                  	MOVLW	0x00
002504   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002506   6e05     movwf	0x5, 0             	MOVWF	r0x05
002508   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00250a   ffe9
00250c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00250e   fff3
002510   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002512   ecde     call	0x2dbc, 0           	CALL	__gptrget2
002514   f016
002516   6e03     movwf	0x3, 0             	MOVWF	r0x03
002518   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00251a   f004
00251c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00251e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002520   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002522   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002524   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002526   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002528   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00252a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00252c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00252e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002530   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002532   5000     movf	0, 0, 0             	MOVF	r0x00, W
002534   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002536   ec3c     call	0x2278, 0           	CALL	_set_minutes
002538   f011
00253a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00253c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00253e   f004
002540   0e05     movlw	0x5                	MOVLW	0x05
002542   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002544   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002546   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002548   e00a     bz	0x255e                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
00254a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00254c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00254e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002552   5000     movf	0, 0, 0             	MOVF	r0x00, W
002554   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002556   ec88     call	0x2b10, 0           	CALL	_add_hour
002558   f015
00255a   0e03     movlw	0x3                	MOVLW	0x03
00255c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
00255e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002560   f005
002562   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002564   f004
002566   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002568   f003
00256a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00256c   f002
00256e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002570   f001
002572   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002574   f000
002576   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002578   ffd9
00257a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
00257c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00257e   ffe5
002580   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002582   ffd9
002584   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002586   ffe5
002588   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00258a   ffe5
00258c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00258e   ffe5
002590   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002592   ffe5
002594   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002596   ffe5
002598   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00259a   ffe5
00259c   0e02     movlw	0x2                	MOVLW	0x02
00259e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025a0   f000
0025a2   0e03     movlw	0x3                	MOVLW	0x03
0025a4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025a6   f001
0025a8   0e04     movlw	0x4                	MOVLW	0x04
0025aa   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0025ac   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
0025ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025b0   0f04     addlw	0x4                	ADDLW	0x04
0025b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025b4   0e00     movlw	0                  	MOVLW	0x00
0025b6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0025b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0025ba   0e00     movlw	0                  	MOVLW	0x00
0025bc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0025be   6e05     movwf	0x5, 0             	MOVWF	r0x05
0025c0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0025c2   ffe9
0025c4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0025c6   fff3
0025c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0025ca   ecde     call	0x2dbc, 0           	CALL	__gptrget2
0025cc   f016
0025ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025d0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025d2   f004
0025d4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0025d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0025d8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0025da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ee   ecd8     call	0x21b0, 0           	CALL	_set_seconds
0025f0   f010
0025f2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025f4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025f6   f004
0025f8   0e05     movlw	0x5                	MOVLW	0x05
0025fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025fe   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002600   e00a     bz	0x2616                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002602   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002606   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00260c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260e   ec62     call	0x24c4, 0           	CALL	_add_minute
002610   f012
002612   0e03     movlw	0x3                	MOVLW	0x03
002614   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002616   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002618   f005
00261a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00261c   f004
00261e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002620   f003
002622   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002624   f002
002626   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002628   f001
00262a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00262c   f000
00262e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002630   ffd9
002632   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
0021b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0021b2   ffe5
0021b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0021b6   ffd9
0021b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0021ba   ffe5
0021bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0021be   ffe5
0021c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0021c2   ffe5
0021c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0021c6   ffe5
0021c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0021ca   ffe5
0021cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0021ce   ffe5
0021d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0021d2   ffe5
0021d4   0e02     movlw	0x2                	MOVLW	0x02
0021d6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0021d8   f000
0021da   0e03     movlw	0x3                	MOVLW	0x03
0021dc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0021de   f001
0021e0   0e04     movlw	0x4                	MOVLW	0x04
0021e2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0021e4   f002
0021e6   0e05     movlw	0x5                	MOVLW	0x05
0021e8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0021ea   f003
0021ec   0e06     movlw	0x6                	MOVLW	0x06
0021ee   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0021f0   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
0021f2   0e00     movlw	0                  	MOVLW	0x00
0021f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021f6   0e3c     movlw	0x3c               	MOVLW	0x3c
0021f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002200   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002202   ec29     call	0x1c52, 0           	CALL	__divsint
002204   f00e
002206   6e05     movwf	0x5, 0             	MOVWF	r0x05
002208   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00220a   f006
00220c   0e04     movlw	0x4                	MOVLW	0x04
00220e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
002210   0e04     movlw	0x4                	MOVLW	0x04
002212   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002214   0e00     movlw	0                  	MOVLW	0x00
002216   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002218   0e00     movlw	0                  	MOVLW	0x00
00221a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00221c   0e00     movlw	0                  	MOVLW	0x00
00221e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002220   0e3c     movlw	0x3c               	MOVLW	0x3c
002222   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002224   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002228   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00222a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00222c   ec91     call	0x1f22, 0           	CALL	__modsint
00222e   f00f
002230   6e03     movwf	0x3, 0             	MOVWF	r0x03
002232   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002234   f004
002236   0e04     movlw	0x4                	MOVLW	0x04
002238   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00223a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00223c   ffe5
00223e   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002240   fff4
002242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002244   ffe9
002246   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002248   fff3
00224a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00224c   ec1f     call	0x2e3e, 0           	CALL	__gptrput2
00224e   f017
                                           ;	.line	42; src/newtime.c	return overflow;
002250   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002252   fff3
002254   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002256   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002258   f006
00225a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00225c   f005
00225e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002260   f004
002262   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002264   f003
002266   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002268   f002
00226a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00226c   f001
00226e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002270   f000
002272   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002274   ffd9
002276   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
002278   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00227a   ffe5
00227c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00227e   ffd9
002280   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002282   ffe5
002284   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002286   ffe5
002288   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00228a   ffe5
00228c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00228e   ffe5
002290   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002292   ffe5
002294   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002296   ffe5
002298   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00229a   ffe5
00229c   0e02     movlw	0x2                	MOVLW	0x02
00229e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0022a0   f000
0022a2   0e03     movlw	0x3                	MOVLW	0x03
0022a4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0022a6   f001
0022a8   0e04     movlw	0x4                	MOVLW	0x04
0022aa   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0022ac   f002
0022ae   0e05     movlw	0x5                	MOVLW	0x05
0022b0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0022b2   f003
0022b4   0e06     movlw	0x6                	MOVLW	0x06
0022b6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0022b8   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
0022ba   0e00     movlw	0                  	MOVLW	0x00
0022bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022be   0e3c     movlw	0x3c               	MOVLW	0x3c
0022c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022c2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ca   ec29     call	0x1c52, 0           	CALL	__divsint
0022cc   f00e
0022ce   6e05     movwf	0x5, 0             	MOVWF	r0x05
0022d0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0022d2   f006
0022d4   0e04     movlw	0x4                	MOVLW	0x04
0022d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
0022d8   0e02     movlw	0x2                	MOVLW	0x02
0022da   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0022dc   0e00     movlw	0                  	MOVLW	0x00
0022de   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022e0   0e00     movlw	0                  	MOVLW	0x00
0022e2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022e4   0e00     movlw	0                  	MOVLW	0x00
0022e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022e8   0e3c     movlw	0x3c               	MOVLW	0x3c
0022ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f4   ec91     call	0x1f22, 0           	CALL	__modsint
0022f6   f00f
0022f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022fa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0022fc   f004
0022fe   0e04     movlw	0x4                	MOVLW	0x04
002300   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002302   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002304   ffe5
002306   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002308   fff4
00230a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00230c   ffe9
00230e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002310   fff3
002312   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002314   ec1f     call	0x2e3e, 0           	CALL	__gptrput2
002316   f017
                                           ;	.line	36; src/newtime.c	return overflow;
002318   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00231a   fff3
00231c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00231e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002320   f006
002322   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002324   f005
002326   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002328   f004
00232a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00232c   f003
00232e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002330   f002
002332   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002334   f001
002336   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002338   f000
00233a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00233c   ffd9
00233e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002408   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00240a   ffe5
00240c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00240e   ffd9
002410   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002412   ffe5
002414   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002416   ffe5
002418   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00241a   ffe5
00241c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00241e   ffe5
002420   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002422   ffe5
002424   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002426   ffe5
002428   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00242a   ffe5
00242c   0e02     movlw	0x2                	MOVLW	0x02
00242e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002430   f000
002432   0e03     movlw	0x3                	MOVLW	0x03
002434   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002436   f001
002438   0e04     movlw	0x4                	MOVLW	0x04
00243a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00243c   f002
00243e   0e05     movlw	0x5                	MOVLW	0x05
002440   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002442   f003
002444   0e06     movlw	0x6                	MOVLW	0x06
002446   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002448   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
00244a   0e00     movlw	0                  	MOVLW	0x00
00244c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00244e   0e18     movlw	0x18               	MOVLW	0x18
002450   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002452   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002456   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00245a   ec29     call	0x1c52, 0           	CALL	__divsint
00245c   f00e
00245e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002460   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002462   f006
002464   0e04     movlw	0x4                	MOVLW	0x04
002466   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
002468   0e00     movlw	0                  	MOVLW	0x00
00246a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00246c   0e18     movlw	0x18               	MOVLW	0x18
00246e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002470   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002472   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002474   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002476   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002478   ec91     call	0x1f22, 0           	CALL	__modsint
00247a   f00f
00247c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00247e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002480   f004
002482   0e04     movlw	0x4                	MOVLW	0x04
002484   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002486   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002488   ffe5
00248a   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00248c   fff4
00248e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002490   ffe9
002492   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002494   fff3
002496   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002498   ec1f     call	0x2e3e, 0           	CALL	__gptrput2
00249a   f017
                                           ;	.line	30; src/newtime.c	return overflow;
00249c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00249e   fff3
0024a0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024a2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0024a4   f006
0024a6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0024a8   f005
0024aa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0024ac   f004
0024ae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024b0   f003
0024b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0024b4   f002
0024b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0024b8   f001
0024ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0024bc   f000
0024be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024c0   ffd9
0024c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002006   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002008   ffe5
00200a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00200c   ffd9
00200e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002010   ffe5
002012   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002014   ffe5
002016   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002018   ffe5
00201a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00201c   ffe5
00201e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002020   ffe5
002022   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002024   ffe5
002026   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002028   ffe5
00202a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00202c   ffe5
00202e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002030   ffe5
002032   0e02     movlw	0x2                	MOVLW	0x02
002034   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002036   f000
002038   0e03     movlw	0x3                	MOVLW	0x03
00203a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00203c   f001
00203e   0e04     movlw	0x4                	MOVLW	0x04
002040   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002042   f002
002044   0e05     movlw	0x5                	MOVLW	0x05
002046   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002048   f003
00204a   0e06     movlw	0x6                	MOVLW	0x06
00204c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00204e   f004
002050   0e07     movlw	0x7                	MOVLW	0x07
002052   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002054   f005
002056   0e08     movlw	0x8                	MOVLW	0x08
002058   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00205a   f006
00205c   0e09     movlw	0x9                	MOVLW	0x09
00205e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002060   f007
002062   0e0a     movlw	0xa                	MOVLW	0x0a
002064   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
002066   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
002068   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00206a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00206c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00206e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002070   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002072   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002074   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002076   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002078   5000     movf	0, 0, 0             	MOVF	r0x00, W
00207a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00207c   ec04     call	0x2408, 0           	CALL	_set_hours
00207e   f012
002080   0e05     movlw	0x5                	MOVLW	0x05
002082   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002084   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002088   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00208a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00208c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00208e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002090   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002092   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002094   5000     movf	0, 0, 0             	MOVF	r0x00, W
002096   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002098   ec3c     call	0x2278, 0           	CALL	_set_minutes
00209a   f011
00209c   0e05     movlw	0x5                	MOVLW	0x05
00209e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
0020a0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0020a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0020a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0020ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0020b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020b4   ecd8     call	0x21b0, 0           	CALL	_set_seconds
0020b6   f010
0020b8   0e05     movlw	0x5                	MOVLW	0x05
0020ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0020bc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0020be   f008
0020c0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0020c2   f007
0020c4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0020c6   f006
0020c8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0020ca   f005
0020cc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0020ce   f004
0020d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0020d2   f003
0020d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0020d6   f002
0020d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0020da   f001
0020dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0020de   f000
0020e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0020e2   ffd9
0020e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002a08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a0a   ffe5
002a0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a0e   ffd9
002a10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a12   ffe5
002a14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a16   ffe5
002a18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a1a   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002a1c   0e06     movlw	0x6                	MOVLW	0x06
002a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a20   ec60     call	0xec0, 0            	CALL	_malloc
002a22   f007
002a24   6e00     movwf	0, 0               	MOVWF	r0x00
002a26   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002a28   f001
002a2a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002a2c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a2e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a30   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a32   6e00     movwf	0, 0               	MOVWF	r0x00
002a34   0e80     movlw	0x80               	MOVLW	0x80
002a36   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002a38   0e00     movlw	0                  	MOVLW	0x00
002a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a3c   0e00     movlw	0                  	MOVLW	0x00
002a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a40   0e00     movlw	0                  	MOVLW	0x00
002a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a44   0e00     movlw	0                  	MOVLW	0x00
002a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a48   0e00     movlw	0                  	MOVLW	0x00
002a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4c   0e00     movlw	0                  	MOVLW	0x00
002a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a50   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a54   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a58   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5c   ec03     call	0x2006, 0           	CALL	_time_set
002a5e   f010
002a60   0e09     movlw	0x9                	MOVLW	0x09
002a62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002a64   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002a66   fff4
002a68   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002a6a   fff3
002a6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a6e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a70   f002
002a72   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a74   f001
002a76   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a78   f000
002a7a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a7c   ffd9
002a7e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002a80   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002a82   6432     cpfsgt	0x32, 0           
002a84   253a     addwf	0x3a, 0, 0x1       
002a86   3230     rrcf	0x30, 0x1, 0        
002a88   3a64     swapf	0x64, 0x1, 0       
002a8a   3025     rrcf	0x25, 0, 0          
002a8c   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002a8e   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
