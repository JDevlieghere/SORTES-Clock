gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-18-2013  14:33:55
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 14:33:54 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init
                                           	global _init_config
                                           	global _init_time
                                           	global _display_string
                                           	global _display_config_mode
                                           	global _update_display
                                           	global _toggle_second_led
                                           	global _toggle_alarm_led
                                           	global _get_input
                                           	global _read_and_clear
                                           	global _to_double_digits
                                           	global __time
                                           	global __alarm
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_called
                                           	global _config_mode_on
                                           	global _time_update_needed
                                           	global _main
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _init_config_choice_string_1_1	db	LOW(__str_0), HIGH(__str_0), UPPER(__str_0)
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           _time_update_needed	res	2
                                           
                                           udata_clock_1	udata
                                           _config_called	res	2
                                           
                                           udata_clock_2	udata
                                           __time	res	3
                                           
                                           udata_clock_3	udata
                                           __alarm	res	3
                                           
                                           udata_clock_4	udata
                                           _alarm_going_off	res	2
                                           
                                           udata_clock_5	udata
                                           _alarm_counter	res	2
                                           
                                           udata_clock_6	udata
                                           _overflow_counter	res	2
                                           
                                           udata_clock_7	udata
                                           _but1_pressed	res	2
                                           
                                           udata_clock_8	udata
                                           _but2_pressed	res	2
                                           
                                           udata_clock_9	udata
                                           _config_mode_on	res	2
                                           
                                           udata_clock_10	udata
                                           _update_display_display_line_1_1	res	32
                                           
                                           udata_clock_11	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef96     goto	0x132c              	GOTO	_highPriorityInterruptHandler
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	98; src/clock.c	init();
0031f8   ec7c     call	0x1ef8, 0           	CALL	_init
0031fa   f00f
                                           ;	.line	100; src/clock.c	init_config();
0031fc   ec21     call	0x842, 0            	CALL	_init_config
0031fe   f004
                                           ;	.line	102; src/clock.c	update_display();
003200   ec13     call	0x3026, 0           	CALL	_update_display
003202   f018
                                           _00110_DS_:
003204   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	104; src/clock.c	if(time_update_needed){
003206   515e     movf	0x5e, 0, 0x1        	MOVF	_time_update_needed, W, B
003208   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
00320a   115f     iorwf	0x5f, 0, 0x1       	IORWF	(_time_update_needed + 1), W, B
00320c   e006     bz	0x321a                	BZ	_00106_DS_
00320e   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	105; src/clock.c	time_update_needed = 0;
003210   6b5e     clrf	0x5e, 0x1           	CLRF	_time_update_needed, B
003212   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
003214   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
                                           ;	.line	106; src/clock.c	update_display();
003216   ec13     call	0x3026, 0           	CALL	_update_display
003218   f018
                                           _00106_DS_:
00321a   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	108; src/clock.c	if(config_called){
00321c   5140     movf	0x40, 0, 0x1        	MOVF	_config_called, W, B
00321e   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
003220   1141     iorwf	0x41, 0, 0x1       	IORWF	(_config_called + 1), W, B
003222   e0f0     bz	0x3204                	BZ	_00110_DS_
003224   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	109; src/clock.c	config_called =0;
003226   6b40     clrf	0x40, 0x1           	CLRF	_config_called, B
003228   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
00322a   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
                                           ;	.line	110; src/clock.c	init_config();
00322c   ec21     call	0x842, 0            	CALL	_init_config
00322e   f004
003230   d7e9     bra	0x3204               	BRA	_00110_DS_
003232   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	353; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
00132c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00132e   ffe5
001330   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001332   ffe5
001334   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001336   ffe5
001338   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00133a   ffe5
00133c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00133e   ffe5
001340   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001342   ffe5
001344   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001346   ffe5
001348   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00134a   ffe5
00134c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00134e   ffe5
001350   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001352   ffe5
001354   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001356   ffd9
001358   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00135a   ffe5
00135c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00135e   ffe5
                                           ;	.line	355; src/clock.c	if(INTCON3bits.INT1F == 1){
001360   6a00     clrf	0, 0                	CLRF	r0x00
001362   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
001364   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001366   5000     movf	0, 0, 0             	MOVF	r0x00, W
001368   0a01     xorlw	0x1                	XORLW	0x01
00136a   e114     bnz	0x1394               	BNZ	_00236_DS_
                                           _00269_DS_:
00136c   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	356; src/clock.c	if(!config_mode_on){
00136e   514c     movf	0x4c, 0, 0x1        	MOVF	_config_mode_on, W, B
001370   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
001372   114d     iorwf	0x4d, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001374   e106     bnz	0x1382               	BNZ	_00233_DS_
                                           ;	.line	357; src/clock.c	config_called =1;	
001376   0e01     movlw	0x1                	MOVLW	0x01
001378   010e     movlb	0xe                	BANKSEL	_config_called
00137a   6f40     movwf	0x40, 0x1          	MOVWF	_config_called, B
00137c   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
00137e   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
001380   d005     bra	0x138c               	BRA	_00234_DS_
                                           _00233_DS_:
                                           ;	.line	359; src/clock.c	but2_pressed = 1;	
001382   0e01     movlw	0x1                	MOVLW	0x01
001384   010e     movlb	0xe                	BANKSEL	_but2_pressed
001386   6f4a     movwf	0x4a, 0x1          	MOVWF	_but2_pressed, B
001388   010e     movlb	0xe                	BANKSEL	(_but2_pressed + 1)
00138a   6b4b     clrf	0x4b, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           _00234_DS_:
                                           ;	.line	361; src/clock.c	if(BUTTON0_IO);
00138c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00138e   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
001390   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	362; src/clock.c	INTCON3bits.INT1F = 0; 
001392   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00236_DS_:
                                           ;	.line	366; src/clock.c	if(INTCON3bits.INT3F  == 1){
001394   6a00     clrf	0, 0                	CLRF	r0x00
001396   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
001398   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00139a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00139c   0a01     xorlw	0x1                	XORLW	0x01
00139e   e109     bnz	0x13b2               	BNZ	_00238_DS_
                                           ;	.line	367; src/clock.c	but1_pressed = 1;	
0013a0   0e01     movlw	0x1                	MOVLW	0x01
0013a2   010e     movlb	0xe                	BANKSEL	_but1_pressed
0013a4   6f48     movwf	0x48, 0x1          	MOVWF	_but1_pressed, B
0013a6   010e     movlb	0xe                	BANKSEL	(_but1_pressed + 1)
0013a8   6b49     clrf	0x49, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	368; src/clock.c	if(BUTTON1_IO);
0013aa   6ae8     clrf	0xe8, 0             	CLRF	WREG
0013ac   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0013ae   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	369; src/clock.c	INTCON3bits.INT3F = 0; 
0013b0   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00238_DS_:
                                           ;	.line	373; src/clock.c	if(INTCONbits.TMR0IF == 1) {
0013b2   6a00     clrf	0, 0                	CLRF	r0x00
0013b4   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0013b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0013b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013ba   0a01     xorlw	0x1                	XORLW	0x01
0013bc   e001     bz	0x13c0                	BZ	_00273_DS_
0013be   d078     bra	0x14b0               	BRA	_00255_DS_
                                           _00273_DS_:
0013c0   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	374; src/clock.c	overflow_counter++;
0013c2   2b46     incf	0x46, 0x1, 0x1      	INCF	_overflow_counter, F, B
0013c4   e302     bnc	0x13ca               	BNC	_10232_DS_
0013c6   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
0013c8   2b47     incf	0x47, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10232_DS_:
0013ca   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	375; src/clock.c	if(overflow_counter == CYCLES/2){
0013cc   5146     movf	0x46, 0, 0x1        	MOVF	_overflow_counter, W, B
0013ce   0a2e     xorlw	0x2e               	XORLW	0x2e
0013d0   e103     bnz	0x13d8               	BNZ	_00274_DS_
0013d2   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
0013d4   5147     movf	0x47, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013d6   e001     bz	0x13da                	BZ	_00275_DS_
                                           _00274_DS_:
0013d8   d003     bra	0x13e0               	BRA	_00251_DS_
                                           _00275_DS_:
                                           ;	.line	376; src/clock.c	toggle_second_led();
0013da   ec35     call	0x326a, 0           	CALL	_toggle_second_led
0013dc   f019
0013de   d067     bra	0x14ae               	BRA	_00252_DS_
                                           _00251_DS_:
0013e0   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	377; src/clock.c	}else if(overflow_counter == CYCLES){
0013e2   5146     movf	0x46, 0, 0x1        	MOVF	_overflow_counter, W, B
0013e4   0a5d     xorlw	0x5d               	XORLW	0x5d
0013e6   e103     bnz	0x13ee               	BNZ	_00276_DS_
0013e8   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
0013ea   5147     movf	0x47, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013ec   e001     bz	0x13f0                	BZ	_00277_DS_
                                           _00276_DS_:
0013ee   d05f     bra	0x14ae               	BRA	_00252_DS_
                                           _00277_DS_:
0013f0   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	378; src/clock.c	if(time_equals(_alarm,_time)){
0013f2   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
0013f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f6   010f     movlb	0xf                	BANKSEL	(__time + 1)
0013f8   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
0013fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fc   010f     movlb	0xf                	BANKSEL	__time
0013fe   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
001400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001402   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001404   5157     movf	0x57, 0, 0x1        	MOVF	(__alarm + 2), W, B
001406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001408   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
00140a   5156     movf	0x56, 0, 0x1        	MOVF	(__alarm + 1), W, B
00140c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00140e   010f     movlb	0xf                	BANKSEL	__alarm
001410   5155     movf	0x55, 0, 0x1        	MOVF	__alarm, W, B
001412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001414   ec34     call	0x1668, 0           	CALL	_time_equals
001416   f00b
001418   6e00     movwf	0, 0               	MOVWF	r0x00
00141a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00141c   f001
00141e   0e06     movlw	0x6                	MOVLW	0x06
001420   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001422   5000     movf	0, 0, 0             	MOVF	r0x00, W
001424   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001426   e005     bz	0x1432                	BZ	_00240_DS_
                                           ;	.line	379; src/clock.c	alarm_going_off = 1;
001428   0e01     movlw	0x1                	MOVLW	0x01
00142a   010e     movlb	0xe                	BANKSEL	_alarm_going_off
00142c   6f42     movwf	0x42, 0x1          	MOVWF	_alarm_going_off, B
00142e   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
001430   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00240_DS_:
001432   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	381; src/clock.c	if(alarm_going_off){
001434   5142     movf	0x42, 0, 0x1        	MOVF	_alarm_going_off, W, B
001436   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
001438   1143     iorwf	0x43, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
00143a   e017     bz	0x146a                	BZ	_00244_DS_
00143c   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	382; src/clock.c	alarm_counter++;
00143e   2b44     incf	0x44, 0x1, 0x1      	INCF	_alarm_counter, F, B
001440   e302     bnc	0x1446               	BNC	_20233_DS_
001442   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001444   2b45     incf	0x45, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20233_DS_:
                                           ;	.line	383; src/clock.c	toggle_alarm_led();
001446   ecb6     call	0x316c, 0           	CALL	_toggle_alarm_led
001448   f018
00144a   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	384; src/clock.c	if(alarm_counter==30){
00144c   5144     movf	0x44, 0, 0x1        	MOVF	_alarm_counter, W, B
00144e   0a1e     xorlw	0x1e               	XORLW	0x1e
001450   e103     bnz	0x1458               	BNZ	_00278_DS_
001452   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001454   5145     movf	0x45, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001456   e001     bz	0x145a                	BZ	_00279_DS_
                                           _00278_DS_:
001458   d008     bra	0x146a               	BRA	_00244_DS_
                                           _00279_DS_:
00145a   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	385; src/clock.c	alarm_going_off =0;
00145c   6b42     clrf	0x42, 0x1           	CLRF	_alarm_going_off, B
00145e   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
001460   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
001462   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	386; src/clock.c	alarm_counter = 0;
001464   6b44     clrf	0x44, 0x1           	CLRF	_alarm_counter, B
001466   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001468   6b45     clrf	0x45, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00244_DS_:
00146a   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	389; src/clock.c	overflow_counter = 0;
00146c   6b46     clrf	0x46, 0x1           	CLRF	_overflow_counter, B
00146e   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
001470   6b47     clrf	0x47, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	390; src/clock.c	toggle_second_led();
001472   ec35     call	0x326a, 0           	CALL	_toggle_second_led
001474   f019
001476   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	391; src/clock.c	add_second(_time);
001478   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
00147a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00147c   010f     movlb	0xf                	BANKSEL	(__time + 1)
00147e   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
001480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001482   010f     movlb	0xf                	BANKSEL	__time
001484   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
001486   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001488   ec18     call	0x2a30, 0           	CALL	_add_second
00148a   f015
00148c   0e03     movlw	0x3                	MOVLW	0x03
00148e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001490   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	392; src/clock.c	if(!config_called && !config_mode_on){
001492   5140     movf	0x40, 0, 0x1        	MOVF	_config_called, W, B
001494   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
001496   1141     iorwf	0x41, 0, 0x1       	IORWF	(_config_called + 1), W, B
001498   e10a     bnz	0x14ae               	BNZ	_00252_DS_
00149a   010e     movlb	0xe                	BANKSEL	_config_mode_on
00149c   514c     movf	0x4c, 0, 0x1        	MOVF	_config_mode_on, W, B
00149e   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
0014a0   114d     iorwf	0x4d, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
0014a2   e105     bnz	0x14ae               	BNZ	_00252_DS_
                                           ;	.line	393; src/clock.c	time_update_needed = 1;
0014a4   0e01     movlw	0x1                	MOVLW	0x01
0014a6   010f     movlb	0xf                	BANKSEL	_time_update_needed
0014a8   6f5e     movwf	0x5e, 0x1          	MOVWF	_time_update_needed, B
0014aa   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
0014ac   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
                                           _00252_DS_:
                                           ;	.line	396; src/clock.c	INTCONbits.TMR0IF = 0;
0014ae   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00255_DS_:
0014b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0014b2   f001
0014b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014b6   f000
0014b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014ba   ffd9
0014bc   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0014be   fffb
0014c0   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0014c2   fffa
0014c4   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0014c6   ffea
0014c8   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0014ca   ffe9
0014cc   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0014ce   fff4
0014d0   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0014d2   fff3
0014d4   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0014d6   ffe0
0014d8   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0014da   ffd8
0014dc   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0014de   ffe8
0014e0   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	343; src/clock.c	char* to_double_digits(int value){
002d92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d94   ffe5
002d96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d98   ffd9
002d9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d9c   ffe5
002d9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002da0   ffe5
002da2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002da4   ffe5
002da6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002da8   ffe5
002daa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002dac   ffe5
002dae   0e02     movlw	0x2                	MOVLW	0x02
002db0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002db2   f000
002db4   0e03     movlw	0x3                	MOVLW	0x03
002db6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002db8   f001
                                           ;	.line	345; src/clock.c	sprintf(buffer, "%02d", value);
002dba   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002dbc   6e03     movwf	0x3, 0             	MOVWF	r0x03
002dbe   0e58     movlw	0x58               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002dc0   6e02     movwf	0x2, 0             	MOVWF	r0x02
002dc2   0e80     movlw	0x80               	MOVLW	0x80
002dc4   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dc6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002dc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dca   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dce   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
002dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd2   0e20     movlw	0x20               	MOVLW	HIGH(__str_9)
002dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd6   0e02     movlw	0x2                	MOVLW	LOW(__str_9)
002dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dda   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dde   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de6   ec76     call	0x22ec, 0           	CALL	_sprintf
002de8   f011
002dea   0e08     movlw	0x8                	MOVLW	0x08
002dec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	346; src/clock.c	return buffer;
002dee   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002df0   6e01     movwf	0x1, 0             	MOVWF	r0x01
002df2   0e58     movlw	0x58               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002df4   6e00     movwf	0, 0               	MOVWF	r0x00
002df6   0e80     movlw	0x80               	MOVLW	0x80
002df8   6e02     movwf	0x2, 0             	MOVWF	r0x02
002dfa   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002dfc   fff4
002dfe   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e00   fff3
002e02   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e04   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002e06   f004
002e08   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002e0a   f003
002e0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e0e   f002
002e10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e12   f001
002e14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e16   f000
002e18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e1a   ffd9
002e1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	332; src/clock.c	int read_and_clear(int *variable){
002ea6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002ea8   ffe5
002eaa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002eac   ffd9
002eae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002eb0   ffe5
002eb2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002eb4   ffe5
002eb6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002eb8   ffe5
002eba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002ebc   ffe5
002ebe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002ec0   ffe5
002ec2   0e02     movlw	0x2                	MOVLW	0x02
002ec4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002ec6   f000
002ec8   0e03     movlw	0x3                	MOVLW	0x03
002eca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002ecc   f001
002ece   0e04     movlw	0x4                	MOVLW	0x04
002ed0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002ed2   f002
                                           ;	.line	333; src/clock.c	if(*variable){
002ed4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ed6   ffe9
002ed8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002eda   fff3
002edc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ede   ec63     call	0x32c6, 0           	CALL	__gptrget2
002ee0   f019
002ee2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ee4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ee6   f004
002ee8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002eea   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002eec   e00e     bz	0x2f0a                	BZ	_00221_DS_
                                           ;	.line	334; src/clock.c	*variable = 0;
002eee   0e00     movlw	0                  	MOVLW	0x00
002ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ef2   0e00     movlw	0                  	MOVLW	0x00
002ef4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002ef6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ef8   ffe9
002efa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002efc   fff3
002efe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f00   eca4     call	0x3348, 0           	CALL	__gptrput2
002f02   f019
                                           ;	.line	335; src/clock.c	return 1;
002f04   6af3     clrf	0xf3, 0             	CLRF	PRODL
002f06   0e01     movlw	0x1                	MOVLW	0x01
002f08   d002     bra	0x2f0e               	BRA	_00222_DS_
                                           _00221_DS_:
                                           ;	.line	337; src/clock.c	return 0;
002f0a   6af3     clrf	0xf3, 0             	CLRF	PRODL
002f0c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00222_DS_:
002f0e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f10   f004
002f12   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f14   f003
002f16   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f18   f002
002f1a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002f1c   f001
002f1e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002f20   f000
002f22   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002f24   ffd9
002f26   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	308; src/clock.c	int get_input(int maxvalue, char *text, char *mode){
000f7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f80   ffe5
000f82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f84   ffd9
000f86   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f88   ffe5
000f8a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f8c   ffe5
000f8e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f90   ffe5
000f92   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f94   ffe5
000f96   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f98   ffe5
000f9a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f9c   ffe5
000f9e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000fa0   ffe5
000fa2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000fa4   ffe5
000fa6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000fa8   ffe5
000faa   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000fac   ffe5
000fae   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000fb0   ffe5
000fb2   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000fb4   ffe5
000fb6   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000fb8   ffe5
000fba   0e02     movlw	0x2                	MOVLW	0x02
000fbc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fbe   f000
000fc0   0e03     movlw	0x3                	MOVLW	0x03
000fc2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000fc4   f001
000fc6   0e04     movlw	0x4                	MOVLW	0x04
000fc8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000fca   f002
000fcc   0e05     movlw	0x5                	MOVLW	0x05
000fce   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000fd0   f003
000fd2   0e06     movlw	0x6                	MOVLW	0x06
000fd4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000fd6   f004
000fd8   0e07     movlw	0x7                	MOVLW	0x07
000fda   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000fdc   f005
000fde   0e08     movlw	0x8                	MOVLW	0x08
000fe0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000fe2   f006
000fe4   0e09     movlw	0x9                	MOVLW	0x09
000fe6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000fe8   f007
                                           ;	.line	309; src/clock.c	BYTE length = strlen(text);
000fea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ff4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff6   ec94     call	0x2f28, 0           	CALL	_strlen
000ff8   f017
000ffa   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ffc   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000ffe   f009
001000   0e03     movlw	0x3                	MOVLW	0x03
001002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	310; src/clock.c	int value = 0;
001004   6a09     clrf	0x9, 0              	CLRF	r0x09
001006   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	311; src/clock.c	display_string(START_FIRST_LINE , mode);
001008   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00100a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   0e00     movlw	0                  	MOVLW	0x00
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   ecf4     call	0x1de8, 0           	CALL	_display_string
00101a   f00e
00101c   0e04     movlw	0x4                	MOVLW	0x04
00101e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	312; src/clock.c	display_string(START_SECOND_LINE, text);
001020   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001024   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00102a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102c   0e10     movlw	0x10               	MOVLW	0x10
00102e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001030   ecf4     call	0x1de8, 0           	CALL	_display_string
001032   f00e
001034   0e04     movlw	0x4                	MOVLW	0x04
001036   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	313; src/clock.c	while(1){
001038   0e11     movlw	0x11               	MOVLW	0x11
00103a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00103c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00213_DS_:
00103e   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	314; src/clock.c	if(config_mode_on){
001040   514c     movf	0x4c, 0, 0x1        	MOVF	_config_mode_on, W, B
001042   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
001044   114d     iorwf	0x4d, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001046   e0fb     bz	0x103e                	BZ	_00213_DS_
                                           ;	.line	315; src/clock.c	DelayMs(10);
001048   0e68     movlw	0x68               	MOVLW	0x68
00104a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00104c   0e42     movlw	0x42               	MOVLW	0x42
00104e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001050   6a05     clrf	0x5, 0              	CLRF	r0x05
001052   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00200_DS_:
001054   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001056   f007
001058   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00105a   f008
00105c   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
00105e   f00b
001060   c006     movff	0x6, 0xc           	MOVFF	r0x06, r0x0c
001062   f00c
001064   0eff     movlw	0xff               	MOVLW	0xff
001066   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001068   0eff     movlw	0xff               	MOVLW	0xff
00106a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00106c   0eff     movlw	0xff               	MOVLW	0xff
00106e   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001070   0eff     movlw	0xff               	MOVLW	0xff
001072   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001074   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001076   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001078   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
00107a   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
00107c   e1eb     bnz	0x1054               	BNZ	_00200_DS_
                                           ;	.line	316; src/clock.c	if(read_and_clear(&but2_pressed)){
00107e   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
001080   6e04     movwf	0x4, 0             	MOVWF	r0x04
001082   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
001084   6e03     movwf	0x3, 0             	MOVWF	r0x03
001086   0e80     movlw	0x80               	MOVLW	0x80
001088   6e05     movwf	0x5, 0             	MOVWF	r0x05
00108a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00108c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00108e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001092   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001096   ec53     call	0x2ea6, 0           	CALL	_read_and_clear
001098   f017
00109a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00109c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00109e   f004
0010a0   0e03     movlw	0x3                	MOVLW	0x03
0010a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010a6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010a8   e006     bz	0x10b6                	BZ	_00207_DS_
                                           ;	.line	317; src/clock.c	LCDErase();
0010aa   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
0010ac   f015
                                           ;	.line	318; src/clock.c	return value;
0010ae   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0010b0   fff3
0010b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010b4   d042     bra	0x113a               	BRA	_00215_DS_
                                           _00207_DS_:
                                           ;	.line	320; src/clock.c	if(read_and_clear(&but1_pressed)){ 
0010b6   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
0010b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010ba   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
0010bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010be   0e80     movlw	0x80               	MOVLW	0x80
0010c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0010c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ce   ec53     call	0x2ea6, 0           	CALL	_read_and_clear
0010d0   f017
0010d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010d4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0010d6   f004
0010d8   0e03     movlw	0x3                	MOVLW	0x03
0010da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010de   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010e0   e012     bz	0x1106                	BZ	_00209_DS_
                                           ;	.line	321; src/clock.c	value = (++value)%maxvalue;
0010e2   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0010e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010e6   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0010e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f8   eceb     call	0x23d6, 0           	CALL	__modsint
0010fa   f011
0010fc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010fe   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001100   f00a
001102   0e04     movlw	0x4                	MOVLW	0x04
001104   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00209_DS_:
                                           ;	.line	323; src/clock.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
001106   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00110c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110e   ecc9     call	0x2d92, 0           	CALL	_to_double_digits
001110   f016
001112   6e03     movwf	0x3, 0             	MOVWF	r0x03
001114   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001116   f004
001118   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
00111a   f005
00111c   0e02     movlw	0x2                	MOVLW	0x02
00111e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001120   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001124   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001128   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00112a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00112e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001130   ecf4     call	0x1de8, 0           	CALL	_display_string
001132   f00e
001134   0e04     movlw	0x4                	MOVLW	0x04
001136   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001138   d782     bra	0x103e               	BRA	_00213_DS_
                                           _00215_DS_:
00113a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00113c   f00c
00113e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001140   f00b
001142   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001144   f00a
001146   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001148   f009
00114a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00114c   f008
00114e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001150   f007
001152   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001154   f006
001156   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001158   f005
00115a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00115c   f004
00115e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001160   f003
001162   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001164   f002
001166   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001168   f001
00116a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00116c   f000
00116e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001170   ffd9
001172   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_alarm_led	code
                                           _toggle_alarm_led:
                                           ;	.line	300; src/clock.c	void toggle_alarm_led(void){
00316c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00316e   ffe5
003170   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003172   ffd9
003174   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003176   ffe5
                                           ;	.line	301; src/clock.c	LED1_IO^=1;
003178   6a00     clrf	0, 0                	CLRF	r0x00
00317a   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
00317c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00317e   0e01     movlw	0x1                	MOVLW	0x01
003180   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003182   5000     movf	0, 0, 0             	MOVF	r0x00, W
003184   0b01     andlw	0x1                	ANDLW	0x01
003186   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003188   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00318a   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
00318c   0bfd     andlw	0xfd               	ANDLW	0xfd
00318e   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003190   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	302; src/clock.c	LED2_IO^=1;
003192   6a00     clrf	0, 0                	CLRF	r0x00
003194   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
003196   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003198   0e01     movlw	0x1                	MOVLW	0x01
00319a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00319c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00319e   0b01     andlw	0x1                	ANDLW	0x01
0031a0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0031a2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0031a4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0031a6   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0031a8   0bfb     andlw	0xfb               	ANDLW	0xfb
0031aa   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0031ac   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0031ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0031b0   f000
0031b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0031b4   ffd9
0031b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_second_led	code
                                           _toggle_second_led:
                                           ;	.line	293; src/clock.c	void toggle_second_led(void){
00326a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00326c   ffe5
00326e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003270   ffd9
003272   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003274   ffe5
                                           ;	.line	294; src/clock.c	LED0_IO^=1;
003276   6a00     clrf	0, 0                	CLRF	r0x00
003278   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
00327a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00327c   0e01     movlw	0x1                	MOVLW	0x01
00327e   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003280   5000     movf	0, 0, 0             	MOVF	r0x00, W
003282   0b01     andlw	0x1                	ANDLW	0x01
003284   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003286   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003288   0bfe     andlw	0xfe               	ANDLW	0xfe
00328a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00328c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00328e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003290   f000
003292   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003294   ffd9
003296   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	284; src/clock.c	void update_display(void){
003026   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003028   ffe5
00302a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00302c   ffd9
00302e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003030   ffe5
003032   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003034   ffe5
003036   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003038   ffe5
                                           ;	.line	286; src/clock.c	time_print(_time, display_line);
00303a   0e0f     movlw	0xf                	MOVLW	HIGH(_update_display_display_line_1_1)
00303c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00303e   0e21     movlw	0x21               	MOVLW	LOW(_update_display_display_line_1_1)
003040   6e00     movwf	0, 0               	MOVWF	r0x00
003042   0e80     movlw	0x80               	MOVLW	0x80
003044   6e02     movwf	0x2, 0             	MOVWF	r0x02
003046   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003048   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00304a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00304c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00304e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003050   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003052   010f     movlb	0xf                	BANKSEL	(__time + 2)
003054   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
003056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003058   010f     movlb	0xf                	BANKSEL	(__time + 1)
00305a   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
00305c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00305e   010f     movlb	0xf                	BANKSEL	__time
003060   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
003062   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003064   ecd6     call	0x1bac, 0           	CALL	_time_print
003066   f00d
003068   0e06     movlw	0x6                	MOVLW	0x06
00306a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	287; src/clock.c	display_string(0, display_line);
00306c   0e0f     movlw	0xf                	MOVLW	HIGH(_update_display_display_line_1_1)
00306e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003070   0e21     movlw	0x21               	MOVLW	LOW(_update_display_display_line_1_1)
003072   6e00     movwf	0, 0               	MOVWF	r0x00
003074   0e80     movlw	0x80               	MOVLW	0x80
003076   6e02     movwf	0x2, 0             	MOVWF	r0x02
003078   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00307a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00307c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00307e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003080   5000     movf	0, 0, 0             	MOVF	r0x00, W
003082   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003084   0e00     movlw	0                  	MOVLW	0x00
003086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003088   ecf4     call	0x1de8, 0           	CALL	_display_string
00308a   f00e
00308c   0e04     movlw	0x4                	MOVLW	0x04
00308e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003090   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003092   f002
003094   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003096   f001
003098   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00309a   f000
00309c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00309e   ffd9
0030a0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_config_mode	code
                                           _display_config_mode:
                                           ;	.line	276; src/clock.c	void display_config_mode(char *choice_string){
0030a2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0030a4   ffe5
0030a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0030a8   ffd9
0030aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0030ac   ffe5
0030ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0030b0   ffe5
0030b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0030b4   ffe5
0030b6   0e02     movlw	0x2                	MOVLW	0x02
0030b8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0030ba   f000
0030bc   0e03     movlw	0x3                	MOVLW	0x03
0030be   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0030c0   f001
0030c2   0e04     movlw	0x4                	MOVLW	0x04
0030c4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0030c6   f002
                                           ;	.line	277; src/clock.c	display_string(START_FIRST_LINE, CM_STRING);
0030c8   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
0030ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030cc   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_8)
0030ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d0   0ef4     movlw	0xf4               	MOVLW	LOW(__str_8)
0030d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d4   0e00     movlw	0                  	MOVLW	0x00
0030d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d8   ecf4     call	0x1de8, 0           	CALL	_display_string
0030da   f00e
0030dc   0e04     movlw	0x4                	MOVLW	0x04
0030de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	278; src/clock.c	display_string(START_SECOND_LINE, choice_string);
0030e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0030e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0030e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0030ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030ec   0e10     movlw	0x10               	MOVLW	0x10
0030ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030f0   ecf4     call	0x1de8, 0           	CALL	_display_string
0030f2   f00e
0030f4   0e04     movlw	0x4                	MOVLW	0x04
0030f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0030f8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0030fa   f002
0030fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0030fe   f001
003100   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003102   f000
003104   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003106   ffd9
003108   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	262; src/clock.c	void display_string(BYTE pos, char* text){
001de8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001dea   ffe5
001dec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001dee   ffd9
001df0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001df2   ffe5
001df4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001df6   ffe5
001df8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001dfa   ffe5
001dfc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001dfe   ffe5
001e00   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001e02   ffe5
001e04   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001e06   ffe5
001e08   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001e0a   ffe5
001e0c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001e0e   ffe5
001e10   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e12   ffe5
001e14   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001e16   ffe5
001e18   0e02     movlw	0x2                	MOVLW	0x02
001e1a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001e1c   f000
001e1e   0e03     movlw	0x3                	MOVLW	0x03
001e20   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001e22   f001
001e24   0e04     movlw	0x4                	MOVLW	0x04
001e26   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001e28   f002
001e2a   0e05     movlw	0x5                	MOVLW	0x05
001e2c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001e2e   f003
                                           ;	.line	263; src/clock.c	BYTE        l = strlen(text);
001e30   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e34   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e38   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e3c   ec94     call	0x2f28, 0           	CALL	_strlen
001e3e   f017
001e40   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e42   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001e44   f005
001e46   0e03     movlw	0x3                	MOVLW	0x03
001e48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	264; src/clock.c	BYTE      max = 32-pos;    
001e4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e4c   0820     sublw	0x20               	SUBLW	0x20
001e4e   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	265; src/clock.c	char       *d = (char*)&LCDText[pos];
001e50   6a06     clrf	0x6, 0              	CLRF	r0x06
001e52   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e54   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e56   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e58   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001e5a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001e5c   6e06     movwf	0x6, 0             	MOVWF	r0x06
001e5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e60   6e00     movwf	0, 0               	MOVWF	r0x00
001e62   0e80     movlw	0x80               	MOVLW	0x80
001e64   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	267; src/clock.c	size_t      n = (l<max)?l:max;
001e66   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e68   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001e6a   e302     bnc	0x1e70               	BNC	_00170_DS_
001e6c   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001e6e   f004
                                           _00170_DS_:
001e70   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	268; src/clock.c	if (n != 0)
001e72   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e74   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001e76   e027     bz	0x1ec6                	BZ	_00166_DS_
                                           _00162_DS_:
                                           ;	.line	269; src/clock.c	while (n-- != 0)*d++ = *s++;
001e78   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001e7a   f008
001e7c   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001e7e   f009
001e80   0eff     movlw	0xff               	MOVLW	0xff
001e82   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001e84   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e86   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001e88   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001e8a   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001e8c   e01c     bz	0x1ec6                	BZ	_00166_DS_
001e8e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001e90   ffe9
001e92   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001e94   fff3
001e96   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e98   ec79     call	0x32f2, 0           	CALL	__gptrget1
001e9a   f019
001e9c   6e08     movwf	0x8, 0             	MOVWF	r0x08
001e9e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001ea0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ea2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001ea4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ea6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001ea8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001eaa   ffe5
001eac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001eae   ffe9
001eb0   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001eb2   fff3
001eb4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001eb6   ecb0     call	0x3360, 0           	CALL	__gptrput1
001eb8   f019
001eba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001ebc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ebe   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001ec0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ec2   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001ec4   d7d9     bra	0x1e78               	BRA	_00162_DS_
                                           _00166_DS_:
                                           ;	.line	270; src/clock.c	LCDUpdate();
001ec6   ec5c     call	0xab8, 0            	CALL	_LCDUpdate
001ec8   f005
001eca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ecc   f009
001ece   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ed0   f008
001ed2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ed4   f007
001ed6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ed8   f006
001eda   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001edc   f005
001ede   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ee0   f004
001ee2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ee4   f003
001ee6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ee8   f002
001eea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001eec   f001
001eee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ef0   f000
001ef2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ef4   ffd9
001ef6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	251; src/clock.c	void init_time(time t, char *mode){ 
001950   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001952   ffe5
001954   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001956   ffd9
001958   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00195a   ffe5
00195c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00195e   ffe5
001960   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001962   ffe5
001964   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001966   ffe5
001968   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00196a   ffe5
00196c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00196e   ffe5
001970   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001972   ffe5
001974   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001976   ffe5
001978   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00197a   ffe5
00197c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00197e   ffe5
001980   0e02     movlw	0x2                	MOVLW	0x02
001982   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001984   f000
001986   0e03     movlw	0x3                	MOVLW	0x03
001988   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00198a   f001
00198c   0e04     movlw	0x4                	MOVLW	0x04
00198e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001990   f002
001992   0e05     movlw	0x5                	MOVLW	0x05
001994   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001996   f003
001998   0e06     movlw	0x6                	MOVLW	0x06
00199a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00199c   f004
00199e   0e07     movlw	0x7                	MOVLW	0x07
0019a0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0019a2   f005
                                           ;	.line	253; src/clock.c	h = get_input(24, "Hours:", mode);
0019a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b0   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
0019b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b4   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_5)
0019b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b8   0ed8     movlw	0xd8               	MOVLW	LOW(__str_5)
0019ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019bc   0e00     movlw	0                  	MOVLW	0x00
0019be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c0   0e18     movlw	0x18               	MOVLW	0x18
0019c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c4   ecbf     call	0xf7e, 0            	CALL	_get_input
0019c6   f007
0019c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019ca   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0019cc   f007
0019ce   0e08     movlw	0x8                	MOVLW	0x08
0019d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	254; src/clock.c	m = get_input(60, "Minutes:", mode);
0019d2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019de   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
0019e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e2   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_6)
0019e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e6   0ee0     movlw	0xe0               	MOVLW	LOW(__str_6)
0019e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ea   0e00     movlw	0                  	MOVLW	0x00
0019ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ee   0e3c     movlw	0x3c               	MOVLW	0x3c
0019f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f2   ecbf     call	0xf7e, 0            	CALL	_get_input
0019f4   f007
0019f6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019f8   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0019fa   f009
0019fc   0e08     movlw	0x8                	MOVLW	0x08
0019fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	255; src/clock.c	s = get_input(60, "Seconds:", mode);
001a00   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a08   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a0c   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
001a0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a10   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_7)
001a12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a14   0eea     movlw	0xea               	MOVLW	LOW(__str_7)
001a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a18   0e00     movlw	0                  	MOVLW	0x00
001a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a1c   0e3c     movlw	0x3c               	MOVLW	0x3c
001a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a20   ecbf     call	0xf7e, 0            	CALL	_get_input
001a22   f007
001a24   6e03     movwf	0x3, 0             	MOVWF	r0x03
001a26   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001a28   f004
001a2a   0e08     movlw	0x8                	MOVLW	0x08
001a2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	256; src/clock.c	time_set(t,h,m,s);
001a2e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a32   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a36   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a3a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a42   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a46   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a4a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a52   ec5d     call	0x24ba, 0           	CALL	_time_set
001a54   f012
001a56   0e09     movlw	0x9                	MOVLW	0x09
001a58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001a5a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a5c   f009
001a5e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a60   f008
001a62   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a64   f007
001a66   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a68   f006
001a6a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a6c   f005
001a6e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a70   f004
001a72   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a74   f003
001a76   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a78   f002
001a7a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a7c   f001
001a7e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a80   f000
001a82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a84   ffd9
001a86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	192; src/clock.c	void init_config(void){
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
                                           ;	.line	194; src/clock.c	int choice = CONFIG_MODE_ALARM;
00085e   6a00     clrf	0, 0                	CLRF	r0x00
000860   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	196; src/clock.c	config_mode_on = 1;
000862   0e01     movlw	0x1                	MOVLW	0x01
000864   010e     movlb	0xe                	BANKSEL	_config_mode_on
000866   6f4c     movwf	0x4c, 0x1          	MOVWF	_config_mode_on, B
000868   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
00086a   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
00086c   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	197; src/clock.c	display_config_mode(choice_string);
00086e   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000874   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000878   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
00087a   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00087c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087e   ec51     call	0x30a2, 0           	CALL	_display_config_mode
000880   f018
000882   0e03     movlw	0x3                	MOVLW	0x03
000884   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00135_DS_:
                                           ;	.line	199; src/clock.c	if(read_and_clear(&but2_pressed)){
000886   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
000888   6e03     movwf	0x3, 0             	MOVWF	r0x03
00088a   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
00088c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00088e   0e80     movlw	0x80               	MOVLW	0x80
000890   6e04     movwf	0x4, 0             	MOVWF	r0x04
000892   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000896   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089e   ec53     call	0x2ea6, 0           	CALL	_read_and_clear
0008a0   f017
0008a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008a4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0008a6   f003
0008a8   0e03     movlw	0x3                	MOVLW	0x03
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008ae   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0008b0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0008b2   d058     bra	0x964                	BRA	_00127_DS_
                                           ;	.line	201; src/clock.c	switch(choice){
0008b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008b6   e102     bnz	0x8bc                	BNZ	_00147_DS_
0008b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008ba   e006     bz	0x8c8                 	BZ	_00122_DS_
                                           _00147_DS_:
0008bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008be   0a01     xorlw	0x1                	XORLW	0x01
0008c0   e102     bnz	0x8c6                	BNZ	_00149_DS_
0008c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008c4   e024     bz	0x90e                 	BZ	_00123_DS_
                                           _00149_DS_:
0008c6   d047     bra	0x956                	BRA	_00124_DS_
                                           _00122_DS_:
                                           ;	.line	203; src/clock.c	LCDErase();
0008c8   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
0008ca   f015
                                           ;	.line	204; src/clock.c	init_time(_alarm, SM_ALARM_STRING);			
0008cc   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
0008ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d0   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_1)
0008d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d4   0ea2     movlw	0xa2               	MOVLW	LOW(__str_1)
0008d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d8   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
0008da   5157     movf	0x57, 0, 0x1        	MOVF	(__alarm + 2), W, B
0008dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008de   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
0008e0   5156     movf	0x56, 0, 0x1        	MOVF	(__alarm + 1), W, B
0008e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e4   010f     movlb	0xf                	BANKSEL	__alarm
0008e6   5155     movf	0x55, 0, 0x1        	MOVF	__alarm, W, B
0008e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ea   eca8     call	0x1950, 0           	CALL	_init_time
0008ec   f00c
0008ee   0e06     movlw	0x6                	MOVLW	0x06
0008f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008f2   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	205; src/clock.c	display_config_mode(choice_string);
0008f4   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
0008f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f8   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
0008fa   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
0008fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fe   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000900   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000904   ec51     call	0x30a2, 0           	CALL	_display_config_mode
000906   f018
000908   0e03     movlw	0x3                	MOVLW	0x03
00090a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; src/clock.c	break;
00090c   d02b     bra	0x964                	BRA	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	208; src/clock.c	LCDErase();
00090e   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
000910   f015
                                           ;	.line	209; src/clock.c	init_time(_time, SM_CLOCK_STRING);
000912   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000914   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000916   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_2)
000918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091a   0eae     movlw	0xae               	MOVLW	LOW(__str_2)
00091c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091e   010f     movlb	0xf                	BANKSEL	(__time + 2)
000920   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
000922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000924   010f     movlb	0xf                	BANKSEL	(__time + 1)
000926   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   010f     movlb	0xf                	BANKSEL	__time
00092c   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   eca8     call	0x1950, 0           	CALL	_init_time
000932   f00c
000934   0e06     movlw	0x6                	MOVLW	0x06
000936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; src/clock.c	T0CONbits.TMR0ON = 1;			
000938   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
00093a   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	211; src/clock.c	display_config_mode(choice_string);
00093c   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
00093e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000940   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000942   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000946   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000948   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00094a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094c   ec51     call	0x30a2, 0           	CALL	_display_config_mode
00094e   f018
000950   0e03     movlw	0x3                	MOVLW	0x03
000952   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	212; src/clock.c	break;
000954   d007     bra	0x964                	BRA	_00127_DS_
                                           _00124_DS_:
                                           ;	.line	214; src/clock.c	LCDErase();
000956   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
000958   f015
00095a   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	215; src/clock.c	config_mode_on = 0;
00095c   6b4c     clrf	0x4c, 0x1           	CLRF	_config_mode_on, B
00095e   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
000960   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
                                           ;	.line	216; src/clock.c	return;
000962   d09d     bra	0xa9e                	BRA	_00137_DS_
                                           _00127_DS_:
                                           ;	.line	219; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000964   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
000966   6e03     movwf	0x3, 0             	MOVWF	r0x03
000968   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
00096a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00096c   0e80     movlw	0x80               	MOVLW	0x80
00096e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000970   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   ec53     call	0x2ea6, 0           	CALL	_read_and_clear
00097e   f017
000980   6e02     movwf	0x2, 0             	MOVWF	r0x02
000982   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000984   f003
000986   0e03     movlw	0x3                	MOVLW	0x03
000988   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00098a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00098c   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
00098e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000990   d77a     bra	0x886                	BRA	_00135_DS_
                                           ;	.line	221; src/clock.c	switch(choice){
000992   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000994   0f80     addlw	0x80               	ADDLW	0x80
000996   0f81     addlw	0x81               	ADDLW	0x81
000998   e102     bnz	0x99e                	BNZ	_00150_DS_
00099a   0eff     movlw	0xff               	MOVLW	0xff
00099c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00150_DS_:
00099e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0009a0   d772     bra	0x886                	BRA	_00135_DS_
0009a2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009a4   0f80     addlw	0x80               	ADDLW	0x80
0009a6   0f80     addlw	0x80               	ADDLW	0x80
0009a8   e102     bnz	0x9ae                	BNZ	_00151_DS_
0009aa   0e02     movlw	0x2                	MOVLW	0x02
0009ac   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00151_DS_:
0009ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009b0   d76a     bra	0x886                	BRA	_00135_DS_
0009b2   2800     incf	0, 0, 0             	INCF	r0x00, W
0009b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009b6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0009b8   ffe5
0009ba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0009bc   ffe5
0009be   6a06     clrf	0x6, 0              	CLRF	r0x06
0009c0   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
0009c2   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009c4   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0009c6   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009c8   0bfc     andlw	0xfc               	ANDLW	0xfc
0009ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0009cc   0e00     movlw	0                  	MOVLW	UPPER(_00152_DS_)
0009ce   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0009d0   0e09     movlw	0x9                	MOVLW	HIGH(_00152_DS_)
0009d2   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0009d4   0eec     movlw	0xec               	MOVLW	LOW(_00152_DS_)
0009d6   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0009d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009da   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0009dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009de   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0009e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009e4   f006
0009e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009e8   f005
0009ea   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00152_DS_:
0009ec   effc     goto	0x9f8               	GOTO	_00128_DS_
0009ee   f004
0009f0   ef17     goto	0xa2e               	GOTO	_00129_DS_
0009f2   f005
0009f4   ef33     goto	0xa66               	GOTO	_00130_DS_
0009f6   f005
                                           _00128_DS_:
                                           ;	.line	224; src/clock.c	LCDErase();
0009f8   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
0009fa   f015
                                           ;	.line	225; src/clock.c	choice = CONFIG_MODE_ALARM;
0009fc   6a00     clrf	0, 0                	CLRF	r0x00
0009fe   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	226; src/clock.c	choice_string = CM_ALARM_STRING;
000a00   0e96     movlw	0x96               	MOVLW	LOW(__str_0)
000a02   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a04   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a06   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_0)
000a08   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a0a   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a0c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000a0e   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a10   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a12   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	227; src/clock.c	display_config_mode(choice_string);
000a14   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a18   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a1a   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1e   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a20   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a24   ec51     call	0x30a2, 0           	CALL	_display_config_mode
000a26   f018
000a28   0e03     movlw	0x3                	MOVLW	0x03
000a2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	228; src/clock.c	break;
000a2c   d72c     bra	0x886                	BRA	_00135_DS_
                                           _00129_DS_:
                                           ;	.line	231; src/clock.c	LCDErase();
000a2e   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
000a30   f015
                                           ;	.line	232; src/clock.c	choice = CONFIG_MODE_CLOCK;
000a32   0e01     movlw	0x1                	MOVLW	0x01
000a34   6e00     movwf	0, 0               	MOVWF	r0x00
000a36   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	233; src/clock.c	choice_string = CM_CLOCK_STRING;
000a38   0eba     movlw	0xba               	MOVLW	LOW(__str_3)
000a3a   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a3c   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a3e   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_3)
000a40   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a42   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a44   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a46   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a48   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a4a   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	234; src/clock.c	display_config_mode(choice_string);
000a4c   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a50   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a52   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a56   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a58   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5c   ec51     call	0x30a2, 0           	CALL	_display_config_mode
000a5e   f018
000a60   0e03     movlw	0x3                	MOVLW	0x03
000a62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	235; src/clock.c	break;
000a64   d710     bra	0x886                	BRA	_00135_DS_
                                           _00130_DS_:
                                           ;	.line	238; src/clock.c	LCDErase();
000a66   ecd0     call	0x2ba0, 0           	CALL	_LCDErase
000a68   f015
                                           ;	.line	239; src/clock.c	choice =CONFIG_MODE_QUIT;
000a6a   0eff     movlw	0xff               	MOVLW	0xff
000a6c   6e00     movwf	0, 0               	MOVWF	r0x00
000a6e   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	240; src/clock.c	choice_string = CM_QUIT_STRING;
000a70   0ec6     movlw	0xc6               	MOVLW	LOW(__str_4)
000a72   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a74   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a76   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_4)
000a78   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a7a   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a7c   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a7e   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a80   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a82   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	241; src/clock.c	display_config_mode(choice_string);
000a84   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a88   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a8a   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a8e   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a90   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   ec51     call	0x30a2, 0           	CALL	_display_config_mode
000a96   f018
000a98   0e03     movlw	0x3                	MOVLW	0x03
000a9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	243; src/clock.c	}
000a9c   d6f4     bra	0x886                	BRA	_00135_DS_
                                           _00137_DS_:
000a9e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000aa0   f004
000aa2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000aa4   f003
000aa6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000aa8   f002
000aaa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aac   f001
000aae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ab0   f000
000ab2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ab4   ffd9
000ab6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	118; src/clock.c	void init(void){
001ef8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001efa   ffe5
001efc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001efe   ffd9
                                           ;	.line	120; src/clock.c	LCDInit();
001f00   ec91     call	0xd22, 0            	CALL	_LCDInit
001f02   f006
                                           ;	.line	123; src/clock.c	_time = time_create();
001f04   ec0f     call	0x2e1e, 0           	CALL	_time_create
001f06   f017
001f08   010f     movlb	0xf                	BANKSEL	__time
001f0a   6f52     movwf	0x52, 0x1          	MOVWF	__time, B
001f0c   cff3     movff	0xff3, 0xf53       	MOVFF	PRODL, (__time + 1)
001f0e   ff53
001f10   cff4     movff	0xff4, 0xf54       	MOVFF	PRODH, (__time + 2)
001f12   ff54
                                           ;	.line	124; src/clock.c	_alarm = time_create();
001f14   ec0f     call	0x2e1e, 0           	CALL	_time_create
001f16   f017
001f18   010f     movlb	0xf                	BANKSEL	__alarm
001f1a   6f55     movwf	0x55, 0x1          	MOVWF	__alarm, B
001f1c   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (__alarm + 1)
001f1e   ff56
001f20   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (__alarm + 2)
001f22   ff57
                                           ;	.line	127; src/clock.c	BUTTON0_TRIS = 1;
001f24   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	128; src/clock.c	BUTTON1_TRIS = 1;
001f26   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	131; src/clock.c	INTCONbits.GIE = 1;
001f28   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	132; src/clock.c	INTCONbits.PEIE = 1;
001f2a   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	133; src/clock.c	RCONbits.IPEN = 1; 
001f2c   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	136; src/clock.c	T0CONbits.TMR0ON = 0;
001f2e   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	139; src/clock.c	TMR0H = 0x00000000;
001f30   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	140; src/clock.c	TMR0L = 0x00000000;
001f32   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	143; src/clock.c	T0CONbits.T08BIT = 0;
001f34   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	146; src/clock.c	T0CONbits.T0CS = 0;
001f36   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	149; src/clock.c	T0CONbits.PSA = 1;
001f38   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	152; src/clock.c	INTCONbits.TMR0IE = 1;
001f3a   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	155; src/clock.c	INTCON3bits.INT1IE = 1;
001f3c   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	156; src/clock.c	INTCON3bits.INT3IE = 1;
001f3e   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	159; src/clock.c	LED0_TRIS = 0;
001f40   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	160; src/clock.c	LED1_TRIS = 0;   
001f42   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	161; src/clock.c	LED2_TRIS = 0;
001f44   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	162; src/clock.c	LED3_TRIS = 0;
001f46   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	165; src/clock.c	LED0_IO = 0; 
001f48   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	166; src/clock.c	LED1_IO = 0;
001f4a   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	167; src/clock.c	LED2_IO = 0;
001f4c   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	168; src/clock.c	LED3_IO = 1;
001f4e   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
001f50   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	172; src/clock.c	alarm_going_off = 0;
001f52   6b42     clrf	0x42, 0x1           	CLRF	_alarm_going_off, B
001f54   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
001f56   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
001f58   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	175; src/clock.c	alarm_counter = 0;
001f5a   6b44     clrf	0x44, 0x1           	CLRF	_alarm_counter, B
001f5c   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001f5e   6b45     clrf	0x45, 0x1           	CLRF	(_alarm_counter + 1), B
001f60   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	176; src/clock.c	overflow_counter = 0;
001f62   6b46     clrf	0x46, 0x1           	CLRF	_overflow_counter, B
001f64   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
001f66   6b47     clrf	0x47, 0x1           	CLRF	(_overflow_counter + 1), B
001f68   010e     movlb	0xe                	BANKSEL	_but1_pressed
                                           ;	.line	179; src/clock.c	but1_pressed = 0;
001f6a   6b48     clrf	0x48, 0x1           	CLRF	_but1_pressed, B
001f6c   010e     movlb	0xe                	BANKSEL	(_but1_pressed + 1)
001f6e   6b49     clrf	0x49, 0x1           	CLRF	(_but1_pressed + 1), B
001f70   010e     movlb	0xe                	BANKSEL	_but2_pressed
                                           ;	.line	180; src/clock.c	but2_pressed = 0;
001f72   6b4a     clrf	0x4a, 0x1           	CLRF	_but2_pressed, B
001f74   010e     movlb	0xe                	BANKSEL	(_but2_pressed + 1)
001f76   6b4b     clrf	0x4b, 0x1           	CLRF	(_but2_pressed + 1), B
001f78   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	183; src/clock.c	config_called = 0;
001f7a   6b40     clrf	0x40, 0x1           	CLRF	_config_called, B
001f7c   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
001f7e   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
001f80   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	184; src/clock.c	config_mode_on = 0;
001f82   6b4c     clrf	0x4c, 0x1           	CLRF	_config_mode_on, B
001f84   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
001f86   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
001f88   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	185; src/clock.c	time_update_needed =0;
001f8a   6b5e     clrf	0x5e, 0x1           	CLRF	_time_update_needed, B
001f8c   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
001f8e   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
001f90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001f92   ffd9
001f94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001f96   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
001f98   2074     addwfc	0x74, 0, 0        
001f9a   6c61     negf	0x61, 0             
001f9c   7261     btg	0x61, 0x1, 0         
001f9e   3f6d     incfsz	0x6d, 0x1, 0x1    
001fa0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001fa2   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x00
001fa4   2074     addwfc	0x74, 0, 0        
001fa6   6c61     negf	0x61, 0             
001fa8   7261     btg	0x61, 0x1, 0         
001faa   3a6d     swapf	0x6d, 0x1, 0       
001fac   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001fae   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x00
001fb0   2074     addwfc	0x74, 0, 0        
001fb2   6c63     negf	0x63, 0             
001fb4   636f     cpfseq	0x6f, 0x1         
001fb6   3a6b     swapf	0x6b, 0x1, 0       
001fb8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
001fba   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
001fbc   2074     addwfc	0x74, 0, 0        
001fbe   6c63     negf	0x63, 0             
001fc0   636f     cpfseq	0x6f, 0x1         
001fc2   3f6b     incfsz	0x6b, 0x1, 0x1    
001fc4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001fc6   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
001fc8   7469     btg	0x69, 0x2, 0         
001fca   6320     cpfseq	0x20, 0x1         
001fcc   6e6f     movwf	0x6f, 0            
001fce   6966     setf	0x66, 0x1           
001fd0   2067     addwfc	0x67, 0, 0        
001fd2   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
001fd4   6564     cpfsgt	0x64, 0x1         
001fd6   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
001fd8   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
001fda   7275     btg	0x75, 0x1, 0         
001fdc   3a73     swapf	0x73, 0x1, 0       
001fde   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001fe0   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x00
001fe2   756e     btg	0x6e, 0x2, 0x1       
001fe4   6574     cpfsgt	0x74, 0x1         
001fe6   3a73     swapf	0x73, 0x1, 0       
001fe8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
001fea   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x00
001fec   6f63     movwf	0x63, 0x1          
001fee   646e     cpfsgt	0x6e, 0           
001ff0   3a73     swapf	0x73, 0x1, 0       
001ff2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
001ff4   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x3a
001ff6   6f6f     movwf	0x6f, 0x1          
001ff8   6573     cpfsgt	0x73, 0x1         
001ffa   6d20     negf	0x20, 0x1           
001ffc   646f     cpfsgt	0x6f, 0           
001ffe   3a65     swapf	0x65, 0x1, 0       
002000   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
002002   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
002004   6432     cpfsgt	0x32, 0           
002006   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3018 (0x0bca) bytes ( 2.30%)
                                           ;           	 1509 (0x05e5) words
                                           ; udata size:	   57 (0x0039) bytes ( 1.48%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 14:33:54 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002ba0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002ba2   ffe5
002ba4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002ba6   ffd9
002ba8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002baa   ffe5
002bac   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002bae   ffe5
002bb0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002bb2   ffe5
002bb4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002bb6   ffe5
002bb8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002bba   ffe5
002bbc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002bbe   ffe5
002bc0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002bc2   ffe5
002bc4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002bc6   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002bc8   0e01     movlw	0x1                	MOVLW	0x01
002bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bcc   0e00     movlw	0                  	MOVLW	0x00
002bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bd0   ec85     call	0x310a, 0           	CALL	_LCDWrite
002bd2   f018
002bd4   0e02     movlw	0x2                	MOVLW	0x02
002bd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002bd8   0e48     movlw	0x48               	MOVLW	0x48
002bda   6e00     movwf	0, 0               	MOVWF	r0x00
002bdc   0e0d     movlw	0xd                	MOVLW	0x0d
002bde   6e01     movwf	0x1, 0             	MOVWF	r0x01
002be0   6a02     clrf	0x2, 0              	CLRF	r0x02
002be2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002be4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002be6   f004
002be8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002bea   f005
002bec   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002bee   f006
002bf0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002bf2   f007
002bf4   0eff     movlw	0xff               	MOVLW	0xff
002bf6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002bf8   0eff     movlw	0xff               	MOVLW	0xff
002bfa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002bfc   0eff     movlw	0xff               	MOVLW	0xff
002bfe   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002c00   0eff     movlw	0xff               	MOVLW	0xff
002c02   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002c04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002c06   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002c08   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002c0a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002c0c   e1eb     bnz	0x2be4               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002c0e   0e00     movlw	0                  	MOVLW	0x00
002c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c12   0e20     movlw	0x20               	MOVLW	0x20
002c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c16   0e20     movlw	0x20               	MOVLW	0x20
002c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c1a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c1e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c22   eccd     call	0x259a, 0           	CALL	_memset
002c24   f012
002c26   0e05     movlw	0x5                	MOVLW	0x05
002c28   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c2a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002c2c   f007
002c2e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002c30   f006
002c32   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002c34   f005
002c36   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c38   f004
002c3a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c3c   f003
002c3e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c40   f002
002c42   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c44   f001
002c46   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c48   f000
002c4a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c4c   ffd9
002c4e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000ab8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aba   ffe5
000abc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000abe   ffd9
000ac0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ac2   ffe5
000ac4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ac6   ffe5
000ac8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000aca   ffe5
000acc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ace   ffe5
000ad0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ad2   ffe5
000ad4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ad6   ffe5
000ad8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ada   ffe5
000adc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ade   ffe5
000ae0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ae2   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000ae4   0e02     movlw	0x2                	MOVLW	0x02
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	0x00
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ec85     call	0x310a, 0           	CALL	_LCDWrite
000aee   f018
000af0   0e02     movlw	0x2                	MOVLW	0x02
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000af4   0e48     movlw	0x48               	MOVLW	0x48
000af6   6e00     movwf	0, 0               	MOVWF	r0x00
000af8   0e0d     movlw	0xd                	MOVLW	0x0d
000afa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000afc   6a02     clrf	0x2, 0              	CLRF	r0x02
000afe   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000b00   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b02   f004
000b04   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b06   f005
000b08   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b0a   f006
000b0c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b0e   f007
000b10   0eff     movlw	0xff               	MOVLW	0xff
000b12   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b14   0eff     movlw	0xff               	MOVLW	0xff
000b16   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b18   0eff     movlw	0xff               	MOVLW	0xff
000b1a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b1c   0eff     movlw	0xff               	MOVLW	0xff
000b1e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b22   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b24   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b26   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b28   e1eb     bnz	0xb00                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000b2a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
000b2c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b2e   f001
000b30   6a02     clrf	0x2, 0              	CLRF	r0x02
000b32   0e00     movlw	0                  	MOVLW	0x00
000b34   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b36   e102     bnz	0xb3c                	BNZ	_00297_DS_
000b38   0e10     movlw	0x10               	MOVLW	0x10
000b3a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
000b3c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000b3e   d057     bra	0xbee                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000b40   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b42   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b44   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b46   6a02     clrf	0x2, 0              	CLRF	r0x02
000b48   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b4a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b4c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b4e   ffe9
000b50   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000b52   ffea
000b54   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000b56   f001
000b58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b5a   e119     bnz	0xb8e                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000b5c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b5e   f001
                                           _00253_DS_:
000b60   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000b62   f002
000b64   6a03     clrf	0x3, 0              	CLRF	r0x03
000b66   0e00     movlw	0                  	MOVLW	0x00
000b68   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b6a   e102     bnz	0xb70                	BNZ	_00298_DS_
000b6c   0e10     movlw	0x10               	MOVLW	0x10
000b6e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
000b70   e20e     bc	0xb8e                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
000b72   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b74   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000b76   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b78   6a03     clrf	0x3, 0              	CLRF	r0x03
000b7a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b7e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000b80   ffe9
000b82   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000b84   ffea
000b86   0e20     movlw	0x20               	MOVLW	0x20
000b88   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000b8a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000b8c   d7e9     bra	0xb60                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000b8e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b90   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b92   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b94   6a02     clrf	0x2, 0              	CLRF	r0x02
000b96   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b98   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b9a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b9c   ffe9
000b9e   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000ba0   ffea
000ba2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000ba4   f001
000ba6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000baa   0e01     movlw	0x1                	MOVLW	0x01
000bac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bae   ec85     call	0x310a, 0           	CALL	_LCDWrite
000bb0   f018
000bb2   0e02     movlw	0x2                	MOVLW	0x02
000bb4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000bb6   0e55     movlw	0x55               	MOVLW	0x55
000bb8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bba   6a02     clrf	0x2, 0              	CLRF	r0x02
000bbc   6a03     clrf	0x3, 0              	CLRF	r0x03
000bbe   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000bc0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bc2   f005
000bc4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bc6   f006
000bc8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bca   f007
000bcc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bce   f008
000bd0   0eff     movlw	0xff               	MOVLW	0xff
000bd2   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bd4   0eff     movlw	0xff               	MOVLW	0xff
000bd6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bd8   0eff     movlw	0xff               	MOVLW	0xff
000bda   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bdc   0eff     movlw	0xff               	MOVLW	0xff
000bde   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000be0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000be4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000be6   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000be8   e1eb     bnz	0xbc0                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000bea   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bec   d79f     bra	0xb2c                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000bee   0ec0     movlw	0xc0               	MOVLW	0xc0
000bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf2   0e00     movlw	0                  	MOVLW	0x00
000bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf6   ec85     call	0x310a, 0           	CALL	_LCDWrite
000bf8   f018
000bfa   0e02     movlw	0x2                	MOVLW	0x02
000bfc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000bfe   0e55     movlw	0x55               	MOVLW	0x55
000c00   6e00     movwf	0, 0               	MOVWF	r0x00
000c02   6a01     clrf	0x1, 0              	CLRF	r0x01
000c04   6a02     clrf	0x2, 0              	CLRF	r0x02
000c06   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000c08   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c0a   f004
000c0c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c0e   f005
000c10   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c12   f006
000c14   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c16   f007
000c18   0eff     movlw	0xff               	MOVLW	0xff
000c1a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c1c   0eff     movlw	0xff               	MOVLW	0xff
000c1e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c20   0eff     movlw	0xff               	MOVLW	0xff
000c22   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c24   0eff     movlw	0xff               	MOVLW	0xff
000c26   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c2a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c2c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c2e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c30   e1eb     bnz	0xc08                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000c32   0e10     movlw	0x10               	MOVLW	0x10
000c34   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
000c36   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000c38   f001
000c3a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c40   e102     bnz	0xc46                	BNZ	_00299_DS_
000c42   0e20     movlw	0x20               	MOVLW	0x20
000c44   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
000c46   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c48   d057     bra	0xcf8                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000c4a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c4c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000c4e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c50   6a02     clrf	0x2, 0              	CLRF	r0x02
000c52   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000c54   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c56   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000c58   ffe9
000c5a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000c5c   ffea
000c5e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000c60   f001
000c62   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c64   e119     bnz	0xc98                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000c66   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000c68   f001
                                           _00261_DS_:
000c6a   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000c6c   f002
000c6e   6a03     clrf	0x3, 0              	CLRF	r0x03
000c70   0e00     movlw	0                  	MOVLW	0x00
000c72   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000c74   e102     bnz	0xc7a                	BNZ	_00300_DS_
000c76   0e20     movlw	0x20               	MOVLW	0x20
000c78   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000c7a   e20e     bc	0xc98                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000c7c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c7e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000c80   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c82   6a03     clrf	0x3, 0              	CLRF	r0x03
000c84   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000c86   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c88   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000c8a   ffe9
000c8c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000c8e   ffea
000c90   0e20     movlw	0x20               	MOVLW	0x20
000c92   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000c94   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000c96   d7e9     bra	0xc6a                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000c98   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c9a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000c9c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c9e   6a02     clrf	0x2, 0              	CLRF	r0x02
000ca0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ca2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ca4   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000ca6   ffe9
000ca8   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000caa   ffea
000cac   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000cae   f001
000cb0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb4   0e01     movlw	0x1                	MOVLW	0x01
000cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb8   ec85     call	0x310a, 0           	CALL	_LCDWrite
000cba   f018
000cbc   0e02     movlw	0x2                	MOVLW	0x02
000cbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000cc0   0e55     movlw	0x55               	MOVLW	0x55
000cc2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cc4   6a02     clrf	0x2, 0              	CLRF	r0x02
000cc6   6a03     clrf	0x3, 0              	CLRF	r0x03
000cc8   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000cca   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ccc   f005
000cce   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cd0   f006
000cd2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cd4   f007
000cd6   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000cd8   f008
000cda   0eff     movlw	0xff               	MOVLW	0xff
000cdc   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000cde   0eff     movlw	0xff               	MOVLW	0xff
000ce0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ce2   0eff     movlw	0xff               	MOVLW	0xff
000ce4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ce6   0eff     movlw	0xff               	MOVLW	0xff
000ce8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000cea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000cec   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cee   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cf0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000cf2   e1eb     bnz	0xcca                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000cf4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000cf6   d79f     bra	0xc36                	BRA	_00265_DS_
                                           _00269_DS_:
000cf8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cfa   f008
000cfc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cfe   f007
000d00   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000d02   f006
000d04   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000d06   f005
000d08   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000d0a   f004
000d0c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000d0e   f003
000d10   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d12   f002
000d14   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d16   f001
000d18   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d1a   f000
000d1c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d1e   ffd9
000d20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000d22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d24   ffe5
000d26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d28   ffd9
000d2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d2c   ffe5
000d2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d30   ffe5
000d32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d34   ffe5
000d36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d38   ffe5
000d3a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d3c   ffe5
000d3e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d40   ffe5
000d42   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d44   ffe5
000d46   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d48   ffe5
000d4a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d4c   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000d4e   0e00     movlw	0                  	MOVLW	0x00
000d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d52   0e20     movlw	0x20               	MOVLW	0x20
000d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d56   0e20     movlw	0x20               	MOVLW	0x20
000d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   eccd     call	0x259a, 0           	CALL	_memset
000d64   f012
000d66   0e05     movlw	0x5                	MOVLW	0x05
000d68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d6a   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000d6c   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000d6e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000d70   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000d72   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000d74   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000d76   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000d78   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000d7a   0ea0     movlw	0xa0               	MOVLW	0xa0
000d7c   6e00     movwf	0, 0               	MOVWF	r0x00
000d7e   0e09     movlw	0x9                	MOVLW	0x09
000d80   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d82   0e01     movlw	0x1                	MOVLW	0x01
000d84   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d86   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000d88   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000d8a   f004
000d8c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000d8e   f005
000d90   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000d92   f006
000d94   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000d96   f007
000d98   0eff     movlw	0xff               	MOVLW	0xff
000d9a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d9c   0eff     movlw	0xff               	MOVLW	0xff
000d9e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000da0   0eff     movlw	0xff               	MOVLW	0xff
000da2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000da4   0eff     movlw	0xff               	MOVLW	0xff
000da6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000dac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000dae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000db0   e1eb     bnz	0xd88                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000db2   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000db4   0e03     movlw	0x3                	MOVLW	0x03
000db6   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000db8   0000     nop                      	nop 
000dba   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000dbc   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000dbe   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000dc0   f001
000dc2   6a02     clrf	0x2, 0              	CLRF	r0x02
000dc4   0e00     movlw	0                  	MOVLW	0x00
000dc6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000dc8   e102     bnz	0xdce                	BNZ	_00220_DS_
000dca   0e03     movlw	0x3                	MOVLW	0x03
000dcc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000dce   e239     bc	0xe42                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000dd0   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000dd2   0e11     movlw	0x11               	MOVLW	0x11
000dd4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dd6   6a02     clrf	0x2, 0              	CLRF	r0x02
000dd8   6a03     clrf	0x3, 0              	CLRF	r0x03
000dda   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000ddc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000dde   f005
000de0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000de2   f006
000de4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000de6   f007
000de8   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000dea   f008
000dec   0eff     movlw	0xff               	MOVLW	0xff
000dee   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000df0   0eff     movlw	0xff               	MOVLW	0xff
000df2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000df4   0eff     movlw	0xff               	MOVLW	0xff
000df6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000df8   0eff     movlw	0xff               	MOVLW	0xff
000dfa   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000dfc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000dfe   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e00   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e02   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e04   e1eb     bnz	0xddc                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000e06   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000e08   0e48     movlw	0x48               	MOVLW	0x48
000e0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e0c   0e0d     movlw	0xd                	MOVLW	0x0d
000e0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e10   6a03     clrf	0x3, 0              	CLRF	r0x03
000e12   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000e14   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e16   f005
000e18   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e1a   f006
000e1c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e1e   f007
000e20   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000e22   f008
000e24   0eff     movlw	0xff               	MOVLW	0xff
000e26   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000e28   0eff     movlw	0xff               	MOVLW	0xff
000e2a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e2c   0eff     movlw	0xff               	MOVLW	0xff
000e2e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e30   0eff     movlw	0xff               	MOVLW	0xff
000e32   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000e34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e3a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e3c   e1eb     bnz	0xe14                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000e3e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e40   d7be     bra	0xdbe                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000e42   0e38     movlw	0x38               	MOVLW	0x38
000e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e46   0e00     movlw	0                  	MOVLW	0x00
000e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4a   ec85     call	0x310a, 0           	CALL	_LCDWrite
000e4c   f018
000e4e   0e02     movlw	0x2                	MOVLW	0x02
000e50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000e52   0e55     movlw	0x55               	MOVLW	0x55
000e54   6e00     movwf	0, 0               	MOVWF	r0x00
000e56   6a01     clrf	0x1, 0              	CLRF	r0x01
000e58   6a02     clrf	0x2, 0              	CLRF	r0x02
000e5a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000e5c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000e5e   f004
000e60   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e62   f005
000e64   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e66   f006
000e68   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e6a   f007
000e6c   0eff     movlw	0xff               	MOVLW	0xff
000e6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000e70   0eff     movlw	0xff               	MOVLW	0xff
000e72   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000e74   0eff     movlw	0xff               	MOVLW	0xff
000e76   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e78   0eff     movlw	0xff               	MOVLW	0xff
000e7a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e7c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e7e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000e80   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e84   e1eb     bnz	0xe5c                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000e86   0e06     movlw	0x6                	MOVLW	0x06
000e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8a   0e00     movlw	0                  	MOVLW	0x00
000e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8e   ec85     call	0x310a, 0           	CALL	_LCDWrite
000e90   f018
000e92   0e02     movlw	0x2                	MOVLW	0x02
000e94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000e96   0e55     movlw	0x55               	MOVLW	0x55
000e98   6e00     movwf	0, 0               	MOVWF	r0x00
000e9a   6a01     clrf	0x1, 0              	CLRF	r0x01
000e9c   6a02     clrf	0x2, 0              	CLRF	r0x02
000e9e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000ea0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ea2   f004
000ea4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ea6   f005
000ea8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eaa   f006
000eac   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000eae   f007
000eb0   0eff     movlw	0xff               	MOVLW	0xff
000eb2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000eb4   0eff     movlw	0xff               	MOVLW	0xff
000eb6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000eb8   0eff     movlw	0xff               	MOVLW	0xff
000eba   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ebc   0eff     movlw	0xff               	MOVLW	0xff
000ebe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ec0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ec2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000ec4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000ec6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000ec8   e1eb     bnz	0xea0                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000eca   0e0c     movlw	0xc                	MOVLW	0x0c
000ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ece   0e00     movlw	0                  	MOVLW	0x00
000ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed2   ec85     call	0x310a, 0           	CALL	_LCDWrite
000ed4   f018
000ed6   0e02     movlw	0x2                	MOVLW	0x02
000ed8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000eda   0e55     movlw	0x55               	MOVLW	0x55
000edc   6e00     movwf	0, 0               	MOVWF	r0x00
000ede   6a01     clrf	0x1, 0              	CLRF	r0x01
000ee0   6a02     clrf	0x2, 0              	CLRF	r0x02
000ee2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000ee4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ee6   f004
000ee8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000eea   f005
000eec   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eee   f006
000ef0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ef2   f007
000ef4   0eff     movlw	0xff               	MOVLW	0xff
000ef6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ef8   0eff     movlw	0xff               	MOVLW	0xff
000efa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000efc   0eff     movlw	0xff               	MOVLW	0xff
000efe   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f00   0eff     movlw	0xff               	MOVLW	0xff
000f02   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f06   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f08   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f0a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f0c   e1eb     bnz	0xee4                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000f0e   0e01     movlw	0x1                	MOVLW	0x01
000f10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f12   0e00     movlw	0                  	MOVLW	0x00
000f14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f16   ec85     call	0x310a, 0           	CALL	_LCDWrite
000f18   f018
000f1a   0e02     movlw	0x2                	MOVLW	0x02
000f1c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000f1e   0e48     movlw	0x48               	MOVLW	0x48
000f20   6e00     movwf	0, 0               	MOVWF	r0x00
000f22   0e0d     movlw	0xd                	MOVLW	0x0d
000f24   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f26   6a02     clrf	0x2, 0              	CLRF	r0x02
000f28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000f2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f2c   f004
000f2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f30   f005
000f32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f34   f006
000f36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f38   f007
000f3a   0eff     movlw	0xff               	MOVLW	0xff
000f3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f3e   0eff     movlw	0xff               	MOVLW	0xff
000f40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f42   0eff     movlw	0xff               	MOVLW	0xff
000f44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f46   0eff     movlw	0xff               	MOVLW	0xff
000f48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f52   e1eb     bnz	0xf2a                	BNZ	_00185_DS_
000f54   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000f56   f008
000f58   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f5a   f007
000f5c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f5e   f006
000f60   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f62   f005
000f64   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f66   f004
000f68   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f6a   f003
000f6c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f6e   f002
000f70   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f72   f001
000f74   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f76   f000
000f78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f7a   ffd9
000f7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00310a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00310c   ffe5
00310e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003110   ffd9
003112   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003114   ffe5
003116   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003118   ffe5
00311a   0e02     movlw	0x2                	MOVLW	0x02
00311c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00311e   f000
003120   0e03     movlw	0x3                	MOVLW	0x03
003122   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003124   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
003126   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
003128   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00312a   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
00312c   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
00312e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003130   0b01     andlw	0x1                	ANDLW	0x01
003132   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003134   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003136   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003138   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00313a   0bfb     andlw	0xfb               	ANDLW	0xfb
00313c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00313e   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
003140   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
003142   ff8d
003144   0000     nop                      	nop 
003146   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
003148   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00314a   0000     nop                      	nop 
00314c   0000     nop                      	nop 
00314e   0000     nop                      	nop 
003150   0000     nop                      	nop 
003152   0000     nop                      	nop 
003154   0000     nop                      	nop 
003156   0000     nop                      	nop 
003158   0000     nop                      	nop 
00315a   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
00315c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00315e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003160   f001
003162   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003164   f000
003166   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003168   ffd9
00316a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 14:33:54 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_time_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/time.c	int time_equals(time t1, time t2){
001668   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00166a   ffe5
00166c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00166e   ffd9
001670   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001672   ffe5
001674   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001676   ffe5
001678   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00167a   ffe5
00167c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00167e   ffe5
001680   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001682   ffe5
001684   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001686   ffe5
001688   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00168a   ffe5
00168c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00168e   ffe5
001690   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001692   ffe5
001694   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001696   ffe5
001698   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00169a   ffe5
00169c   0e02     movlw	0x2                	MOVLW	0x02
00169e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0016a0   f000
0016a2   0e03     movlw	0x3                	MOVLW	0x03
0016a4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0016a6   f001
0016a8   0e04     movlw	0x4                	MOVLW	0x04
0016aa   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0016ac   f002
0016ae   0e05     movlw	0x5                	MOVLW	0x05
0016b0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0016b2   f003
0016b4   0e06     movlw	0x6                	MOVLW	0x06
0016b6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0016b8   f004
0016ba   0e07     movlw	0x7                	MOVLW	0x07
0016bc   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0016be   f005
                                           ;	.line	64; src/time.c	if(t1->seconds != t2->seconds)
0016c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016c2   0f04     addlw	0x4                	ADDLW	0x04
0016c4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016c6   0e00     movlw	0                  	MOVLW	0x00
0016c8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0016ca   6e07     movwf	0x7, 0             	MOVWF	r0x07
0016cc   0e00     movlw	0                  	MOVLW	0x00
0016ce   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0016d0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016d2   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0016d4   ffe9
0016d6   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0016d8   fff3
0016da   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0016dc   ec63     call	0x32c6, 0           	CALL	__gptrget2
0016de   f019
0016e0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016e2   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016e4   f007
0016e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016e8   0f04     addlw	0x4                	ADDLW	0x04
0016ea   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016ec   0e00     movlw	0                  	MOVLW	0x00
0016ee   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0016f0   6e09     movwf	0x9, 0             	MOVWF	r0x09
0016f2   0e00     movlw	0                  	MOVLW	0x00
0016f4   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016f6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0016f8   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0016fa   ffe9
0016fc   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0016fe   fff3
001700   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001702   ec63     call	0x32c6, 0           	CALL	__gptrget2
001704   f019
001706   6e08     movwf	0x8, 0             	MOVWF	r0x08
001708   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00170a   f009
00170c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00170e   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001710   e103     bnz	0x1718               	BNZ	_00166_DS_
001712   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001714   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001716   e003     bz	0x171e                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/time.c	return 0;
001718   6af3     clrf	0xf3, 0             	CLRF	PRODL
00171a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00171c   d04e     bra	0x17ba               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/time.c	if(t1->minutes != t2->minutes)
00171e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001720   0f02     addlw	0x2                	ADDLW	0x02
001722   6e06     movwf	0x6, 0             	MOVWF	r0x06
001724   0e00     movlw	0                  	MOVLW	0x00
001726   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001728   6e07     movwf	0x7, 0             	MOVWF	r0x07
00172a   0e00     movlw	0                  	MOVLW	0x00
00172c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00172e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001730   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001732   ffe9
001734   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001736   fff3
001738   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00173a   ec63     call	0x32c6, 0           	CALL	__gptrget2
00173c   f019
00173e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001740   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001742   f007
001744   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001746   0f02     addlw	0x2                	ADDLW	0x02
001748   6e08     movwf	0x8, 0             	MOVWF	r0x08
00174a   0e00     movlw	0                  	MOVLW	0x00
00174c   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00174e   6e09     movwf	0x9, 0             	MOVWF	r0x09
001750   0e00     movlw	0                  	MOVLW	0x00
001752   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001754   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001756   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001758   ffe9
00175a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00175c   fff3
00175e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001760   ec63     call	0x32c6, 0           	CALL	__gptrget2
001762   f019
001764   6e08     movwf	0x8, 0             	MOVWF	r0x08
001766   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001768   f009
00176a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00176c   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00176e   e103     bnz	0x1776               	BNZ	_00168_DS_
001770   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001772   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001774   e003     bz	0x177c                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/time.c	return 0;
001776   6af3     clrf	0xf3, 0             	CLRF	PRODL
001778   6ae8     clrf	0xe8, 0             	CLRF	WREG
00177a   d01f     bra	0x17ba               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/time.c	if(t1->hours != t2->hours)
00177c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00177e   ffe9
001780   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001782   fff3
001784   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001786   ec63     call	0x32c6, 0           	CALL	__gptrget2
001788   f019
00178a   6e00     movwf	0, 0               	MOVWF	r0x00
00178c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00178e   f001
001790   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001792   ffe9
001794   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001796   fff3
001798   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00179a   ec63     call	0x32c6, 0           	CALL	__gptrget2
00179c   f019
00179e   6e03     movwf	0x3, 0             	MOVWF	r0x03
0017a0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0017a2   f004
0017a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017a6   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0017a8   e103     bnz	0x17b0               	BNZ	_00170_DS_
0017aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017ac   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
0017ae   e003     bz	0x17b6                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/time.c	return 0;
0017b0   6af3     clrf	0xf3, 0             	CLRF	PRODL
0017b2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0017b4   d002     bra	0x17ba               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/time.c	return 1;
0017b6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0017b8   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0017ba   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0017bc   f00a
0017be   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0017c0   f009
0017c2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0017c4   f008
0017c6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0017c8   f007
0017ca   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0017cc   f006
0017ce   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017d0   f005
0017d2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017d4   f004
0017d6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017d8   f003
0017da   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017dc   f002
0017de   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017e0   f001
0017e2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017e4   f000
0017e6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017e8   ffd9
0017ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_print	code
                                           _time_print:
                                           ;	.line	59; src/time.c	void time_print(time t, char* str){
001bac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001bae   ffe5
001bb0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bb2   ffd9
001bb4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bb6   ffe5
001bb8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bba   ffe5
001bbc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bbe   ffe5
001bc0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bc2   ffe5
001bc4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bc6   ffe5
001bc8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001bca   ffe5
001bcc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bce   ffe5
001bd0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bd2   ffe5
001bd4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bd6   ffe5
001bd8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bda   ffe5
001bdc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bde   ffe5
001be0   0e02     movlw	0x2                	MOVLW	0x02
001be2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001be4   f000
001be6   0e03     movlw	0x3                	MOVLW	0x03
001be8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001bea   f001
001bec   0e04     movlw	0x4                	MOVLW	0x04
001bee   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001bf0   f002
001bf2   0e05     movlw	0x5                	MOVLW	0x05
001bf4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001bf6   f003
001bf8   0e06     movlw	0x6                	MOVLW	0x06
001bfa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001bfc   f004
001bfe   0e07     movlw	0x7                	MOVLW	0x07
001c00   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001c02   f005
                                           ;	.line	60; src/time.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001c04   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c06   0f04     addlw	0x4                	ADDLW	0x04
001c08   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c0a   0e00     movlw	0                  	MOVLW	0x00
001c0c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c0e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001c10   0e00     movlw	0                  	MOVLW	0x00
001c12   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c14   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c16   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001c18   ffe9
001c1a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001c1c   fff3
001c1e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c20   ec63     call	0x32c6, 0           	CALL	__gptrget2
001c22   f019
001c24   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c26   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001c28   f007
001c2a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c2c   0f02     addlw	0x2                	ADDLW	0x02
001c2e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c30   0e00     movlw	0                  	MOVLW	0x00
001c32   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c34   6e09     movwf	0x9, 0             	MOVWF	r0x09
001c36   0e00     movlw	0                  	MOVLW	0x00
001c38   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c3a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001c3c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001c3e   ffe9
001c40   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001c42   fff3
001c44   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001c46   ec63     call	0x32c6, 0           	CALL	__gptrget2
001c48   f019
001c4a   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c4c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001c4e   f009
001c50   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001c52   ffe9
001c54   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001c56   fff3
001c58   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c5a   ec63     call	0x32c6, 0           	CALL	__gptrget2
001c5c   f019
001c5e   6e00     movwf	0, 0               	MOVWF	r0x00
001c60   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c62   f001
001c64   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c68   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c70   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c74   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c78   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c80   0e2e     movlw	0x2e               	MOVLW	HIGH(__str_0)
001c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c84   0e96     movlw	0x96               	MOVLW	LOW(__str_0)
001c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c88   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c94   ec76     call	0x22ec, 0           	CALL	_sprintf
001c96   f011
001c98   0e0c     movlw	0xc                	MOVLW	0x0c
001c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c9c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001c9e   f00a
001ca0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ca2   f009
001ca4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ca6   f008
001ca8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001caa   f007
001cac   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001cae   f006
001cb0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001cb2   f005
001cb4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001cb6   f004
001cb8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001cba   f003
001cbc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001cbe   f002
001cc0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001cc2   f001
001cc4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cc6   f000
001cc8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cca   ffd9
001ccc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/time.c	void add_hour(time t){
002fa8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002faa   ffe5
002fac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002fae   ffd9
002fb0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fb2   ffe5
002fb4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002fb6   ffe5
002fb8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002fba   ffe5
002fbc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002fbe   ffe5
002fc0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002fc2   ffe5
002fc4   0e02     movlw	0x2                	MOVLW	0x02
002fc6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fc8   f000
002fca   0e03     movlw	0x3                	MOVLW	0x03
002fcc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002fce   f001
002fd0   0e04     movlw	0x4                	MOVLW	0x04
002fd2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002fd4   f002
                                           ;	.line	56; src/time.c	set_hours(t,t->hours + 1);
002fd6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002fd8   ffe9
002fda   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002fdc   fff3
002fde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fe0   ec63     call	0x32c6, 0           	CALL	__gptrget2
002fe2   f019
002fe4   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fe6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002fe8   f004
002fea   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002fec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002fee   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002ff0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ffc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ffe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003000   5000     movf	0, 0, 0             	MOVF	r0x00, W
003002   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003004   ec5e     call	0x28bc, 0           	CALL	_set_hours
003006   f014
003008   0e05     movlw	0x5                	MOVLW	0x05
00300a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00300c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00300e   f004
003010   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003012   f003
003014   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003016   f002
003018   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00301a   f001
00301c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00301e   f000
003020   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003022   ffd9
003024   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/time.c	void add_minute(time t){
002978   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00297a   ffe5
00297c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00297e   ffd9
002980   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002982   ffe5
002984   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002986   ffe5
002988   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00298a   ffe5
00298c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00298e   ffe5
002990   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002992   ffe5
002994   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002996   ffe5
002998   0e02     movlw	0x2                	MOVLW	0x02
00299a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00299c   f000
00299e   0e03     movlw	0x3                	MOVLW	0x03
0029a0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029a2   f001
0029a4   0e04     movlw	0x4                	MOVLW	0x04
0029a6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0029a8   f002
                                           ;	.line	51; src/time.c	if(set_minutes(t,t->minutes + 1) != 0)
0029aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ac   0f02     addlw	0x2                	ADDLW	0x02
0029ae   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029b0   0e00     movlw	0                  	MOVLW	0x00
0029b2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0029b4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029b6   0e00     movlw	0                  	MOVLW	0x00
0029b8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0029ba   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029bc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0029be   ffe9
0029c0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0029c2   fff3
0029c4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029c6   ec63     call	0x32c6, 0           	CALL	__gptrget2
0029c8   f019
0029ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029cc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029ce   f004
0029d0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0029d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0029d4   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0029d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ea   ec96     call	0x272c, 0           	CALL	_set_minutes
0029ec   f013
0029ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029f0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029f2   f004
0029f4   0e05     movlw	0x5                	MOVLW	0x05
0029f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029fa   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0029fc   e00a     bz	0x2a12                	BZ	_00139_DS_
                                           ;	.line	52; src/time.c	add_hour(t);
0029fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a02   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a06   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0a   ecd4     call	0x2fa8, 0           	CALL	_add_hour
002a0c   f017
002a0e   0e03     movlw	0x3                	MOVLW	0x03
002a10   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
002a12   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a14   f005
002a16   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a18   f004
002a1a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a1c   f003
002a1e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a20   f002
002a22   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a24   f001
002a26   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a28   f000
002a2a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a2c   ffd9
002a2e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_second	code
                                           _add_second:
                                           ;	.line	45; src/time.c	void add_second(time t){
002a30   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a32   ffe5
002a34   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a36   ffd9
002a38   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a3a   ffe5
002a3c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a3e   ffe5
002a40   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a42   ffe5
002a44   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a46   ffe5
002a48   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a4a   ffe5
002a4c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002a4e   ffe5
002a50   0e02     movlw	0x2                	MOVLW	0x02
002a52   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a54   f000
002a56   0e03     movlw	0x3                	MOVLW	0x03
002a58   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a5a   f001
002a5c   0e04     movlw	0x4                	MOVLW	0x04
002a5e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002a60   f002
                                           ;	.line	46; src/time.c	if(set_seconds(t,t->seconds + 1) != 0)
002a62   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a64   0f04     addlw	0x4                	ADDLW	0x04
002a66   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a68   0e00     movlw	0                  	MOVLW	0x00
002a6a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002a6c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a6e   0e00     movlw	0                  	MOVLW	0x00
002a70   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002a72   6e05     movwf	0x5, 0             	MOVWF	r0x05
002a74   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002a76   ffe9
002a78   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002a7a   fff3
002a7c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a7e   ec63     call	0x32c6, 0           	CALL	__gptrget2
002a80   f019
002a82   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a84   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a86   f004
002a88   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002a8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002a8c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002a8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a92   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a9a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a9e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002aa0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa2   ec32     call	0x2664, 0           	CALL	_set_seconds
002aa4   f013
002aa6   6e03     movwf	0x3, 0             	MOVWF	r0x03
002aa8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002aaa   f004
002aac   0e05     movlw	0x5                	MOVLW	0x05
002aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ab0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ab2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002ab4   e00a     bz	0x2aca                	BZ	_00132_DS_
                                           ;	.line	47; src/time.c	add_minute(t);
002ab6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ab8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002abc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002abe   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac2   ecbc     call	0x2978, 0           	CALL	_add_minute
002ac4   f014
002ac6   0e03     movlw	0x3                	MOVLW	0x03
002ac8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002aca   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002acc   f005
002ace   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002ad0   f004
002ad2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002ad4   f003
002ad6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002ad8   f002
002ada   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002adc   f001
002ade   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ae0   f000
002ae2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ae4   ffd9
002ae6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/time.c	int set_seconds(time t, int value){
002664   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002666   ffe5
002668   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00266a   ffd9
00266c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00266e   ffe5
002670   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002672   ffe5
002674   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002676   ffe5
002678   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00267a   ffe5
00267c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00267e   ffe5
002680   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002682   ffe5
002684   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002686   ffe5
002688   0e02     movlw	0x2                	MOVLW	0x02
00268a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00268c   f000
00268e   0e03     movlw	0x3                	MOVLW	0x03
002690   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002692   f001
002694   0e04     movlw	0x4                	MOVLW	0x04
002696   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002698   f002
00269a   0e05     movlw	0x5                	MOVLW	0x05
00269c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00269e   f003
0026a0   0e06     movlw	0x6                	MOVLW	0x06
0026a2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0026a4   f004
                                           ;	.line	40; src/time.c	int overflow = value/60;
0026a6   0e00     movlw	0                  	MOVLW	0x00
0026a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026aa   0e3c     movlw	0x3c               	MOVLW	0x3c
0026ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b6   ec83     call	0x2106, 0           	CALL	__divsint
0026b8   f010
0026ba   6e05     movwf	0x5, 0             	MOVWF	r0x05
0026bc   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0026be   f006
0026c0   0e04     movlw	0x4                	MOVLW	0x04
0026c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/time.c	t->seconds = value % 60;
0026c4   0e04     movlw	0x4                	MOVLW	0x04
0026c6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0026c8   0e00     movlw	0                  	MOVLW	0x00
0026ca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0026cc   0e00     movlw	0                  	MOVLW	0x00
0026ce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026d0   0e00     movlw	0                  	MOVLW	0x00
0026d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026d4   0e3c     movlw	0x3c               	MOVLW	0x3c
0026d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e0   eceb     call	0x23d6, 0           	CALL	__modsint
0026e2   f011
0026e4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0026e6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0026e8   f004
0026ea   0e04     movlw	0x4                	MOVLW	0x04
0026ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026f0   ffe5
0026f2   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0026f4   fff4
0026f6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0026f8   ffe9
0026fa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0026fc   fff3
0026fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002700   eca4     call	0x3348, 0           	CALL	__gptrput2
002702   f019
                                           ;	.line	42; src/time.c	return overflow;
002704   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002706   fff3
002708   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00270a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00270c   f006
00270e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002710   f005
002712   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002714   f004
002716   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002718   f003
00271a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00271c   f002
00271e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002720   f001
002722   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002724   f000
002726   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002728   ffd9
00272a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/time.c	int set_minutes(time t, int value){
00272c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00272e   ffe5
002730   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002732   ffd9
002734   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002736   ffe5
002738   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00273a   ffe5
00273c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00273e   ffe5
002740   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002742   ffe5
002744   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002746   ffe5
002748   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00274a   ffe5
00274c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00274e   ffe5
002750   0e02     movlw	0x2                	MOVLW	0x02
002752   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002754   f000
002756   0e03     movlw	0x3                	MOVLW	0x03
002758   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00275a   f001
00275c   0e04     movlw	0x4                	MOVLW	0x04
00275e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002760   f002
002762   0e05     movlw	0x5                	MOVLW	0x05
002764   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002766   f003
002768   0e06     movlw	0x6                	MOVLW	0x06
00276a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00276c   f004
                                           ;	.line	34; src/time.c	int overflow = value/60;
00276e   0e00     movlw	0                  	MOVLW	0x00
002770   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002772   0e3c     movlw	0x3c               	MOVLW	0x3c
002774   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002776   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002778   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00277a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00277c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00277e   ec83     call	0x2106, 0           	CALL	__divsint
002780   f010
002782   6e05     movwf	0x5, 0             	MOVWF	r0x05
002784   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002786   f006
002788   0e04     movlw	0x4                	MOVLW	0x04
00278a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/time.c	t->minutes = value%60;
00278c   0e02     movlw	0x2                	MOVLW	0x02
00278e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002790   0e00     movlw	0                  	MOVLW	0x00
002792   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002794   0e00     movlw	0                  	MOVLW	0x00
002796   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002798   0e00     movlw	0                  	MOVLW	0x00
00279a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279c   0e3c     movlw	0x3c               	MOVLW	0x3c
00279e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a8   eceb     call	0x23d6, 0           	CALL	__modsint
0027aa   f011
0027ac   6e03     movwf	0x3, 0             	MOVWF	r0x03
0027ae   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0027b0   f004
0027b2   0e04     movlw	0x4                	MOVLW	0x04
0027b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0027b6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0027b8   ffe5
0027ba   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0027bc   fff4
0027be   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0027c0   ffe9
0027c2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0027c4   fff3
0027c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027c8   eca4     call	0x3348, 0           	CALL	__gptrput2
0027ca   f019
                                           ;	.line	36; src/time.c	return overflow;
0027cc   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0027ce   fff3
0027d0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0027d2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0027d4   f006
0027d6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0027d8   f005
0027da   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027dc   f004
0027de   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027e0   f003
0027e2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027e4   f002
0027e6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027e8   f001
0027ea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027ec   f000
0027ee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027f0   ffd9
0027f2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/time.c	int set_hours(time t, int value){
0028bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028be   ffe5
0028c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028c2   ffd9
0028c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028c6   ffe5
0028c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028ca   ffe5
0028cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028ce   ffe5
0028d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028d2   ffe5
0028d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028d6   ffe5
0028d8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0028da   ffe5
0028dc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0028de   ffe5
0028e0   0e02     movlw	0x2                	MOVLW	0x02
0028e2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0028e4   f000
0028e6   0e03     movlw	0x3                	MOVLW	0x03
0028e8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0028ea   f001
0028ec   0e04     movlw	0x4                	MOVLW	0x04
0028ee   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0028f0   f002
0028f2   0e05     movlw	0x5                	MOVLW	0x05
0028f4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0028f6   f003
0028f8   0e06     movlw	0x6                	MOVLW	0x06
0028fa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0028fc   f004
                                           ;	.line	28; src/time.c	int overflow = value/24;
0028fe   0e00     movlw	0                  	MOVLW	0x00
002900   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002902   0e18     movlw	0x18               	MOVLW	0x18
002904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002906   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002908   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00290a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00290c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00290e   ec83     call	0x2106, 0           	CALL	__divsint
002910   f010
002912   6e05     movwf	0x5, 0             	MOVWF	r0x05
002914   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002916   f006
002918   0e04     movlw	0x4                	MOVLW	0x04
00291a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/time.c	t->hours = value%24;
00291c   0e00     movlw	0                  	MOVLW	0x00
00291e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002920   0e18     movlw	0x18               	MOVLW	0x18
002922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002924   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002928   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00292a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292c   eceb     call	0x23d6, 0           	CALL	__modsint
00292e   f011
002930   6e03     movwf	0x3, 0             	MOVWF	r0x03
002932   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002934   f004
002936   0e04     movlw	0x4                	MOVLW	0x04
002938   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00293a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00293c   ffe5
00293e   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002940   fff4
002942   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002944   ffe9
002946   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002948   fff3
00294a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00294c   eca4     call	0x3348, 0           	CALL	__gptrput2
00294e   f019
                                           ;	.line	30; src/time.c	return overflow;
002950   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002952   fff3
002954   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002956   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002958   f006
00295a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00295c   f005
00295e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002960   f004
002962   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002964   f003
002966   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002968   f002
00296a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00296c   f001
00296e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002970   f000
002972   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002974   ffd9
002976   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_set	code
                                           _time_set:
                                           ;	.line	21; src/time.c	void time_set(time t, int hours, int minutes, int seconds){
0024ba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0024bc   ffe5
0024be   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0024c0   ffd9
0024c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024c4   ffe5
0024c6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024c8   ffe5
0024ca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024cc   ffe5
0024ce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024d0   ffe5
0024d2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024d4   ffe5
0024d6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024d8   ffe5
0024da   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024dc   ffe5
0024de   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0024e0   ffe5
0024e2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0024e4   ffe5
0024e6   0e02     movlw	0x2                	MOVLW	0x02
0024e8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024ea   f000
0024ec   0e03     movlw	0x3                	MOVLW	0x03
0024ee   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024f0   f001
0024f2   0e04     movlw	0x4                	MOVLW	0x04
0024f4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024f6   f002
0024f8   0e05     movlw	0x5                	MOVLW	0x05
0024fa   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024fc   f003
0024fe   0e06     movlw	0x6                	MOVLW	0x06
002500   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002502   f004
002504   0e07     movlw	0x7                	MOVLW	0x07
002506   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002508   f005
00250a   0e08     movlw	0x8                	MOVLW	0x08
00250c   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00250e   f006
002510   0e09     movlw	0x9                	MOVLW	0x09
002512   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002514   f007
002516   0e0a     movlw	0xa                	MOVLW	0x0a
002518   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
00251a   f008
                                           ;	.line	22; src/time.c	set_hours(t,hours);
00251c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00251e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002520   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002524   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002528   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00252a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00252c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00252e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002530   ec5e     call	0x28bc, 0           	CALL	_set_hours
002532   f014
002534   0e05     movlw	0x5                	MOVLW	0x05
002536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/time.c	set_minutes(t,minutes);
002538   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00253a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00253c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00253e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002540   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002542   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002544   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002548   5000     movf	0, 0, 0             	MOVF	r0x00, W
00254a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00254c   ec96     call	0x272c, 0           	CALL	_set_minutes
00254e   f013
002550   0e05     movlw	0x5                	MOVLW	0x05
002552   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/time.c	set_seconds(t,seconds);
002554   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002556   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002558   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00255a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00255c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00255e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002560   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002564   5000     movf	0, 0, 0             	MOVF	r0x00, W
002566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002568   ec32     call	0x2664, 0           	CALL	_set_seconds
00256a   f013
00256c   0e05     movlw	0x5                	MOVLW	0x05
00256e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002570   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002572   f008
002574   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002576   f007
002578   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00257a   f006
00257c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00257e   f005
002580   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002582   f004
002584   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002586   f003
002588   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00258a   f002
00258c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00258e   f001
002590   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002592   f000
002594   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002596   ffd9
002598   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_create	code
                                           _time_create:
                                           ;	.line	15; src/time.c	time time_create(){
002e1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e20   ffe5
002e22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e24   ffd9
002e26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e28   ffe5
002e2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e2c   ffe5
002e2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e30   ffe5
                                           ;	.line	16; src/time.c	time t = (time)malloc(sizeof (struct time_struct));
002e32   0e06     movlw	0x6                	MOVLW	0x06
002e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e36   ec71     call	0x14e2, 0           	CALL	_malloc
002e38   f00a
002e3a   6e00     movwf	0, 0               	MOVWF	r0x00
002e3c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002e3e   f001
002e40   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002e42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e44   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e46   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e48   6e00     movwf	0, 0               	MOVWF	r0x00
002e4a   0e80     movlw	0x80               	MOVLW	0x80
002e4c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/time.c	time_set(t,0,0,0);
002e4e   0e00     movlw	0                  	MOVLW	0x00
002e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e52   0e00     movlw	0                  	MOVLW	0x00
002e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e56   0e00     movlw	0                  	MOVLW	0x00
002e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5a   0e00     movlw	0                  	MOVLW	0x00
002e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5e   0e00     movlw	0                  	MOVLW	0x00
002e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e62   0e00     movlw	0                  	MOVLW	0x00
002e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e72   ec5d     call	0x24ba, 0           	CALL	_time_set
002e74   f012
002e76   0e09     movlw	0x9                	MOVLW	0x09
002e78   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/time.c	return t;
002e7a   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002e7c   fff4
002e7e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e80   fff3
002e82   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e84   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e86   f002
002e88   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e8a   f001
002e8c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e8e   f000
002e90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e92   ffd9
002e94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002e96   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002e98   6432     cpfsgt	0x32, 0           
002e9a   253a     addwf	0x3a, 0, 0x1       
002e9c   3230     rrcf	0x30, 0x1, 0        
002e9e   3a64     swapf	0x64, 0x1, 0       
002ea0   3025     rrcf	0x25, 0, 0          
002ea2   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002ea4   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
