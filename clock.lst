gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-18-2013  15:24:14
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 15:23:38 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init
                                           	global _init_config
                                           	global _init_time
                                           	global _toggle_second_led
                                           	global _toggle_alarm_led
                                           	global __time
                                           	global __alarm
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_called
                                           	global _config_mode_on
                                           	global _time_update_needed
                                           	global _main
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _LCDInit
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_equals
                                           	extern _display_update
                                           	extern _display_line
                                           	extern _get_input
                                           	extern _read_and_clear
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _init_config_choice_string_1_1	db	LOW(__str_0), HIGH(__str_0), UPPER(__str_0)
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_clock_0	udata
                                           _time_update_needed	res	2
                                           
                                           udata_clock_1	udata
                                           _config_called	res	2
                                           
                                           udata_clock_2	udata
                                           __time	res	3
                                           
                                           udata_clock_3	udata
                                           __alarm	res	3
                                           
                                           udata_clock_4	udata
                                           _alarm_going_off	res	2
                                           
                                           udata_clock_5	udata
                                           _alarm_counter	res	2
                                           
                                           udata_clock_6	udata
                                           _overflow_counter	res	2
                                           
                                           udata_clock_7	udata
                                           _but1_pressed	res	2
                                           
                                           udata_clock_8	udata
                                           _but2_pressed	res	2
                                           
                                           udata_clock_9	udata
                                           _config_mode_on	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   efa4     goto	0x1548              	GOTO	_highPriorityInterruptHandler
00000a   f00a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	81; src/clock.c	init();
00323c   ecf1     call	0x1fe2, 0           	CALL	_init
00323e   f00f
                                           ;	.line	83; src/clock.c	init_config();
003240   ec21     call	0x842, 0            	CALL	_init_config
003242   f004
003244   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	85; src/clock.c	display_update(_time);
003246   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
003248   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00324a   010f     movlb	0xf                	BANKSEL	(__time + 1)
00324c   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
00324e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003250   010f     movlb	0xf                	BANKSEL	__time
003252   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
003254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003256   ecef     call	0x2dde, 0           	CALL	_display_update
003258   f016
00325a   0e03     movlw	0x3                	MOVLW	0x03
00325c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00110_DS_:
00325e   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	87; src/clock.c	if(time_update_needed){
003260   515e     movf	0x5e, 0, 0x1        	MOVF	_time_update_needed, W, B
003262   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
003264   115f     iorwf	0x5f, 0, 0x1       	IORWF	(_time_update_needed + 1), W, B
003266   e011     bz	0x328a                	BZ	_00106_DS_
003268   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	88; src/clock.c	time_update_needed = 0;
00326a   6b5e     clrf	0x5e, 0x1           	CLRF	_time_update_needed, B
00326c   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
00326e   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
003270   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	89; src/clock.c	display_update(_time);
003272   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
003274   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003276   010f     movlb	0xf                	BANKSEL	(__time + 1)
003278   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
00327a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00327c   010f     movlb	0xf                	BANKSEL	__time
00327e   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
003280   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003282   ecef     call	0x2dde, 0           	CALL	_display_update
003284   f016
003286   0e03     movlw	0x3                	MOVLW	0x03
003288   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00106_DS_:
00328a   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	91; src/clock.c	if(config_called){
00328c   5140     movf	0x40, 0, 0x1        	MOVF	_config_called, W, B
00328e   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
003290   1141     iorwf	0x41, 0, 0x1       	IORWF	(_config_called + 1), W, B
003292   e0e5     bz	0x325e                	BZ	_00110_DS_
003294   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	92; src/clock.c	config_called =0;
003296   6b40     clrf	0x40, 0x1           	CLRF	_config_called, B
003298   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
00329a   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
                                           ;	.line	93; src/clock.c	init_config();
00329c   ec21     call	0x842, 0            	CALL	_init_config
00329e   f004
0032a0   d7de     bra	0x325e               	BRA	_00110_DS_
0032a2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	263; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
001548   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00154a   ffe5
00154c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00154e   ffe5
001550   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001552   ffe5
001554   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001556   ffe5
001558   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00155a   ffe5
00155c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00155e   ffe5
001560   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001562   ffe5
001564   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001566   ffe5
001568   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00156a   ffe5
00156c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00156e   ffe5
001570   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001572   ffd9
001574   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001576   ffe5
001578   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00157a   ffe5
                                           ;	.line	265; src/clock.c	if(INTCON3bits.INT1F == 1){
00157c   6a00     clrf	0, 0                	CLRF	r0x00
00157e   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
001580   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001582   5000     movf	0, 0, 0             	MOVF	r0x00, W
001584   0a01     xorlw	0x1                	XORLW	0x01
001586   e114     bnz	0x15b0               	BNZ	_00176_DS_
                                           _00209_DS_:
001588   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	266; src/clock.c	if(!config_mode_on){
00158a   514c     movf	0x4c, 0, 0x1        	MOVF	_config_mode_on, W, B
00158c   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
00158e   114d     iorwf	0x4d, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001590   e106     bnz	0x159e               	BNZ	_00173_DS_
                                           ;	.line	267; src/clock.c	config_called =1;	
001592   0e01     movlw	0x1                	MOVLW	0x01
001594   010e     movlb	0xe                	BANKSEL	_config_called
001596   6f40     movwf	0x40, 0x1          	MOVWF	_config_called, B
001598   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
00159a   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
00159c   d005     bra	0x15a8               	BRA	_00174_DS_
                                           _00173_DS_:
                                           ;	.line	269; src/clock.c	but2_pressed = 1;	
00159e   0e01     movlw	0x1                	MOVLW	0x01
0015a0   010e     movlb	0xe                	BANKSEL	_but2_pressed
0015a2   6f4a     movwf	0x4a, 0x1          	MOVWF	_but2_pressed, B
0015a4   010e     movlb	0xe                	BANKSEL	(_but2_pressed + 1)
0015a6   6b4b     clrf	0x4b, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           _00174_DS_:
                                           ;	.line	271; src/clock.c	if(BUTTON0_IO);
0015a8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0015aa   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0015ac   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	272; src/clock.c	INTCON3bits.INT1F = 0; 
0015ae   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00176_DS_:
                                           ;	.line	276; src/clock.c	if(INTCON3bits.INT3F  == 1){
0015b0   6a00     clrf	0, 0                	CLRF	r0x00
0015b2   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
0015b4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015b8   0a01     xorlw	0x1                	XORLW	0x01
0015ba   e109     bnz	0x15ce               	BNZ	_00178_DS_
                                           ;	.line	277; src/clock.c	but1_pressed = 1;	
0015bc   0e01     movlw	0x1                	MOVLW	0x01
0015be   010e     movlb	0xe                	BANKSEL	_but1_pressed
0015c0   6f48     movwf	0x48, 0x1          	MOVWF	_but1_pressed, B
0015c2   010e     movlb	0xe                	BANKSEL	(_but1_pressed + 1)
0015c4   6b49     clrf	0x49, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	278; src/clock.c	if(BUTTON1_IO);
0015c6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0015c8   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0015ca   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	279; src/clock.c	INTCON3bits.INT3F = 0; 
0015cc   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00178_DS_:
                                           ;	.line	283; src/clock.c	if(INTCONbits.TMR0IF == 1) {
0015ce   6a00     clrf	0, 0                	CLRF	r0x00
0015d0   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0015d2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015d6   0a01     xorlw	0x1                	XORLW	0x01
0015d8   e001     bz	0x15dc                	BZ	_00213_DS_
0015da   d078     bra	0x16cc               	BRA	_00195_DS_
                                           _00213_DS_:
0015dc   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	284; src/clock.c	overflow_counter++;
0015de   2b46     incf	0x46, 0x1, 0x1      	INCF	_overflow_counter, F, B
0015e0   e302     bnc	0x15e6               	BNC	_10172_DS_
0015e2   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
0015e4   2b47     incf	0x47, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10172_DS_:
0015e6   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	285; src/clock.c	if(overflow_counter == CYCLES/2){
0015e8   5146     movf	0x46, 0, 0x1        	MOVF	_overflow_counter, W, B
0015ea   0a2e     xorlw	0x2e               	XORLW	0x2e
0015ec   e103     bnz	0x15f4               	BNZ	_00214_DS_
0015ee   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
0015f0   5147     movf	0x47, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0015f2   e001     bz	0x15f6                	BZ	_00215_DS_
                                           _00214_DS_:
0015f4   d003     bra	0x15fc               	BRA	_00191_DS_
                                           _00215_DS_:
                                           ;	.line	286; src/clock.c	toggle_second_led();
0015f6   ece4     call	0x33c8, 0           	CALL	_toggle_second_led
0015f8   f019
0015fa   d067     bra	0x16ca               	BRA	_00192_DS_
                                           _00191_DS_:
0015fc   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	287; src/clock.c	}else if(overflow_counter == CYCLES){
0015fe   5146     movf	0x46, 0, 0x1        	MOVF	_overflow_counter, W, B
001600   0a5d     xorlw	0x5d               	XORLW	0x5d
001602   e103     bnz	0x160a               	BNZ	_00216_DS_
001604   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
001606   5147     movf	0x47, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
001608   e001     bz	0x160c                	BZ	_00217_DS_
                                           _00216_DS_:
00160a   d05f     bra	0x16ca               	BRA	_00192_DS_
                                           _00217_DS_:
00160c   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	288; src/clock.c	if(time_equals(_alarm,_time)){
00160e   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
001610   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001612   010f     movlb	0xf                	BANKSEL	(__time + 1)
001614   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
001616   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001618   010f     movlb	0xf                	BANKSEL	__time
00161a   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
00161c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161e   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001620   5157     movf	0x57, 0, 0x1        	MOVF	(__alarm + 2), W, B
001622   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001624   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
001626   5156     movf	0x56, 0, 0x1        	MOVF	(__alarm + 1), W, B
001628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00162a   010f     movlb	0xf                	BANKSEL	__alarm
00162c   5155     movf	0x55, 0, 0x1        	MOVF	__alarm, W, B
00162e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001630   ec42     call	0x1884, 0           	CALL	_time_equals
001632   f00c
001634   6e00     movwf	0, 0               	MOVWF	r0x00
001636   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001638   f001
00163a   0e06     movlw	0x6                	MOVLW	0x06
00163c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00163e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001640   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001642   e005     bz	0x164e                	BZ	_00180_DS_
                                           ;	.line	289; src/clock.c	alarm_going_off = 1;
001644   0e01     movlw	0x1                	MOVLW	0x01
001646   010e     movlb	0xe                	BANKSEL	_alarm_going_off
001648   6f42     movwf	0x42, 0x1          	MOVWF	_alarm_going_off, B
00164a   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
00164c   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00180_DS_:
00164e   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	291; src/clock.c	if(alarm_going_off){
001650   5142     movf	0x42, 0, 0x1        	MOVF	_alarm_going_off, W, B
001652   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
001654   1143     iorwf	0x43, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
001656   e017     bz	0x1686                	BZ	_00184_DS_
001658   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	292; src/clock.c	alarm_counter++;
00165a   2b44     incf	0x44, 0x1, 0x1      	INCF	_alarm_counter, F, B
00165c   e302     bnc	0x1662               	BNC	_20173_DS_
00165e   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001660   2b45     incf	0x45, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20173_DS_:
                                           ;	.line	293; src/clock.c	toggle_alarm_led();
001662   ec83     call	0x3306, 0           	CALL	_toggle_alarm_led
001664   f019
001666   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	294; src/clock.c	if(alarm_counter==30){
001668   5144     movf	0x44, 0, 0x1        	MOVF	_alarm_counter, W, B
00166a   0a1e     xorlw	0x1e               	XORLW	0x1e
00166c   e103     bnz	0x1674               	BNZ	_00218_DS_
00166e   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001670   5145     movf	0x45, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001672   e001     bz	0x1676                	BZ	_00219_DS_
                                           _00218_DS_:
001674   d008     bra	0x1686               	BRA	_00184_DS_
                                           _00219_DS_:
001676   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	295; src/clock.c	alarm_going_off =0;
001678   6b42     clrf	0x42, 0x1           	CLRF	_alarm_going_off, B
00167a   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
00167c   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
00167e   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	296; src/clock.c	alarm_counter = 0;
001680   6b44     clrf	0x44, 0x1           	CLRF	_alarm_counter, B
001682   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
001684   6b45     clrf	0x45, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00184_DS_:
001686   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	299; src/clock.c	overflow_counter = 0;
001688   6b46     clrf	0x46, 0x1           	CLRF	_overflow_counter, B
00168a   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
00168c   6b47     clrf	0x47, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	300; src/clock.c	toggle_second_led();
00168e   ece4     call	0x33c8, 0           	CALL	_toggle_second_led
001690   f019
001692   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	301; src/clock.c	add_second(_time);
001694   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
001696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001698   010f     movlb	0xf                	BANKSEL	(__time + 1)
00169a   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
00169c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169e   010f     movlb	0xf                	BANKSEL	__time
0016a0   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
0016a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a4   ec8a     call	0x2b14, 0           	CALL	_add_second
0016a6   f015
0016a8   0e03     movlw	0x3                	MOVLW	0x03
0016aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016ac   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	302; src/clock.c	if(!config_called && !config_mode_on){
0016ae   5140     movf	0x40, 0, 0x1        	MOVF	_config_called, W, B
0016b0   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
0016b2   1141     iorwf	0x41, 0, 0x1       	IORWF	(_config_called + 1), W, B
0016b4   e10a     bnz	0x16ca               	BNZ	_00192_DS_
0016b6   010e     movlb	0xe                	BANKSEL	_config_mode_on
0016b8   514c     movf	0x4c, 0, 0x1        	MOVF	_config_mode_on, W, B
0016ba   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
0016bc   114d     iorwf	0x4d, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
0016be   e105     bnz	0x16ca               	BNZ	_00192_DS_
                                           ;	.line	303; src/clock.c	time_update_needed = 1;
0016c0   0e01     movlw	0x1                	MOVLW	0x01
0016c2   010f     movlb	0xf                	BANKSEL	_time_update_needed
0016c4   6f5e     movwf	0x5e, 0x1          	MOVWF	_time_update_needed, B
0016c6   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
0016c8   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
                                           _00192_DS_:
                                           ;	.line	306; src/clock.c	INTCONbits.TMR0IF = 0;
0016ca   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00195_DS_:
0016cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0016ce   f001
0016d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016d2   f000
0016d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016d6   ffd9
0016d8   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0016da   fffb
0016dc   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0016de   fffa
0016e0   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0016e2   ffea
0016e4   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0016e6   ffe9
0016e8   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0016ea   fff4
0016ec   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0016ee   fff3
0016f0   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0016f2   ffe0
0016f4   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0016f6   ffd8
0016f8   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0016fa   ffe8
0016fc   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_alarm_led	code
                                           _toggle_alarm_led:
                                           ;	.line	252; src/clock.c	void toggle_alarm_led(void){
003306   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003308   ffe5
00330a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00330c   ffd9
00330e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003310   ffe5
                                           ;	.line	253; src/clock.c	LED1_IO^=1;
003312   6a00     clrf	0, 0                	CLRF	r0x00
003314   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
003316   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003318   0e01     movlw	0x1                	MOVLW	0x01
00331a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00331c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00331e   0b01     andlw	0x1                	ANDLW	0x01
003320   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003322   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003324   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003326   0bfd     andlw	0xfd               	ANDLW	0xfd
003328   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00332a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	254; src/clock.c	LED2_IO^=1;
00332c   6a00     clrf	0, 0                	CLRF	r0x00
00332e   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
003330   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003332   0e01     movlw	0x1                	MOVLW	0x01
003334   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003336   5000     movf	0, 0, 0             	MOVF	r0x00, W
003338   0b01     andlw	0x1                	ANDLW	0x01
00333a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00333c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00333e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003340   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003342   0bfb     andlw	0xfb               	ANDLW	0xfb
003344   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003346   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
003348   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00334a   f000
00334c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00334e   ffd9
003350   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_second_led	code
                                           _toggle_second_led:
                                           ;	.line	245; src/clock.c	void toggle_second_led(void){
0033c8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0033ca   ffe5
0033cc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0033ce   ffd9
0033d0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0033d2   ffe5
                                           ;	.line	246; src/clock.c	LED0_IO^=1;
0033d4   6a00     clrf	0, 0                	CLRF	r0x00
0033d6   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0033d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0033da   0e01     movlw	0x1                	MOVLW	0x01
0033dc   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0033de   5000     movf	0, 0, 0             	MOVF	r0x00, W
0033e0   0b01     andlw	0x1                	ANDLW	0x01
0033e2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0033e4   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0033e6   0bfe     andlw	0xfe               	ANDLW	0xfe
0033e8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0033ea   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0033ec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0033ee   f000
0033f0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0033f2   ffd9
0033f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	234; src/clock.c	void init_time(time t, char *mode){ 
000fc6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000fc8   ffe5
000fca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fcc   ffd9
000fce   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fd0   ffe5
000fd2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000fd4   ffe5
000fd6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000fd8   ffe5
000fda   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000fdc   ffe5
000fde   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000fe0   ffe5
000fe2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000fe4   ffe5
000fe6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000fe8   ffe5
000fea   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000fec   ffe5
000fee   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ff0   ffe5
000ff2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000ff4   ffe5
000ff6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000ff8   ffe5
000ffa   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000ffc   ffe5
000ffe   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001000   ffe5
001002   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001004   ffe5
001006   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001008   ffe5
00100a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00100c   ffe5
00100e   0e02     movlw	0x2                	MOVLW	0x02
001010   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001012   f000
001014   0e03     movlw	0x3                	MOVLW	0x03
001016   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001018   f001
00101a   0e04     movlw	0x4                	MOVLW	0x04
00101c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00101e   f002
001020   0e05     movlw	0x5                	MOVLW	0x05
001022   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001024   f003
001026   0e06     movlw	0x6                	MOVLW	0x06
001028   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00102a   f004
00102c   0e07     movlw	0x7                	MOVLW	0x07
00102e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001030   f005
                                           ;	.line	236; src/clock.c	h = get_input(24, "Hours:",   mode, &but1_pressed, &but2_pressed);
001032   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
001034   6e07     movwf	0x7, 0             	MOVWF	r0x07
001036   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
001038   6e06     movwf	0x6, 0             	MOVWF	r0x06
00103a   0e80     movlw	0x80               	MOVLW	0x80
00103c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00103e   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
001040   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001042   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
001044   6e09     movwf	0x9, 0             	MOVWF	r0x09
001046   0e80     movlw	0x80               	MOVLW	0x80
001048   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00104a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00104c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00104e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001050   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001052   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001054   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001056   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001058   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00105c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001060   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001062   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001066   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00106c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106e   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
001070   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001072   0e20     movlw	0x20               	MOVLW	HIGH(__str_6)
001074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001076   0ed0     movlw	0xd0               	MOVLW	LOW(__str_6)
001078   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107a   0e00     movlw	0                  	MOVLW	0x00
00107c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107e   0e18     movlw	0x18               	MOVLW	0x18
001080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001082   ecdf     call	0x11be, 0           	CALL	_get_input
001084   f008
001086   6e06     movwf	0x6, 0             	MOVWF	r0x06
001088   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00108a   f007
00108c   0e0e     movlw	0xe                	MOVLW	0x0e
00108e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	237; src/clock.c	m = get_input(60, "Minutes:", mode, &but1_pressed, &but2_pressed);
001090   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
001092   6e09     movwf	0x9, 0             	MOVWF	r0x09
001094   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
001096   6e08     movwf	0x8, 0             	MOVWF	r0x08
001098   0e80     movlw	0x80               	MOVLW	0x80
00109a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00109c   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
00109e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010a0   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
0010a2   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0010a4   0e80     movlw	0x80               	MOVLW	0x80
0010a6   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0010a8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0010aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ac   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0010ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0010b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010bc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0010be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010cc   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0010ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d0   0e20     movlw	0x20               	MOVLW	HIGH(__str_7)
0010d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d4   0ed8     movlw	0xd8               	MOVLW	LOW(__str_7)
0010d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d8   0e00     movlw	0                  	MOVLW	0x00
0010da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010dc   0e3c     movlw	0x3c               	MOVLW	0x3c
0010de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e0   ecdf     call	0x11be, 0           	CALL	_get_input
0010e2   f008
0010e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010e6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0010e8   f009
0010ea   0e0e     movlw	0xe                	MOVLW	0x0e
0010ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	238; src/clock.c	s = get_input(60, "Seconds:", mode, &but1_pressed, &but2_pressed);
0010ee   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
0010f0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0010f2   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
0010f4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0010f6   0e80     movlw	0x80               	MOVLW	0x80
0010f8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010fa   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
0010fc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0010fe   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
001100   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001102   0e80     movlw	0x80               	MOVLW	0x80
001104   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001106   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00110c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001112   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001116   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00111c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001122   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001126   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001128   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112a   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
00112c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112e   0e20     movlw	0x20               	MOVLW	HIGH(__str_8)
001130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001132   0ee2     movlw	0xe2               	MOVLW	LOW(__str_8)
001134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001136   0e00     movlw	0                  	MOVLW	0x00
001138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113a   0e3c     movlw	0x3c               	MOVLW	0x3c
00113c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113e   ecdf     call	0x11be, 0           	CALL	_get_input
001140   f008
001142   6e03     movwf	0x3, 0             	MOVWF	r0x03
001144   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001146   f004
001148   0e0e     movlw	0xe                	MOVLW	0x0e
00114a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	239; src/clock.c	time_set(t,h,m,s);
00114c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00114e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001150   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001152   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001154   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001158   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00115a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00115e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001160   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001164   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001168   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00116a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00116e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001170   eccf     call	0x259e, 0           	CALL	_time_set
001172   f012
001174   0e09     movlw	0x9                	MOVLW	0x09
001176   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001178   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00117a   f00f
00117c   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00117e   f00e
001180   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001182   f00d
001184   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001186   f00c
001188   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00118a   f00b
00118c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00118e   f00a
001190   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001192   f009
001194   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001196   f008
001198   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00119a   f007
00119c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00119e   f006
0011a0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0011a2   f005
0011a4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0011a6   f004
0011a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0011aa   f003
0011ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0011ae   f002
0011b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011b2   f001
0011b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011b6   f000
0011b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011ba   ffd9
0011bc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	175; src/clock.c	void init_config(void){
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
                                           ;	.line	177; src/clock.c	int choice = CONFIG_MODE_ALARM;
00085e   6a00     clrf	0, 0                	CLRF	r0x00
000860   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	179; src/clock.c	config_mode_on = 1;
000862   0e01     movlw	0x1                	MOVLW	0x01
000864   010e     movlb	0xe                	BANKSEL	_config_mode_on
000866   6f4c     movwf	0x4c, 0x1          	MOVWF	_config_mode_on, B
000868   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
00086a   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
00086c   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	180; src/clock.c	display_line(CM_STRING,choice_string);
00086e   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000874   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000878   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
00087a   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00087c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087e   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000882   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
000884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000886   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
000888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088a   ec8b     call	0x2f16, 0           	CALL	_display_line
00088c   f017
00088e   0e06     movlw	0x6                	MOVLW	0x06
000890   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00135_DS_:
                                           ;	.line	182; src/clock.c	if(read_and_clear(&but2_pressed)){
000892   0e0e     movlw	0xe                	MOVLW	HIGH(_but2_pressed)
000894   6e03     movwf	0x3, 0             	MOVWF	r0x03
000896   0e4a     movlw	0x4a               	MOVLW	LOW(_but2_pressed)
000898   6e02     movwf	0x2, 0             	MOVWF	r0x02
00089a   0e80     movlw	0x80               	MOVLW	0x80
00089c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00089e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008aa   ec5e     call	0x30bc, 0           	CALL	_read_and_clear
0008ac   f018
0008ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008b0   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0008b2   f003
0008b4   0e03     movlw	0x3                	MOVLW	0x03
0008b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008ba   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0008bc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0008be   d064     bra	0x988                	BRA	_00127_DS_
                                           ;	.line	184; src/clock.c	switch(choice){
0008c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008c2   e102     bnz	0x8c8                	BNZ	_00147_DS_
0008c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008c6   e006     bz	0x8d4                 	BZ	_00122_DS_
                                           _00147_DS_:
0008c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ca   0a01     xorlw	0x1                	XORLW	0x01
0008cc   e102     bnz	0x8d2                	BNZ	_00149_DS_
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   e02a     bz	0x926                 	BZ	_00123_DS_
                                           _00149_DS_:
0008d2   d053     bra	0x97a                	BRA	_00124_DS_
                                           _00122_DS_:
                                           ;	.line	186; src/clock.c	LCDErase();
0008d4   ec42     call	0x2c84, 0           	CALL	_LCDErase
0008d6   f016
                                           ;	.line	187; src/clock.c	init_time(_alarm, SM_ALARM_STRING);			
0008d8   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
0008da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008dc   0e20     movlw	0x20               	MOVLW	HIGH(__str_2)
0008de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e0   0e9a     movlw	0x9a               	MOVLW	LOW(__str_2)
0008e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e4   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
0008e6   5157     movf	0x57, 0, 0x1        	MOVF	(__alarm + 2), W, B
0008e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ea   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
0008ec   5156     movf	0x56, 0, 0x1        	MOVF	(__alarm + 1), W, B
0008ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f0   010f     movlb	0xf                	BANKSEL	__alarm
0008f2   5155     movf	0x55, 0, 0x1        	MOVF	__alarm, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ece3     call	0xfc6, 0            	CALL	_init_time
0008f8   f007
0008fa   0e06     movlw	0x6                	MOVLW	0x06
0008fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008fe   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	188; src/clock.c	display_line(CM_STRING,choice_string);
000900   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000904   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000906   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000908   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00090a   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
00090c   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00090e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000910   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000914   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
000916   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000918   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
00091a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091c   ec8b     call	0x2f16, 0           	CALL	_display_line
00091e   f017
000920   0e06     movlw	0x6                	MOVLW	0x06
000922   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	189; src/clock.c	break;
000924   d031     bra	0x988                	BRA	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	191; src/clock.c	LCDErase();
000926   ec42     call	0x2c84, 0           	CALL	_LCDErase
000928   f016
                                           ;	.line	192; src/clock.c	init_time(_time, SM_CLOCK_STRING);
00092a   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
00092c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092e   0e20     movlw	0x20               	MOVLW	HIGH(__str_3)
000930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000932   0ea6     movlw	0xa6               	MOVLW	LOW(__str_3)
000934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000936   010f     movlb	0xf                	BANKSEL	(__time + 2)
000938   5154     movf	0x54, 0, 0x1        	MOVF	(__time + 2), W, B
00093a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093c   010f     movlb	0xf                	BANKSEL	(__time + 1)
00093e   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 1), W, B
000940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000942   010f     movlb	0xf                	BANKSEL	__time
000944   5152     movf	0x52, 0, 0x1        	MOVF	__time, W, B
000946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000948   ece3     call	0xfc6, 0            	CALL	_init_time
00094a   f007
00094c   0e06     movlw	0x6                	MOVLW	0x06
00094e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	193; src/clock.c	T0CONbits.TMR0ON = 1;			
000950   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
000952   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	194; src/clock.c	display_line(CM_STRING,choice_string);
000954   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000958   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
00095a   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
00095c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095e   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000960   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000962   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000964   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000968   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
00096a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00096c   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
00096e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000970   ec8b     call	0x2f16, 0           	CALL	_display_line
000972   f017
000974   0e06     movlw	0x6                	MOVLW	0x06
000976   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	195; src/clock.c	break;
000978   d007     bra	0x988                	BRA	_00127_DS_
                                           _00124_DS_:
                                           ;	.line	197; src/clock.c	LCDErase();
00097a   ec42     call	0x2c84, 0           	CALL	_LCDErase
00097c   f016
00097e   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	198; src/clock.c	config_mode_on = 0;
000980   6b4c     clrf	0x4c, 0x1           	CLRF	_config_mode_on, B
000982   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
000984   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
                                           ;	.line	199; src/clock.c	return;
000986   d0af     bra	0xae6                	BRA	_00137_DS_
                                           _00127_DS_:
                                           ;	.line	202; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000988   0e0e     movlw	0xe                	MOVLW	HIGH(_but1_pressed)
00098a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00098c   0e48     movlw	0x48               	MOVLW	LOW(_but1_pressed)
00098e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000990   0e80     movlw	0x80               	MOVLW	0x80
000992   6e04     movwf	0x4, 0             	MOVWF	r0x04
000994   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000996   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000998   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00099a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00099c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00099e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009a0   ec5e     call	0x30bc, 0           	CALL	_read_and_clear
0009a2   f018
0009a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009a6   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0009a8   f003
0009aa   0e03     movlw	0x3                	MOVLW	0x03
0009ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0009ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009b0   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0009b2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0009b4   d76e     bra	0x892                	BRA	_00135_DS_
                                           ;	.line	204; src/clock.c	switch(choice){
0009b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009b8   0f80     addlw	0x80               	ADDLW	0x80
0009ba   0f81     addlw	0x81               	ADDLW	0x81
0009bc   e102     bnz	0x9c2                	BNZ	_00150_DS_
0009be   0eff     movlw	0xff               	MOVLW	0xff
0009c0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00150_DS_:
0009c2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0009c4   d766     bra	0x892                	BRA	_00135_DS_
0009c6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c8   0f80     addlw	0x80               	ADDLW	0x80
0009ca   0f80     addlw	0x80               	ADDLW	0x80
0009cc   e102     bnz	0x9d2                	BNZ	_00151_DS_
0009ce   0e02     movlw	0x2                	MOVLW	0x02
0009d0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00151_DS_:
0009d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d4   d75e     bra	0x892                	BRA	_00135_DS_
0009d6   2800     incf	0, 0, 0             	INCF	r0x00, W
0009d8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009da   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0009dc   ffe5
0009de   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0009e0   ffe5
0009e2   6a06     clrf	0x6, 0              	CLRF	r0x06
0009e4   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
0009e6   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009e8   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0009ea   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009ec   0bfc     andlw	0xfc               	ANDLW	0xfc
0009ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0009f0   0e00     movlw	0                  	MOVLW	UPPER(_00152_DS_)
0009f2   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0009f4   0e0a     movlw	0xa                	MOVLW	HIGH(_00152_DS_)
0009f6   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0009f8   0e10     movlw	0x10               	MOVLW	LOW(_00152_DS_)
0009fa   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0009fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009fe   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000a00   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a02   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000a04   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a06   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a08   f006
000a0a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a0c   f005
000a0e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00152_DS_:
000a10   ef0e     goto	0xa1c               	GOTO	_00128_DS_
000a12   f005
000a14   ef2f     goto	0xa5e               	GOTO	_00129_DS_
000a16   f005
000a18   ef51     goto	0xaa2               	GOTO	_00130_DS_
000a1a   f005
                                           _00128_DS_:
                                           ;	.line	207; src/clock.c	LCDErase();
000a1c   ec42     call	0x2c84, 0           	CALL	_LCDErase
000a1e   f016
                                           ;	.line	208; src/clock.c	choice = CONFIG_MODE_ALARM;
000a20   6a00     clrf	0, 0                	CLRF	r0x00
000a22   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	209; src/clock.c	choice_string = CM_ALARM_STRING;
000a24   0e80     movlw	0x80               	MOVLW	LOW(__str_0)
000a26   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a28   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a2a   0e20     movlw	0x20               	MOVLW	HIGH(__str_0)
000a2c   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a2e   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a30   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000a32   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a34   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a36   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	210; src/clock.c	display_line(CM_STRING,choice_string);
000a38   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3c   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a3e   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a44   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a48   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4c   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
000a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a50   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
000a52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a54   ec8b     call	0x2f16, 0           	CALL	_display_line
000a56   f017
000a58   0e06     movlw	0x6                	MOVLW	0x06
000a5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	211; src/clock.c	break;
000a5c   d71a     bra	0x892                	BRA	_00135_DS_
                                           _00129_DS_:
                                           ;	.line	214; src/clock.c	LCDErase();
000a5e   ec42     call	0x2c84, 0           	CALL	_LCDErase
000a60   f016
                                           ;	.line	215; src/clock.c	choice = CONFIG_MODE_CLOCK;
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   6e00     movwf	0, 0               	MOVWF	r0x00
000a66   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	216; src/clock.c	choice_string = CM_CLOCK_STRING;
000a68   0eb2     movlw	0xb2               	MOVLW	LOW(__str_4)
000a6a   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a6c   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a6e   0e20     movlw	0x20               	MOVLW	HIGH(__str_4)
000a70   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a72   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a74   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a76   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a78   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a7a   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	217; src/clock.c	display_line(CM_STRING,choice_string);
000a7c   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a80   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a82   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a86   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a88   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a8c   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000a8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a90   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
000a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a98   ec8b     call	0x2f16, 0           	CALL	_display_line
000a9a   f017
000a9c   0e06     movlw	0x6                	MOVLW	0x06
000a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	218; src/clock.c	break;
000aa0   d6f8     bra	0x892                	BRA	_00135_DS_
                                           _00130_DS_:
                                           ;	.line	221; src/clock.c	LCDErase();
000aa2   ec42     call	0x2c84, 0           	CALL	_LCDErase
000aa4   f016
                                           ;	.line	222; src/clock.c	choice =CONFIG_MODE_QUIT;
000aa6   0eff     movlw	0xff               	MOVLW	0xff
000aa8   6e00     movwf	0, 0               	MOVWF	r0x00
000aaa   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	223; src/clock.c	choice_string = CM_QUIT_STRING;
000aac   0ebe     movlw	0xbe               	MOVLW	LOW(__str_5)
000aae   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000ab0   6f4e     movwf	0x4e, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000ab2   0e20     movlw	0x20               	MOVLW	HIGH(__str_5)
000ab4   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000ab6   6f4f     movwf	0x4f, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000ab8   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000aba   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000abc   6f50     movwf	0x50, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000abe   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	224; src/clock.c	display_line(CM_STRING,choice_string);
000ac0   5150     movf	0x50, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac4   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000ac6   514f     movf	0x4f, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000acc   514e     movf	0x4e, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad0   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   0e20     movlw	0x20               	MOVLW	HIGH(__str_1)
000ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad8   0e8c     movlw	0x8c               	MOVLW	LOW(__str_1)
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   ec8b     call	0x2f16, 0           	CALL	_display_line
000ade   f017
000ae0   0e06     movlw	0x6                	MOVLW	0x06
000ae2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	226; src/clock.c	}
000ae4   d6d6     bra	0x892                	BRA	_00135_DS_
                                           _00137_DS_:
000ae6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ae8   f004
000aea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000aec   f003
000aee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000af0   f002
000af2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000af4   f001
000af6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000af8   f000
000afa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000afc   ffd9
000afe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	101; src/clock.c	void init(void){
001fe2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001fe4   ffe5
001fe6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001fe8   ffd9
                                           ;	.line	103; src/clock.c	LCDInit();
001fea   ecb5     call	0xd6a, 0            	CALL	_LCDInit
001fec   f006
                                           ;	.line	106; src/clock.c	_time = time_create();
001fee   ec1a     call	0x3034, 0           	CALL	_time_create
001ff0   f018
001ff2   010f     movlb	0xf                	BANKSEL	__time
001ff4   6f52     movwf	0x52, 0x1          	MOVWF	__time, B
001ff6   cff3     movff	0xff3, 0xf53       	MOVFF	PRODL, (__time + 1)
001ff8   ff53
001ffa   cff4     movff	0xff4, 0xf54       	MOVFF	PRODH, (__time + 2)
001ffc   ff54
                                           ;	.line	107; src/clock.c	_alarm = time_create();
001ffe   ec1a     call	0x3034, 0           	CALL	_time_create
002000   f018
002002   010f     movlb	0xf                	BANKSEL	__alarm
002004   6f55     movwf	0x55, 0x1          	MOVWF	__alarm, B
002006   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (__alarm + 1)
002008   ff56
00200a   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (__alarm + 2)
00200c   ff57
                                           ;	.line	110; src/clock.c	BUTTON0_TRIS = 1;
00200e   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	111; src/clock.c	BUTTON1_TRIS = 1;
002010   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	114; src/clock.c	INTCONbits.GIE = 1;
002012   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	115; src/clock.c	INTCONbits.PEIE = 1;
002014   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	116; src/clock.c	RCONbits.IPEN = 1; 
002016   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	119; src/clock.c	T0CONbits.TMR0ON = 0;
002018   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	122; src/clock.c	TMR0H = 0x00000000;
00201a   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	123; src/clock.c	TMR0L = 0x00000000;
00201c   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	126; src/clock.c	T0CONbits.T08BIT = 0;
00201e   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	129; src/clock.c	T0CONbits.T0CS = 0;
002020   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	132; src/clock.c	T0CONbits.PSA = 1;
002022   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	135; src/clock.c	INTCONbits.TMR0IE = 1;
002024   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	138; src/clock.c	INTCON3bits.INT1IE = 1;
002026   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	139; src/clock.c	INTCON3bits.INT3IE = 1;
002028   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	142; src/clock.c	LED0_TRIS = 0;
00202a   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	143; src/clock.c	LED1_TRIS = 0;   
00202c   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	144; src/clock.c	LED2_TRIS = 0;
00202e   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	145; src/clock.c	LED3_TRIS = 0;
002030   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	148; src/clock.c	LED0_IO = 0; 
002032   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	149; src/clock.c	LED1_IO = 0;
002034   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	150; src/clock.c	LED2_IO = 0;
002036   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	151; src/clock.c	LED3_IO = 1;
002038   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
00203a   010e     movlb	0xe                	BANKSEL	_alarm_going_off
                                           ;	.line	155; src/clock.c	alarm_going_off = 0;
00203c   6b42     clrf	0x42, 0x1           	CLRF	_alarm_going_off, B
00203e   010e     movlb	0xe                	BANKSEL	(_alarm_going_off + 1)
002040   6b43     clrf	0x43, 0x1           	CLRF	(_alarm_going_off + 1), B
002042   010e     movlb	0xe                	BANKSEL	_alarm_counter
                                           ;	.line	158; src/clock.c	alarm_counter = 0;
002044   6b44     clrf	0x44, 0x1           	CLRF	_alarm_counter, B
002046   010e     movlb	0xe                	BANKSEL	(_alarm_counter + 1)
002048   6b45     clrf	0x45, 0x1           	CLRF	(_alarm_counter + 1), B
00204a   010e     movlb	0xe                	BANKSEL	_overflow_counter
                                           ;	.line	159; src/clock.c	overflow_counter = 0;
00204c   6b46     clrf	0x46, 0x1           	CLRF	_overflow_counter, B
00204e   010e     movlb	0xe                	BANKSEL	(_overflow_counter + 1)
002050   6b47     clrf	0x47, 0x1           	CLRF	(_overflow_counter + 1), B
002052   010e     movlb	0xe                	BANKSEL	_but1_pressed
                                           ;	.line	162; src/clock.c	but1_pressed = 0;
002054   6b48     clrf	0x48, 0x1           	CLRF	_but1_pressed, B
002056   010e     movlb	0xe                	BANKSEL	(_but1_pressed + 1)
002058   6b49     clrf	0x49, 0x1           	CLRF	(_but1_pressed + 1), B
00205a   010e     movlb	0xe                	BANKSEL	_but2_pressed
                                           ;	.line	163; src/clock.c	but2_pressed = 0;
00205c   6b4a     clrf	0x4a, 0x1           	CLRF	_but2_pressed, B
00205e   010e     movlb	0xe                	BANKSEL	(_but2_pressed + 1)
002060   6b4b     clrf	0x4b, 0x1           	CLRF	(_but2_pressed + 1), B
002062   010e     movlb	0xe                	BANKSEL	_config_called
                                           ;	.line	166; src/clock.c	config_called = 0;
002064   6b40     clrf	0x40, 0x1           	CLRF	_config_called, B
002066   010e     movlb	0xe                	BANKSEL	(_config_called + 1)
002068   6b41     clrf	0x41, 0x1           	CLRF	(_config_called + 1), B
00206a   010e     movlb	0xe                	BANKSEL	_config_mode_on
                                           ;	.line	167; src/clock.c	config_mode_on = 0;
00206c   6b4c     clrf	0x4c, 0x1           	CLRF	_config_mode_on, B
00206e   010e     movlb	0xe                	BANKSEL	(_config_mode_on + 1)
002070   6b4d     clrf	0x4d, 0x1           	CLRF	(_config_mode_on + 1), B
002072   010f     movlb	0xf                	BANKSEL	_time_update_needed
                                           ;	.line	168; src/clock.c	time_update_needed =0;
002074   6b5e     clrf	0x5e, 0x1           	CLRF	_time_update_needed, B
002076   010f     movlb	0xf                	BANKSEL	(_time_update_needed + 1)
002078   6b5f     clrf	0x5f, 0x1           	CLRF	(_time_update_needed + 1), B
00207a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00207c   ffd9
00207e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002080   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
002082   2074     addwfc	0x74, 0, 0        
002084   6c61     negf	0x61, 0             
002086   7261     btg	0x61, 0x1, 0         
002088   3f6d     incfsz	0x6d, 0x1, 0x1    
00208a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
00208c   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x3a
00208e   6f6f     movwf	0x6f, 0x1          
002090   6573     cpfsgt	0x73, 0x1         
002092   6d20     negf	0x20, 0x1           
002094   646f     cpfsgt	0x6f, 0           
002096   3a65     swapf	0x65, 0x1, 0       
002098   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_2:
00209a   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x00
00209c   2074     addwfc	0x74, 0, 0        
00209e   6c61     negf	0x61, 0             
0020a0   7261     btg	0x61, 0x1, 0         
0020a2   3a6d     swapf	0x6d, 0x1, 0       
0020a4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0020a6   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x00
0020a8   2074     addwfc	0x74, 0, 0        
0020aa   6c63     negf	0x63, 0             
0020ac   636f     cpfseq	0x6f, 0x1         
0020ae   3a6b     swapf	0x6b, 0x1, 0       
0020b0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
0020b2   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
0020b4   2074     addwfc	0x74, 0, 0        
0020b6   6c63     negf	0x63, 0             
0020b8   636f     cpfseq	0x6f, 0x1         
0020ba   3f6b     incfsz	0x6b, 0x1, 0x1    
0020bc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
0020be   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
0020c0   7469     btg	0x69, 0x2, 0         
0020c2   6320     cpfseq	0x20, 0x1         
0020c4   6e6f     movwf	0x6f, 0            
0020c6   6966     setf	0x66, 0x1           
0020c8   2067     addwfc	0x67, 0, 0        
0020ca   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
0020cc   6564     cpfsgt	0x64, 0x1         
0020ce   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_6:
0020d0   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
0020d2   7275     btg	0x75, 0x1, 0         
0020d4   3a73     swapf	0x73, 0x1, 0       
0020d6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
0020d8   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x00
0020da   756e     btg	0x6e, 0x2, 0x1       
0020dc   6574     cpfsgt	0x74, 0x1         
0020de   3a73     swapf	0x73, 0x1, 0       
0020e0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
0020e2   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x00
0020e4   6f63     movwf	0x63, 0x1          
0020e6   646e     cpfsgt	0x6e, 0           
0020e8   3a73     swapf	0x73, 0x1, 0       
0020ea   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2052 (0x0804) bytes ( 1.57%)
                                           ;           	 1026 (0x0402) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 15:22:01 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002c84   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c86   ffe5
002c88   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c8a   ffd9
002c8c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c8e   ffe5
002c90   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c92   ffe5
002c94   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002c96   ffe5
002c98   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002c9a   ffe5
002c9c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002c9e   ffe5
002ca0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002ca2   ffe5
002ca4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002ca6   ffe5
002ca8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002caa   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002cac   0e01     movlw	0x1                	MOVLW	0x01
002cae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cb0   0e00     movlw	0                  	MOVLW	0x00
002cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cb4   ec52     call	0x32a4, 0           	CALL	_LCDWrite
002cb6   f019
002cb8   0e02     movlw	0x2                	MOVLW	0x02
002cba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002cbc   0e48     movlw	0x48               	MOVLW	0x48
002cbe   6e00     movwf	0, 0               	MOVWF	r0x00
002cc0   0e0d     movlw	0xd                	MOVLW	0x0d
002cc2   6e01     movwf	0x1, 0             	MOVWF	r0x01
002cc4   6a02     clrf	0x2, 0              	CLRF	r0x02
002cc6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002cc8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002cca   f004
002ccc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002cce   f005
002cd0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002cd2   f006
002cd4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002cd6   f007
002cd8   0eff     movlw	0xff               	MOVLW	0xff
002cda   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002cdc   0eff     movlw	0xff               	MOVLW	0xff
002cde   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002ce0   0eff     movlw	0xff               	MOVLW	0xff
002ce2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002ce4   0eff     movlw	0xff               	MOVLW	0xff
002ce6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002ce8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cea   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002cec   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002cee   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002cf0   e1eb     bnz	0x2cc8               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002cf2   0e00     movlw	0                  	MOVLW	0x00
002cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf6   0e20     movlw	0x20               	MOVLW	0x20
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   0e20     movlw	0x20               	MOVLW	0x20
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d02   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d06   ec3f     call	0x267e, 0           	CALL	_memset
002d08   f013
002d0a   0e05     movlw	0x5                	MOVLW	0x05
002d0c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002d0e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002d10   f007
002d12   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002d14   f006
002d16   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002d18   f005
002d1a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002d1c   f004
002d1e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002d20   f003
002d22   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002d24   f002
002d26   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d28   f001
002d2a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d2c   f000
002d2e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d30   ffd9
002d32   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000b00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000b02   ffe5
000b04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000b06   ffd9
000b08   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b0a   ffe5
000b0c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000b0e   ffe5
000b10   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000b12   ffe5
000b14   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000b16   ffe5
000b18   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000b1a   ffe5
000b1c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000b1e   ffe5
000b20   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000b22   ffe5
000b24   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000b26   ffe5
000b28   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000b2a   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000b2c   0e02     movlw	0x2                	MOVLW	0x02
000b2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b30   0e00     movlw	0                  	MOVLW	0x00
000b32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b34   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000b36   f019
000b38   0e02     movlw	0x2                	MOVLW	0x02
000b3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000b3c   0e48     movlw	0x48               	MOVLW	0x48
000b3e   6e00     movwf	0, 0               	MOVWF	r0x00
000b40   0e0d     movlw	0xd                	MOVLW	0x0d
000b42   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b44   6a02     clrf	0x2, 0              	CLRF	r0x02
000b46   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000b48   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b4a   f004
000b4c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b4e   f005
000b50   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b52   f006
000b54   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b56   f007
000b58   0eff     movlw	0xff               	MOVLW	0xff
000b5a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b5c   0eff     movlw	0xff               	MOVLW	0xff
000b5e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b60   0eff     movlw	0xff               	MOVLW	0xff
000b62   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b64   0eff     movlw	0xff               	MOVLW	0xff
000b66   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b68   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b6a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b6c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b6e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b70   e1eb     bnz	0xb48                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000b72   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
000b74   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b76   f001
000b78   6a02     clrf	0x2, 0              	CLRF	r0x02
000b7a   0e00     movlw	0                  	MOVLW	0x00
000b7c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b7e   e102     bnz	0xb84                	BNZ	_00297_DS_
000b80   0e10     movlw	0x10               	MOVLW	0x10
000b82   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
000b84   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000b86   d057     bra	0xc36                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000b88   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b8a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b8e   6a02     clrf	0x2, 0              	CLRF	r0x02
000b90   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b92   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b94   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b96   ffe9
000b98   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000b9a   ffea
000b9c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000b9e   f001
000ba0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba2   e119     bnz	0xbd6                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000ba4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000ba6   f001
                                           _00253_DS_:
000ba8   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000baa   f002
000bac   6a03     clrf	0x3, 0              	CLRF	r0x03
000bae   0e00     movlw	0                  	MOVLW	0x00
000bb0   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bb2   e102     bnz	0xbb8                	BNZ	_00298_DS_
000bb4   0e10     movlw	0x10               	MOVLW	0x10
000bb6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
000bb8   e20e     bc	0xbd6                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
000bba   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000bbc   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000bbe   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bc0   6a03     clrf	0x3, 0              	CLRF	r0x03
000bc2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000bc4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bc6   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000bc8   ffe9
000bca   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000bcc   ffea
000bce   0e20     movlw	0x20               	MOVLW	0x20
000bd0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000bd2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000bd4   d7e9     bra	0xba8                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000bd6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000bd8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000bda   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bdc   6a02     clrf	0x2, 0              	CLRF	r0x02
000bde   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000be0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000be2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000be4   ffe9
000be6   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000be8   ffea
000bea   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000bec   f001
000bee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf2   0e01     movlw	0x1                	MOVLW	0x01
000bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf6   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000bf8   f019
000bfa   0e02     movlw	0x2                	MOVLW	0x02
000bfc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000bfe   0e55     movlw	0x55               	MOVLW	0x55
000c00   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c02   6a02     clrf	0x2, 0              	CLRF	r0x02
000c04   6a03     clrf	0x3, 0              	CLRF	r0x03
000c06   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000c08   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c0a   f005
000c0c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c0e   f006
000c10   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c12   f007
000c14   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000c16   f008
000c18   0eff     movlw	0xff               	MOVLW	0xff
000c1a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c1c   0eff     movlw	0xff               	MOVLW	0xff
000c1e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c20   0eff     movlw	0xff               	MOVLW	0xff
000c22   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c24   0eff     movlw	0xff               	MOVLW	0xff
000c26   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c2a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c2c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c2e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000c30   e1eb     bnz	0xc08                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000c32   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000c34   d79f     bra	0xb74                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000c36   0ec0     movlw	0xc0               	MOVLW	0xc0
000c38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3a   0e00     movlw	0                  	MOVLW	0x00
000c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3e   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000c40   f019
000c42   0e02     movlw	0x2                	MOVLW	0x02
000c44   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000c46   0e55     movlw	0x55               	MOVLW	0x55
000c48   6e00     movwf	0, 0               	MOVWF	r0x00
000c4a   6a01     clrf	0x1, 0              	CLRF	r0x01
000c4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000c4e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000c50   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c52   f004
000c54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c56   f005
000c58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c5a   f006
000c5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c5e   f007
000c60   0eff     movlw	0xff               	MOVLW	0xff
000c62   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c64   0eff     movlw	0xff               	MOVLW	0xff
000c66   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c68   0eff     movlw	0xff               	MOVLW	0xff
000c6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c6c   0eff     movlw	0xff               	MOVLW	0xff
000c6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c72   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c74   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c76   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c78   e1eb     bnz	0xc50                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000c7a   0e10     movlw	0x10               	MOVLW	0x10
000c7c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
000c7e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000c80   f001
000c82   6a02     clrf	0x2, 0              	CLRF	r0x02
000c84   0e00     movlw	0                  	MOVLW	0x00
000c86   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c88   e102     bnz	0xc8e                	BNZ	_00299_DS_
000c8a   0e20     movlw	0x20               	MOVLW	0x20
000c8c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
000c8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c90   d057     bra	0xd40                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000c92   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c94   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000c96   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c98   6a02     clrf	0x2, 0              	CLRF	r0x02
000c9a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000c9c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c9e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000ca0   ffe9
000ca2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000ca4   ffea
000ca6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000ca8   f001
000caa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cac   e119     bnz	0xce0                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000cae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000cb0   f001
                                           _00261_DS_:
000cb2   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000cb4   f002
000cb6   6a03     clrf	0x3, 0              	CLRF	r0x03
000cb8   0e00     movlw	0                  	MOVLW	0x00
000cba   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000cbc   e102     bnz	0xcc2                	BNZ	_00300_DS_
000cbe   0e20     movlw	0x20               	MOVLW	0x20
000cc0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000cc2   e20e     bc	0xce0                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000cc4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000cc6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000cc8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cca   6a03     clrf	0x3, 0              	CLRF	r0x03
000ccc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000cce   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd0   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000cd2   ffe9
000cd4   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000cd6   ffea
000cd8   0e20     movlw	0x20               	MOVLW	0x20
000cda   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000cdc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cde   d7e9     bra	0xcb2                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000ce0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000ce2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000ce4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce6   6a02     clrf	0x2, 0              	CLRF	r0x02
000ce8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000cea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cec   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000cee   ffe9
000cf0   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000cf2   ffea
000cf4   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000cf6   f001
000cf8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfc   0e01     movlw	0x1                	MOVLW	0x01
000cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d00   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000d02   f019
000d04   0e02     movlw	0x2                	MOVLW	0x02
000d06   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000d08   0e55     movlw	0x55               	MOVLW	0x55
000d0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d0c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d0e   6a03     clrf	0x3, 0              	CLRF	r0x03
000d10   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000d12   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000d14   f005
000d16   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000d18   f006
000d1a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000d1c   f007
000d1e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000d20   f008
000d22   0eff     movlw	0xff               	MOVLW	0xff
000d24   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000d26   0eff     movlw	0xff               	MOVLW	0xff
000d28   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000d2a   0eff     movlw	0xff               	MOVLW	0xff
000d2c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000d2e   0eff     movlw	0xff               	MOVLW	0xff
000d30   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000d32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d34   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000d36   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000d38   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000d3a   e1eb     bnz	0xd12                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000d3c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000d3e   d79f     bra	0xc7e                	BRA	_00265_DS_
                                           _00269_DS_:
000d40   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000d42   f008
000d44   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000d46   f007
000d48   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000d4a   f006
000d4c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000d4e   f005
000d50   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000d52   f004
000d54   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000d56   f003
000d58   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d5a   f002
000d5c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d5e   f001
000d60   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d62   f000
000d64   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d66   ffd9
000d68   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000d6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d6c   ffe5
000d6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d70   ffd9
000d72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d74   ffe5
000d76   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d78   ffe5
000d7a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d7c   ffe5
000d7e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d80   ffe5
000d82   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d84   ffe5
000d86   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d88   ffe5
000d8a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d8c   ffe5
000d8e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d90   ffe5
000d92   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d94   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000d96   0e00     movlw	0                  	MOVLW	0x00
000d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9a   0e20     movlw	0x20               	MOVLW	0x20
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   0e20     movlw	0x20               	MOVLW	0x20
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000daa   ec3f     call	0x267e, 0           	CALL	_memset
000dac   f013
000dae   0e05     movlw	0x5                	MOVLW	0x05
000db0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000db2   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000db4   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000db6   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000db8   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000dba   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000dbc   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000dbe   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000dc0   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000dc2   0ea0     movlw	0xa0               	MOVLW	0xa0
000dc4   6e00     movwf	0, 0               	MOVWF	r0x00
000dc6   0e09     movlw	0x9                	MOVLW	0x09
000dc8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dca   0e01     movlw	0x1                	MOVLW	0x01
000dcc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dce   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000dd0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000dd2   f004
000dd4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000dd6   f005
000dd8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000dda   f006
000ddc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000dde   f007
000de0   0eff     movlw	0xff               	MOVLW	0xff
000de2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000de4   0eff     movlw	0xff               	MOVLW	0xff
000de6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000de8   0eff     movlw	0xff               	MOVLW	0xff
000dea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000dec   0eff     movlw	0xff               	MOVLW	0xff
000dee   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000df0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000df2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000df4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000df6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000df8   e1eb     bnz	0xdd0                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000dfa   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000dfc   0e03     movlw	0x3                	MOVLW	0x03
000dfe   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000e00   0000     nop                      	nop 
000e02   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000e04   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000e06   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000e08   f001
000e0a   6a02     clrf	0x2, 0              	CLRF	r0x02
000e0c   0e00     movlw	0                  	MOVLW	0x00
000e0e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000e10   e102     bnz	0xe16                	BNZ	_00220_DS_
000e12   0e03     movlw	0x3                	MOVLW	0x03
000e14   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000e16   e239     bc	0xe8a                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000e18   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000e1a   0e11     movlw	0x11               	MOVLW	0x11
000e1c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e1e   6a02     clrf	0x2, 0              	CLRF	r0x02
000e20   6a03     clrf	0x3, 0              	CLRF	r0x03
000e22   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000e24   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e26   f005
000e28   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e2a   f006
000e2c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e2e   f007
000e30   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000e32   f008
000e34   0eff     movlw	0xff               	MOVLW	0xff
000e36   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000e38   0eff     movlw	0xff               	MOVLW	0xff
000e3a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e3c   0eff     movlw	0xff               	MOVLW	0xff
000e3e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e40   0eff     movlw	0xff               	MOVLW	0xff
000e42   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000e44   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e46   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e48   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e4a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e4c   e1eb     bnz	0xe24                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000e4e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000e50   0e48     movlw	0x48               	MOVLW	0x48
000e52   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e54   0e0d     movlw	0xd                	MOVLW	0x0d
000e56   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e58   6a03     clrf	0x3, 0              	CLRF	r0x03
000e5a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000e5c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e5e   f005
000e60   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e62   f006
000e64   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e66   f007
000e68   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000e6a   f008
000e6c   0eff     movlw	0xff               	MOVLW	0xff
000e6e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000e70   0eff     movlw	0xff               	MOVLW	0xff
000e72   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e74   0eff     movlw	0xff               	MOVLW	0xff
000e76   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e78   0eff     movlw	0xff               	MOVLW	0xff
000e7a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000e7c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e7e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e80   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e82   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e84   e1eb     bnz	0xe5c                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000e86   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e88   d7be     bra	0xe06                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000e8a   0e38     movlw	0x38               	MOVLW	0x38
000e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8e   0e00     movlw	0                  	MOVLW	0x00
000e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e92   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000e94   f019
000e96   0e02     movlw	0x2                	MOVLW	0x02
000e98   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000e9a   0e55     movlw	0x55               	MOVLW	0x55
000e9c   6e00     movwf	0, 0               	MOVWF	r0x00
000e9e   6a01     clrf	0x1, 0              	CLRF	r0x01
000ea0   6a02     clrf	0x2, 0              	CLRF	r0x02
000ea2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000ea4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ea6   f004
000ea8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000eaa   f005
000eac   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eae   f006
000eb0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000eb2   f007
000eb4   0eff     movlw	0xff               	MOVLW	0xff
000eb6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000eb8   0eff     movlw	0xff               	MOVLW	0xff
000eba   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ebc   0eff     movlw	0xff               	MOVLW	0xff
000ebe   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ec0   0eff     movlw	0xff               	MOVLW	0xff
000ec2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ec4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ec6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000ec8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000eca   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000ecc   e1eb     bnz	0xea4                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000ece   0e06     movlw	0x6                	MOVLW	0x06
000ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed2   0e00     movlw	0                  	MOVLW	0x00
000ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed6   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000ed8   f019
000eda   0e02     movlw	0x2                	MOVLW	0x02
000edc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000ede   0e55     movlw	0x55               	MOVLW	0x55
000ee0   6e00     movwf	0, 0               	MOVWF	r0x00
000ee2   6a01     clrf	0x1, 0              	CLRF	r0x01
000ee4   6a02     clrf	0x2, 0              	CLRF	r0x02
000ee6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000ee8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000eea   f004
000eec   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000eee   f005
000ef0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ef2   f006
000ef4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ef6   f007
000ef8   0eff     movlw	0xff               	MOVLW	0xff
000efa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000efc   0eff     movlw	0xff               	MOVLW	0xff
000efe   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f00   0eff     movlw	0xff               	MOVLW	0xff
000f02   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f04   0eff     movlw	0xff               	MOVLW	0xff
000f06   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f08   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f0a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f0c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f0e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f10   e1eb     bnz	0xee8                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000f12   0e0c     movlw	0xc                	MOVLW	0x0c
000f14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f16   0e00     movlw	0                  	MOVLW	0x00
000f18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1a   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000f1c   f019
000f1e   0e02     movlw	0x2                	MOVLW	0x02
000f20   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000f22   0e55     movlw	0x55               	MOVLW	0x55
000f24   6e00     movwf	0, 0               	MOVWF	r0x00
000f26   6a01     clrf	0x1, 0              	CLRF	r0x01
000f28   6a02     clrf	0x2, 0              	CLRF	r0x02
000f2a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000f2c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f2e   f004
000f30   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f32   f005
000f34   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f36   f006
000f38   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f3a   f007
000f3c   0eff     movlw	0xff               	MOVLW	0xff
000f3e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f40   0eff     movlw	0xff               	MOVLW	0xff
000f42   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f44   0eff     movlw	0xff               	MOVLW	0xff
000f46   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f48   0eff     movlw	0xff               	MOVLW	0xff
000f4a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f4e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f50   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f52   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f54   e1eb     bnz	0xf2c                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000f56   0e01     movlw	0x1                	MOVLW	0x01
000f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f5a   0e00     movlw	0                  	MOVLW	0x00
000f5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f5e   ec52     call	0x32a4, 0           	CALL	_LCDWrite
000f60   f019
000f62   0e02     movlw	0x2                	MOVLW	0x02
000f64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000f66   0e48     movlw	0x48               	MOVLW	0x48
000f68   6e00     movwf	0, 0               	MOVWF	r0x00
000f6a   0e0d     movlw	0xd                	MOVLW	0x0d
000f6c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f6e   6a02     clrf	0x2, 0              	CLRF	r0x02
000f70   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000f72   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f74   f004
000f76   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f78   f005
000f7a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f7c   f006
000f7e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f80   f007
000f82   0eff     movlw	0xff               	MOVLW	0xff
000f84   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f86   0eff     movlw	0xff               	MOVLW	0xff
000f88   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f8a   0eff     movlw	0xff               	MOVLW	0xff
000f8c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f8e   0eff     movlw	0xff               	MOVLW	0xff
000f90   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f92   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f94   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f96   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f98   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f9a   e1eb     bnz	0xf72                	BNZ	_00185_DS_
000f9c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000f9e   f008
000fa0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000fa2   f007
000fa4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000fa6   f006
000fa8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000faa   f005
000fac   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000fae   f004
000fb0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000fb2   f003
000fb4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000fb6   f002
000fb8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fba   f001
000fbc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fbe   f000
000fc0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000fc2   ffd9
000fc4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0032a4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032a6   ffe5
0032a8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032aa   ffd9
0032ac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032ae   ffe5
0032b0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032b2   ffe5
0032b4   0e02     movlw	0x2                	MOVLW	0x02
0032b6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0032b8   f000
0032ba   0e03     movlw	0x3                	MOVLW	0x03
0032bc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0032be   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0032c0   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
0032c2   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0032c4   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
0032c6   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
0032c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0032ca   0b01     andlw	0x1                	ANDLW	0x01
0032cc   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0032ce   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0032d0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0032d2   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
0032d4   0bfb     andlw	0xfb               	ANDLW	0xfb
0032d6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0032d8   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
0032da   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
0032dc   ff8d
0032de   0000     nop                      	nop 
0032e0   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
0032e2   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
0032e4   0000     nop                      	nop 
0032e6   0000     nop                      	nop 
0032e8   0000     nop                      	nop 
0032ea   0000     nop                      	nop 
0032ec   0000     nop                      	nop 
0032ee   0000     nop                      	nop 
0032f0   0000     nop                      	nop 
0032f2   0000     nop                      	nop 
0032f4   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
0032f6   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0032f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032fa   f001
0032fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032fe   f000
003300   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003302   ffd9
003304   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 15:22:01 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_time_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/time.c	int time_equals(time t1, time t2){
001884   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001886   ffe5
001888   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00188a   ffd9
00188c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00188e   ffe5
001890   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001892   ffe5
001894   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001896   ffe5
001898   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00189a   ffe5
00189c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00189e   ffe5
0018a0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0018a2   ffe5
0018a4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0018a6   ffe5
0018a8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0018aa   ffe5
0018ac   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0018ae   ffe5
0018b0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0018b2   ffe5
0018b4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0018b6   ffe5
0018b8   0e02     movlw	0x2                	MOVLW	0x02
0018ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018bc   f000
0018be   0e03     movlw	0x3                	MOVLW	0x03
0018c0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018c2   f001
0018c4   0e04     movlw	0x4                	MOVLW	0x04
0018c6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0018c8   f002
0018ca   0e05     movlw	0x5                	MOVLW	0x05
0018cc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0018ce   f003
0018d0   0e06     movlw	0x6                	MOVLW	0x06
0018d2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0018d4   f004
0018d6   0e07     movlw	0x7                	MOVLW	0x07
0018d8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0018da   f005
                                           ;	.line	64; src/time.c	if(t1->seconds != t2->seconds)
0018dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018de   0f04     addlw	0x4                	ADDLW	0x04
0018e0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0018e2   0e00     movlw	0                  	MOVLW	0x00
0018e4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0018e6   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018e8   0e00     movlw	0                  	MOVLW	0x00
0018ea   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0018ec   6e08     movwf	0x8, 0             	MOVWF	r0x08
0018ee   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0018f0   ffe9
0018f2   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0018f4   fff3
0018f6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0018f8   ec12     call	0x3424, 0           	CALL	__gptrget2
0018fa   f01a
0018fc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0018fe   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001900   f007
001902   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001904   0f04     addlw	0x4                	ADDLW	0x04
001906   6e08     movwf	0x8, 0             	MOVWF	r0x08
001908   0e00     movlw	0                  	MOVLW	0x00
00190a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00190c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00190e   0e00     movlw	0                  	MOVLW	0x00
001910   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001912   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001914   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001916   ffe9
001918   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00191a   fff3
00191c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00191e   ec12     call	0x3424, 0           	CALL	__gptrget2
001920   f01a
001922   6e08     movwf	0x8, 0             	MOVWF	r0x08
001924   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001926   f009
001928   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00192a   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00192c   e103     bnz	0x1934               	BNZ	_00166_DS_
00192e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001930   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001932   e003     bz	0x193a                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/time.c	return 0;
001934   6af3     clrf	0xf3, 0             	CLRF	PRODL
001936   6ae8     clrf	0xe8, 0             	CLRF	WREG
001938   d04e     bra	0x19d6               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/time.c	if(t1->minutes != t2->minutes)
00193a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00193c   0f02     addlw	0x2                	ADDLW	0x02
00193e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001940   0e00     movlw	0                  	MOVLW	0x00
001942   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001944   6e07     movwf	0x7, 0             	MOVWF	r0x07
001946   0e00     movlw	0                  	MOVLW	0x00
001948   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00194a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00194c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00194e   ffe9
001950   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001952   fff3
001954   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001956   ec12     call	0x3424, 0           	CALL	__gptrget2
001958   f01a
00195a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00195c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00195e   f007
001960   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001962   0f02     addlw	0x2                	ADDLW	0x02
001964   6e08     movwf	0x8, 0             	MOVWF	r0x08
001966   0e00     movlw	0                  	MOVLW	0x00
001968   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00196a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00196c   0e00     movlw	0                  	MOVLW	0x00
00196e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001970   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001972   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001974   ffe9
001976   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001978   fff3
00197a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00197c   ec12     call	0x3424, 0           	CALL	__gptrget2
00197e   f01a
001980   6e08     movwf	0x8, 0             	MOVWF	r0x08
001982   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001984   f009
001986   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001988   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00198a   e103     bnz	0x1992               	BNZ	_00168_DS_
00198c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00198e   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001990   e003     bz	0x1998                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/time.c	return 0;
001992   6af3     clrf	0xf3, 0             	CLRF	PRODL
001994   6ae8     clrf	0xe8, 0             	CLRF	WREG
001996   d01f     bra	0x19d6               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/time.c	if(t1->hours != t2->hours)
001998   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00199a   ffe9
00199c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00199e   fff3
0019a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019a2   ec12     call	0x3424, 0           	CALL	__gptrget2
0019a4   f01a
0019a6   6e00     movwf	0, 0               	MOVWF	r0x00
0019a8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0019aa   f001
0019ac   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0019ae   ffe9
0019b0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0019b2   fff3
0019b4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019b6   ec12     call	0x3424, 0           	CALL	__gptrget2
0019b8   f01a
0019ba   6e03     movwf	0x3, 0             	MOVWF	r0x03
0019bc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0019be   f004
0019c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019c2   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0019c4   e103     bnz	0x19cc               	BNZ	_00170_DS_
0019c6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019c8   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
0019ca   e003     bz	0x19d2                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/time.c	return 0;
0019cc   6af3     clrf	0xf3, 0             	CLRF	PRODL
0019ce   6ae8     clrf	0xe8, 0             	CLRF	WREG
0019d0   d002     bra	0x19d6               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/time.c	return 1;
0019d2   6af3     clrf	0xf3, 0             	CLRF	PRODL
0019d4   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0019d6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0019d8   f00a
0019da   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0019dc   f009
0019de   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0019e0   f008
0019e2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0019e4   f007
0019e6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0019e8   f006
0019ea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0019ec   f005
0019ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0019f0   f004
0019f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0019f4   f003
0019f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0019f8   f002
0019fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019fc   f001
0019fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a00   f000
001a02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a04   ffd9
001a06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_print	code
                                           _time_print:
                                           ;	.line	59; src/time.c	void time_print(time t, char* str){
001c90   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c92   ffe5
001c94   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c96   ffd9
001c98   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001c9a   ffe5
001c9c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001c9e   ffe5
001ca0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001ca2   ffe5
001ca4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001ca6   ffe5
001ca8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001caa   ffe5
001cac   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001cae   ffe5
001cb0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001cb2   ffe5
001cb4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001cb6   ffe5
001cb8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001cba   ffe5
001cbc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001cbe   ffe5
001cc0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001cc2   ffe5
001cc4   0e02     movlw	0x2                	MOVLW	0x02
001cc6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001cc8   f000
001cca   0e03     movlw	0x3                	MOVLW	0x03
001ccc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001cce   f001
001cd0   0e04     movlw	0x4                	MOVLW	0x04
001cd2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001cd4   f002
001cd6   0e05     movlw	0x5                	MOVLW	0x05
001cd8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001cda   f003
001cdc   0e06     movlw	0x6                	MOVLW	0x06
001cde   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001ce0   f004
001ce2   0e07     movlw	0x7                	MOVLW	0x07
001ce4   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001ce6   f005
                                           ;	.line	60; src/time.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001ce8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cea   0f04     addlw	0x4                	ADDLW	0x04
001cec   6e06     movwf	0x6, 0             	MOVWF	r0x06
001cee   0e00     movlw	0                  	MOVLW	0x00
001cf0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001cf2   6e07     movwf	0x7, 0             	MOVWF	r0x07
001cf4   0e00     movlw	0                  	MOVLW	0x00
001cf6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001cf8   6e08     movwf	0x8, 0             	MOVWF	r0x08
001cfa   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001cfc   ffe9
001cfe   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001d00   fff3
001d02   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d04   ec12     call	0x3424, 0           	CALL	__gptrget2
001d06   f01a
001d08   6e06     movwf	0x6, 0             	MOVWF	r0x06
001d0a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001d0c   f007
001d0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d10   0f02     addlw	0x2                	ADDLW	0x02
001d12   6e08     movwf	0x8, 0             	MOVWF	r0x08
001d14   0e00     movlw	0                  	MOVLW	0x00
001d16   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001d18   6e09     movwf	0x9, 0             	MOVWF	r0x09
001d1a   0e00     movlw	0                  	MOVLW	0x00
001d1c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001d1e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001d20   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001d22   ffe9
001d24   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001d26   fff3
001d28   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001d2a   ec12     call	0x3424, 0           	CALL	__gptrget2
001d2c   f01a
001d2e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001d30   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001d32   f009
001d34   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001d36   ffe9
001d38   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001d3a   fff3
001d3c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d3e   ec12     call	0x3424, 0           	CALL	__gptrget2
001d40   f01a
001d42   6e00     movwf	0, 0               	MOVWF	r0x00
001d44   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001d46   f001
001d48   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d50   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001d52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d54   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d60   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d64   0e30     movlw	0x30               	MOVLW	HIGH(__str_0)
001d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d68   0eac     movlw	0xac               	MOVLW	LOW(__str_0)
001d6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d6c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d78   ece8     call	0x23d0, 0           	CALL	_sprintf
001d7a   f011
001d7c   0e0c     movlw	0xc                	MOVLW	0x0c
001d7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d80   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001d82   f00a
001d84   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001d86   f009
001d88   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001d8a   f008
001d8c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001d8e   f007
001d90   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001d92   f006
001d94   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001d96   f005
001d98   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001d9a   f004
001d9c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001d9e   f003
001da0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001da2   f002
001da4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001da6   f001
001da8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001daa   f000
001dac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001dae   ffd9
001db0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/time.c	void add_hour(time t){
0031be   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031c0   ffe5
0031c2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031c4   ffd9
0031c6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031c8   ffe5
0031ca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0031cc   ffe5
0031ce   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0031d0   ffe5
0031d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0031d4   ffe5
0031d6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0031d8   ffe5
0031da   0e02     movlw	0x2                	MOVLW	0x02
0031dc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0031de   f000
0031e0   0e03     movlw	0x3                	MOVLW	0x03
0031e2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0031e4   f001
0031e6   0e04     movlw	0x4                	MOVLW	0x04
0031e8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0031ea   f002
                                           ;	.line	56; src/time.c	set_hours(t,t->hours + 1);
0031ec   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0031ee   ffe9
0031f0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0031f2   fff3
0031f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031f6   ec12     call	0x3424, 0           	CALL	__gptrget2
0031f8   f01a
0031fa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0031fc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0031fe   f004
003200   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
003202   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003204   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
003206   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003208   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00320a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00320c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00320e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003212   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003216   5000     movf	0, 0, 0             	MOVF	r0x00, W
003218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00321a   ecd0     call	0x29a0, 0           	CALL	_set_hours
00321c   f014
00321e   0e05     movlw	0x5                	MOVLW	0x05
003220   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003222   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003224   f004
003226   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003228   f003
00322a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00322c   f002
00322e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003230   f001
003232   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003234   f000
003236   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003238   ffd9
00323a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/time.c	void add_minute(time t){
002a5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a5e   ffe5
002a60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a62   ffd9
002a64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a66   ffe5
002a68   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a6a   ffe5
002a6c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a6e   ffe5
002a70   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a72   ffe5
002a74   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a76   ffe5
002a78   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002a7a   ffe5
002a7c   0e02     movlw	0x2                	MOVLW	0x02
002a7e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a80   f000
002a82   0e03     movlw	0x3                	MOVLW	0x03
002a84   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a86   f001
002a88   0e04     movlw	0x4                	MOVLW	0x04
002a8a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002a8c   f002
                                           ;	.line	51; src/time.c	if(set_minutes(t,t->minutes + 1) != 0)
002a8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a90   0f02     addlw	0x2                	ADDLW	0x02
002a92   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a94   0e00     movlw	0                  	MOVLW	0x00
002a96   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002a98   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a9a   0e00     movlw	0                  	MOVLW	0x00
002a9c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002a9e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002aa0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002aa2   ffe9
002aa4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002aa6   fff3
002aa8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002aaa   ec12     call	0x3424, 0           	CALL	__gptrget2
002aac   f01a
002aae   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ab0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ab2   f004
002ab4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002ab6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002ab8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002aba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002abc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002abe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aca   5000     movf	0, 0, 0             	MOVF	r0x00, W
002acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ace   ec08     call	0x2810, 0           	CALL	_set_minutes
002ad0   f014
002ad2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ad4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ad6   f004
002ad8   0e05     movlw	0x5                	MOVLW	0x05
002ada   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002adc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ade   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002ae0   e00a     bz	0x2af6                	BZ	_00139_DS_
                                           ;	.line	52; src/time.c	add_hour(t);
002ae2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aea   5000     movf	0, 0, 0             	MOVF	r0x00, W
002aec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aee   ecdf     call	0x31be, 0           	CALL	_add_hour
002af0   f018
002af2   0e03     movlw	0x3                	MOVLW	0x03
002af4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
002af6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002af8   f005
002afa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002afc   f004
002afe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b00   f003
002b02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b04   f002
002b06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b08   f001
002b0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b0c   f000
002b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b10   ffd9
002b12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__add_second	code
                                           _add_second:
                                           ;	.line	45; src/time.c	void add_second(time t){
002b14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b16   ffe5
002b18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b1a   ffd9
002b1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1e   ffe5
002b20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b22   ffe5
002b24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b26   ffe5
002b28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b2a   ffe5
002b2c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b2e   ffe5
002b30   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b32   ffe5
002b34   0e02     movlw	0x2                	MOVLW	0x02
002b36   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b38   f000
002b3a   0e03     movlw	0x3                	MOVLW	0x03
002b3c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b3e   f001
002b40   0e04     movlw	0x4                	MOVLW	0x04
002b42   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002b44   f002
                                           ;	.line	46; src/time.c	if(set_seconds(t,t->seconds + 1) != 0)
002b46   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b48   0f04     addlw	0x4                	ADDLW	0x04
002b4a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b4c   0e00     movlw	0                  	MOVLW	0x00
002b4e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002b50   6e04     movwf	0x4, 0             	MOVWF	r0x04
002b52   0e00     movlw	0                  	MOVLW	0x00
002b54   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002b56   6e05     movwf	0x5, 0             	MOVWF	r0x05
002b58   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002b5a   ffe9
002b5c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002b5e   fff3
002b60   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002b62   ec12     call	0x3424, 0           	CALL	__gptrget2
002b64   f01a
002b66   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b68   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002b6a   f004
002b6c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002b6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002b70   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002b72   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b7e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b82   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b86   eca4     call	0x2748, 0           	CALL	_set_seconds
002b88   f013
002b8a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b8c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002b8e   f004
002b90   0e05     movlw	0x5                	MOVLW	0x05
002b92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002b94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b96   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002b98   e00a     bz	0x2bae                	BZ	_00132_DS_
                                           ;	.line	47; src/time.c	add_minute(t);
002b9a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b9e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ba0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba2   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ba4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba6   ec2e     call	0x2a5c, 0           	CALL	_add_minute
002ba8   f015
002baa   0e03     movlw	0x3                	MOVLW	0x03
002bac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002bae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002bb0   f005
002bb2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002bb4   f004
002bb6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002bb8   f003
002bba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002bbc   f002
002bbe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002bc0   f001
002bc2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002bc4   f000
002bc6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002bc8   ffd9
002bca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/time.c	int set_seconds(time t, int value){
002748   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00274a   ffe5
00274c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00274e   ffd9
002750   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002752   ffe5
002754   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002756   ffe5
002758   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00275a   ffe5
00275c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00275e   ffe5
002760   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002762   ffe5
002764   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002766   ffe5
002768   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00276a   ffe5
00276c   0e02     movlw	0x2                	MOVLW	0x02
00276e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002770   f000
002772   0e03     movlw	0x3                	MOVLW	0x03
002774   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002776   f001
002778   0e04     movlw	0x4                	MOVLW	0x04
00277a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00277c   f002
00277e   0e05     movlw	0x5                	MOVLW	0x05
002780   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002782   f003
002784   0e06     movlw	0x6                	MOVLW	0x06
002786   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002788   f004
                                           ;	.line	40; src/time.c	int overflow = value/60;
00278a   0e00     movlw	0                  	MOVLW	0x00
00278c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00278e   0e3c     movlw	0x3c               	MOVLW	0x3c
002790   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002792   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002796   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279a   ecf5     call	0x21ea, 0           	CALL	__divsint
00279c   f010
00279e   6e05     movwf	0x5, 0             	MOVWF	r0x05
0027a0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0027a2   f006
0027a4   0e04     movlw	0x4                	MOVLW	0x04
0027a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/time.c	t->seconds = value % 60;
0027a8   0e04     movlw	0x4                	MOVLW	0x04
0027aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027ac   0e00     movlw	0                  	MOVLW	0x00
0027ae   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0027b0   0e00     movlw	0                  	MOVLW	0x00
0027b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027b4   0e00     movlw	0                  	MOVLW	0x00
0027b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b8   0e3c     movlw	0x3c               	MOVLW	0x3c
0027ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027c4   ec5d     call	0x24ba, 0           	CALL	__modsint
0027c6   f012
0027c8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0027ca   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0027cc   f004
0027ce   0e04     movlw	0x4                	MOVLW	0x04
0027d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0027d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0027d4   ffe5
0027d6   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0027d8   fff4
0027da   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0027dc   ffe9
0027de   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0027e0   fff3
0027e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027e4   ec53     call	0x34a6, 0           	CALL	__gptrput2
0027e6   f01a
                                           ;	.line	42; src/time.c	return overflow;
0027e8   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0027ea   fff3
0027ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0027ee   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0027f0   f006
0027f2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0027f4   f005
0027f6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027f8   f004
0027fa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027fc   f003
0027fe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002800   f002
002802   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002804   f001
002806   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002808   f000
00280a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00280c   ffd9
00280e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/time.c	int set_minutes(time t, int value){
002810   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002812   ffe5
002814   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002816   ffd9
002818   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00281a   ffe5
00281c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00281e   ffe5
002820   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002822   ffe5
002824   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002826   ffe5
002828   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00282a   ffe5
00282c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00282e   ffe5
002830   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002832   ffe5
002834   0e02     movlw	0x2                	MOVLW	0x02
002836   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002838   f000
00283a   0e03     movlw	0x3                	MOVLW	0x03
00283c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00283e   f001
002840   0e04     movlw	0x4                	MOVLW	0x04
002842   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002844   f002
002846   0e05     movlw	0x5                	MOVLW	0x05
002848   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00284a   f003
00284c   0e06     movlw	0x6                	MOVLW	0x06
00284e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002850   f004
                                           ;	.line	34; src/time.c	int overflow = value/60;
002852   0e00     movlw	0                  	MOVLW	0x00
002854   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002856   0e3c     movlw	0x3c               	MOVLW	0x3c
002858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00285c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002862   ecf5     call	0x21ea, 0           	CALL	__divsint
002864   f010
002866   6e05     movwf	0x5, 0             	MOVWF	r0x05
002868   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00286a   f006
00286c   0e04     movlw	0x4                	MOVLW	0x04
00286e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/time.c	t->minutes = value%60;
002870   0e02     movlw	0x2                	MOVLW	0x02
002872   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002874   0e00     movlw	0                  	MOVLW	0x00
002876   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002878   0e00     movlw	0                  	MOVLW	0x00
00287a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00287c   0e00     movlw	0                  	MOVLW	0x00
00287e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002880   0e3c     movlw	0x3c               	MOVLW	0x3c
002882   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002884   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002886   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002888   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00288a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00288c   ec5d     call	0x24ba, 0           	CALL	__modsint
00288e   f012
002890   6e03     movwf	0x3, 0             	MOVWF	r0x03
002892   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002894   f004
002896   0e04     movlw	0x4                	MOVLW	0x04
002898   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00289a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00289c   ffe5
00289e   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0028a0   fff4
0028a2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0028a4   ffe9
0028a6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0028a8   fff3
0028aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028ac   ec53     call	0x34a6, 0           	CALL	__gptrput2
0028ae   f01a
                                           ;	.line	36; src/time.c	return overflow;
0028b0   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028b2   fff3
0028b4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028b6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0028b8   f006
0028ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0028bc   f005
0028be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028c0   f004
0028c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028c4   f003
0028c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028c8   f002
0028ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028cc   f001
0028ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028d0   f000
0028d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028d4   ffd9
0028d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/time.c	int set_hours(time t, int value){
0029a0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0029a2   ffe5
0029a4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0029a6   ffd9
0029a8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0029aa   ffe5
0029ac   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0029ae   ffe5
0029b0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0029b2   ffe5
0029b4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0029b6   ffe5
0029b8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0029ba   ffe5
0029bc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0029be   ffe5
0029c0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0029c2   ffe5
0029c4   0e02     movlw	0x2                	MOVLW	0x02
0029c6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0029c8   f000
0029ca   0e03     movlw	0x3                	MOVLW	0x03
0029cc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029ce   f001
0029d0   0e04     movlw	0x4                	MOVLW	0x04
0029d2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0029d4   f002
0029d6   0e05     movlw	0x5                	MOVLW	0x05
0029d8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0029da   f003
0029dc   0e06     movlw	0x6                	MOVLW	0x06
0029de   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0029e0   f004
                                           ;	.line	28; src/time.c	int overflow = value/24;
0029e2   0e00     movlw	0                  	MOVLW	0x00
0029e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e6   0e18     movlw	0x18               	MOVLW	0x18
0029e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029f2   ecf5     call	0x21ea, 0           	CALL	__divsint
0029f4   f010
0029f6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029f8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029fa   f006
0029fc   0e04     movlw	0x4                	MOVLW	0x04
0029fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/time.c	t->hours = value%24;
002a00   0e00     movlw	0                  	MOVLW	0x00
002a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a04   0e18     movlw	0x18               	MOVLW	0x18
002a06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a08   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a10   ec5d     call	0x24ba, 0           	CALL	__modsint
002a12   f012
002a14   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a16   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a18   f004
002a1a   0e04     movlw	0x4                	MOVLW	0x04
002a1c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002a1e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a20   ffe5
002a22   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002a24   fff4
002a26   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002a28   ffe9
002a2a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002a2c   fff3
002a2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a30   ec53     call	0x34a6, 0           	CALL	__gptrput2
002a32   f01a
                                           ;	.line	30; src/time.c	return overflow;
002a34   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002a36   fff3
002a38   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a3a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002a3c   f006
002a3e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a40   f005
002a42   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a44   f004
002a46   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a48   f003
002a4a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a4c   f002
002a4e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a50   f001
002a52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a54   f000
002a56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a58   ffd9
002a5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_set	code
                                           _time_set:
                                           ;	.line	21; src/time.c	void time_set(time t, int hours, int minutes, int seconds){
00259e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0025a0   ffe5
0025a2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0025a4   ffd9
0025a6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025a8   ffe5
0025aa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0025ac   ffe5
0025ae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0025b0   ffe5
0025b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0025b4   ffe5
0025b6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0025b8   ffe5
0025ba   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0025bc   ffe5
0025be   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0025c0   ffe5
0025c2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0025c4   ffe5
0025c6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0025c8   ffe5
0025ca   0e02     movlw	0x2                	MOVLW	0x02
0025cc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025ce   f000
0025d0   0e03     movlw	0x3                	MOVLW	0x03
0025d2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025d4   f001
0025d6   0e04     movlw	0x4                	MOVLW	0x04
0025d8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0025da   f002
0025dc   0e05     movlw	0x5                	MOVLW	0x05
0025de   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0025e0   f003
0025e2   0e06     movlw	0x6                	MOVLW	0x06
0025e4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0025e6   f004
0025e8   0e07     movlw	0x7                	MOVLW	0x07
0025ea   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0025ec   f005
0025ee   0e08     movlw	0x8                	MOVLW	0x08
0025f0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0025f2   f006
0025f4   0e09     movlw	0x9                	MOVLW	0x09
0025f6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0025f8   f007
0025fa   0e0a     movlw	0xa                	MOVLW	0x0a
0025fc   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0025fe   f008
                                           ;	.line	22; src/time.c	set_hours(t,hours);
002600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002604   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002606   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002608   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00260a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00260e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002610   5000     movf	0, 0, 0             	MOVF	r0x00, W
002612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002614   ecd0     call	0x29a0, 0           	CALL	_set_hours
002616   f014
002618   0e05     movlw	0x5                	MOVLW	0x05
00261a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/time.c	set_minutes(t,minutes);
00261c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00261e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002620   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002622   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002624   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002628   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00262a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00262e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002630   ec08     call	0x2810, 0           	CALL	_set_minutes
002632   f014
002634   0e05     movlw	0x5                	MOVLW	0x05
002636   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/time.c	set_seconds(t,seconds);
002638   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00263a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00263e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002640   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002644   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002648   5000     movf	0, 0, 0             	MOVF	r0x00, W
00264a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00264c   eca4     call	0x2748, 0           	CALL	_set_seconds
00264e   f013
002650   0e05     movlw	0x5                	MOVLW	0x05
002652   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002654   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002656   f008
002658   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00265a   f007
00265c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00265e   f006
002660   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002662   f005
002664   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002666   f004
002668   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00266a   f003
00266c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00266e   f002
002670   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002672   f001
002674   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002676   f000
002678   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00267a   ffd9
00267c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time_create	code
                                           _time_create:
                                           ;	.line	15; src/time.c	time time_create(){
003034   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003036   ffe5
003038   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00303a   ffd9
00303c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00303e   ffe5
003040   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003042   ffe5
003044   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003046   ffe5
                                           ;	.line	16; src/time.c	time t = (time)malloc(sizeof (struct time_struct));
003048   0e06     movlw	0x6                	MOVLW	0x06
00304a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00304c   ec7f     call	0x16fe, 0           	CALL	_malloc
00304e   f00b
003050   6e00     movwf	0, 0               	MOVWF	r0x00
003052   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003054   f001
003056   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003058   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00305a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00305c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00305e   6e00     movwf	0, 0               	MOVWF	r0x00
003060   0e80     movlw	0x80               	MOVLW	0x80
003062   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/time.c	time_set(t,0,0,0);
003064   0e00     movlw	0                  	MOVLW	0x00
003066   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003068   0e00     movlw	0                  	MOVLW	0x00
00306a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00306c   0e00     movlw	0                  	MOVLW	0x00
00306e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003070   0e00     movlw	0                  	MOVLW	0x00
003072   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003074   0e00     movlw	0                  	MOVLW	0x00
003076   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003078   0e00     movlw	0                  	MOVLW	0x00
00307a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00307c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00307e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003080   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003082   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003084   5000     movf	0, 0, 0             	MOVF	r0x00, W
003086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003088   eccf     call	0x259e, 0           	CALL	_time_set
00308a   f012
00308c   0e09     movlw	0x9                	MOVLW	0x09
00308e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/time.c	return t;
003090   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
003092   fff4
003094   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003096   fff3
003098   5000     movf	0, 0, 0             	MOVF	r0x00, W
00309a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00309c   f002
00309e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0030a0   f001
0030a2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0030a4   f000
0030a6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0030a8   ffd9
0030aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0030ac   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
0030ae   6432     cpfsgt	0x32, 0           
0030b0   253a     addwf	0x3a, 0, 0x1       
0030b2   3230     rrcf	0x30, 0x1, 0        
0030b4   3a64     swapf	0x64, 0x1, 0       
0030b6   3025     rrcf	0x25, 0, 0          
0030b8   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
0030ba   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Mon Nov 18 15:24:10 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _display_string
                                           	global _display_update
                                           	global _display_line
                                           	global _get_input
                                           	global _to_double_digits
                                           	global _read_and_clear
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_print
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           
                                           udata_clockio_0	udata
                                           _display_update_display_line_1_1	res	32
                                           
                                           udata_clockio_1	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clockio__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	65; src/clockio.c	int read_and_clear(int *variable){
0030bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0030be   ffe5
0030c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0030c2   ffd9
0030c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0030c6   ffe5
0030c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0030ca   ffe5
0030cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0030ce   ffe5
0030d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0030d2   ffe5
0030d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0030d6   ffe5
0030d8   0e02     movlw	0x2                	MOVLW	0x02
0030da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0030dc   f000
0030de   0e03     movlw	0x3                	MOVLW	0x03
0030e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0030e2   f001
0030e4   0e04     movlw	0x4                	MOVLW	0x04
0030e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0030e8   f002
                                           ;	.line	66; src/clockio.c	if(*variable){
0030ea   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0030ec   ffe9
0030ee   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0030f0   fff3
0030f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0030f4   ec12     call	0x3424, 0           	CALL	__gptrget2
0030f6   f01a
0030f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0030fa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0030fc   f004
0030fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003100   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
003102   e00e     bz	0x3120                	BZ	_00151_DS_
                                           ;	.line	67; src/clockio.c	*variable = 0;
003104   0e00     movlw	0                  	MOVLW	0x00
003106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003108   0e00     movlw	0                  	MOVLW	0x00
00310a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00310c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00310e   ffe9
003110   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003112   fff3
003114   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003116   ec53     call	0x34a6, 0           	CALL	__gptrput2
003118   f01a
                                           ;	.line	68; src/clockio.c	return 1;
00311a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00311c   0e01     movlw	0x1                	MOVLW	0x01
00311e   d002     bra	0x3124               	BRA	_00152_DS_
                                           _00151_DS_:
                                           ;	.line	70; src/clockio.c	return 0;
003120   6af3     clrf	0xf3, 0             	CLRF	PRODL
003122   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00152_DS_:
003124   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003126   f004
003128   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00312a   f003
00312c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00312e   f002
003130   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003132   f001
003134   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003136   f000
003138   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00313a   ffd9
00313c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clockio__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	56; src/clockio.c	char* to_double_digits(int value){
002fa8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002faa   ffe5
002fac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002fae   ffd9
002fb0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fb2   ffe5
002fb4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002fb6   ffe5
002fb8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002fba   ffe5
002fbc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002fbe   ffe5
002fc0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002fc2   ffe5
002fc4   0e02     movlw	0x2                	MOVLW	0x02
002fc6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fc8   f000
002fca   0e03     movlw	0x3                	MOVLW	0x03
002fcc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002fce   f001
                                           ;	.line	58; src/clockio.c	sprintf(buffer, "%02d", value);
002fd0   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002fd2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fd4   0e58     movlw	0x58               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002fd6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002fd8   0e80     movlw	0x80               	MOVLW	0x80
002fda   6e04     movwf	0x4, 0             	MOVWF	r0x04
002fdc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe4   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
002fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe8   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_0)
002fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fec   0edc     movlw	0xdc               	MOVLW	LOW(__str_0)
002fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ffc   ece8     call	0x23d0, 0           	CALL	_sprintf
002ffe   f011
003000   0e08     movlw	0x8                	MOVLW	0x08
003002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	59; src/clockio.c	return buffer;
003004   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
003006   6e01     movwf	0x1, 0             	MOVWF	r0x01
003008   0e58     movlw	0x58               	MOVLW	LOW(_to_double_digits_buffer_1_1)
00300a   6e00     movwf	0, 0               	MOVWF	r0x00
00300c   0e80     movlw	0x80               	MOVLW	0x80
00300e   6e02     movwf	0x2, 0             	MOVWF	r0x02
003010   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
003012   fff4
003014   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003016   fff3
003018   5000     movf	0, 0, 0             	MOVF	r0x00, W
00301a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00301c   f004
00301e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003020   f003
003022   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003024   f002
003026   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003028   f001
00302a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00302c   f000
00302e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003030   ffd9
003032   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clockio__get_input	code
                                           _get_input:
                                           ;	.line	37; src/clockio.c	int get_input(int maxvalue, char *text, char *mode, int * btn_next, int *btn_confrm){
0011be   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011c0   ffe5
0011c2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011c4   ffd9
0011c6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011c8   ffe5
0011ca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011cc   ffe5
0011ce   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011d0   ffe5
0011d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011d4   ffe5
0011d6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011d8   ffe5
0011da   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011dc   ffe5
0011de   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011e0   ffe5
0011e2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011e4   ffe5
0011e6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011e8   ffe5
0011ea   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011ec   ffe5
0011ee   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011f0   ffe5
0011f2   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0011f4   ffe5
0011f6   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0011f8   ffe5
0011fa   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0011fc   ffe5
0011fe   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001200   ffe5
001202   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001204   ffe5
001206   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001208   ffe5
00120a   0e02     movlw	0x2                	MOVLW	0x02
00120c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00120e   f000
001210   0e03     movlw	0x3                	MOVLW	0x03
001212   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001214   f001
001216   0e04     movlw	0x4                	MOVLW	0x04
001218   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00121a   f002
00121c   0e05     movlw	0x5                	MOVLW	0x05
00121e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001220   f003
001222   0e06     movlw	0x6                	MOVLW	0x06
001224   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001226   f004
001228   0e07     movlw	0x7                	MOVLW	0x07
00122a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00122c   f005
00122e   0e08     movlw	0x8                	MOVLW	0x08
001230   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001232   f006
001234   0e09     movlw	0x9                	MOVLW	0x09
001236   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001238   f007
00123a   0e0a     movlw	0xa                	MOVLW	0x0a
00123c   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
00123e   f008
001240   0e0b     movlw	0xb                	MOVLW	0x0b
001242   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
001244   f009
001246   0e0c     movlw	0xc                	MOVLW	0x0c
001248   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
00124a   f00a
00124c   0e0d     movlw	0xd                	MOVLW	0x0d
00124e   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
001250   f00b
001252   0e0e     movlw	0xe                	MOVLW	0x0e
001254   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
001256   f00c
001258   0e0f     movlw	0xf                	MOVLW	0x0f
00125a   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
00125c   f00d
                                           ;	.line	38; src/clockio.c	BYTE length = strlen(text);
00125e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001262   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126a   ec9f     call	0x313e, 0           	CALL	_strlen
00126c   f018
00126e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001270   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
001272   f00f
001274   0e03     movlw	0x3                	MOVLW	0x03
001276   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	39; src/clockio.c	int value = 0;
001278   6a0f     clrf	0xf, 0              	CLRF	r0x0f
00127a   6a10     clrf	0x10, 0             	CLRF	r0x10
                                           ;	.line	40; src/clockio.c	display_line(mode, text);
00127c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00128a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00128c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00128e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001290   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001292   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001294   ec8b     call	0x2f16, 0           	CALL	_display_line
001296   f017
001298   0e06     movlw	0x6                	MOVLW	0x06
00129a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/clockio.c	while(1){
00129c   0e11     movlw	0x11               	MOVLW	0x11
00129e   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
0012a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00138_DS_:
                                           ;	.line	42; src/clockio.c	if(read_and_clear(btn_confrm)){
0012a2   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0012a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012a6   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0012a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012aa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0012ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ae   ec5e     call	0x30bc, 0           	CALL	_read_and_clear
0012b0   f018
0012b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0012b4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0012b6   f004
0012b8   0e03     movlw	0x3                	MOVLW	0x03
0012ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012be   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0012c0   e006     bz	0x12ce                	BZ	_00134_DS_
                                           ;	.line	43; src/clockio.c	LCDErase();
0012c2   ec42     call	0x2c84, 0           	CALL	_LCDErase
0012c4   f016
                                           ;	.line	44; src/clockio.c	return value;
0012c6   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0012c8   fff3
0012ca   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0012cc   d03c     bra	0x1346               	BRA	_00140_DS_
                                           _00134_DS_:
                                           ;	.line	46; src/clockio.c	if(read_and_clear(btn_next)){ 
0012ce   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0012d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0012d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0012d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012da   ec5e     call	0x30bc, 0           	CALL	_read_and_clear
0012dc   f018
0012de   6e03     movwf	0x3, 0             	MOVWF	r0x03
0012e0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0012e2   f004
0012e4   0e03     movlw	0x3                	MOVLW	0x03
0012e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012ea   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0012ec   e012     bz	0x1312                	BZ	_00136_DS_
                                           ;	.line	47; src/clockio.c	value = (++value)%maxvalue;
0012ee   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
0012f0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012f2   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0012f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012fc   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001300   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001304   ec5d     call	0x24ba, 0           	CALL	__modsint
001306   f012
001308   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00130a   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x10
00130c   f010
00130e   0e04     movlw	0x4                	MOVLW	0x04
001310   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00136_DS_:
                                           ;	.line	49; src/clockio.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
001312   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
001314   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001316   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001318   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00131a   ecd4     call	0x2fa8, 0           	CALL	_to_double_digits
00131c   f017
00131e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001320   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001322   f004
001324   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
001326   f005
001328   0e02     movlw	0x2                	MOVLW	0x02
00132a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00132c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00132e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001330   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001332   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001334   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001336   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001338   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00133a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00133c   ec66     call	0x1ecc, 0           	CALL	_display_string
00133e   f00f
001340   0e04     movlw	0x4                	MOVLW	0x04
001342   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001344   d7ae     bra	0x12a2               	BRA	_00138_DS_
                                           _00140_DS_:
001346   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
001348   f010
00134a   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00134c   f00f
00134e   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001350   f00e
001352   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001354   f00d
001356   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001358   f00c
00135a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00135c   f00b
00135e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001360   f00a
001362   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001364   f009
001366   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001368   f008
00136a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00136c   f007
00136e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001370   f006
001372   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001374   f005
001376   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001378   f004
00137a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00137c   f003
00137e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001380   f002
001382   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001384   f001
001386   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001388   f000
00138a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00138c   ffd9
00138e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clockio__display_line	code
                                           _display_line:
                                           ;	.line	29; src/clockio.c	void display_line(char *top, char *bottom){
002f16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f18   ffe5
002f1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f1c   ffd9
002f1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f20   ffe5
002f22   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f24   ffe5
002f26   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002f28   ffe5
002f2a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002f2c   ffe5
002f2e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002f30   ffe5
002f32   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002f34   ffe5
002f36   0e02     movlw	0x2                	MOVLW	0x02
002f38   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002f3a   f000
002f3c   0e03     movlw	0x3                	MOVLW	0x03
002f3e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002f40   f001
002f42   0e04     movlw	0x4                	MOVLW	0x04
002f44   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002f46   f002
002f48   0e05     movlw	0x5                	MOVLW	0x05
002f4a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002f4c   f003
002f4e   0e06     movlw	0x6                	MOVLW	0x06
002f50   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002f52   f004
002f54   0e07     movlw	0x7                	MOVLW	0x07
002f56   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002f58   f005
                                           ;	.line	30; src/clockio.c	display_string(START_FIRST_LINE, top);
002f5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f62   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f66   0e00     movlw	0                  	MOVLW	0x00
002f68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f6a   ec66     call	0x1ecc, 0           	CALL	_display_string
002f6c   f00f
002f6e   0e04     movlw	0x4                	MOVLW	0x04
002f70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	31; src/clockio.c	display_string(START_SECOND_LINE, bottom);
002f72   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f76   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f7a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f7e   0e10     movlw	0x10               	MOVLW	0x10
002f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f82   ec66     call	0x1ecc, 0           	CALL	_display_string
002f84   f00f
002f86   0e04     movlw	0x4                	MOVLW	0x04
002f88   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002f8a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002f8c   f005
002f8e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f90   f004
002f92   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f94   f003
002f96   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f98   f002
002f9a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002f9c   f001
002f9e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002fa0   f000
002fa2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002fa4   ffd9
002fa6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clockio__display_update	code
                                           _display_update:
                                           ;	.line	20; src/clockio.c	void display_update(time t){
002dde   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002de0   ffe5
002de2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002de4   ffd9
002de6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002de8   ffe5
002dea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002dec   ffe5
002dee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002df0   ffe5
002df2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002df4   ffe5
002df6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002df8   ffe5
002dfa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002dfc   ffe5
002dfe   0e02     movlw	0x2                	MOVLW	0x02
002e00   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002e02   f000
002e04   0e03     movlw	0x3                	MOVLW	0x03
002e06   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002e08   f001
002e0a   0e04     movlw	0x4                	MOVLW	0x04
002e0c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002e0e   f002
                                           ;	.line	22; src/clockio.c	time_print(t, display_line);
002e10   0e0e     movlw	0xe                	MOVLW	HIGH(_display_update_display_line_1_1)
002e12   6e04     movwf	0x4, 0             	MOVWF	r0x04
002e14   0e00     movlw	0                  	MOVLW	LOW(_display_update_display_line_1_1)
002e16   6e03     movwf	0x3, 0             	MOVWF	r0x03
002e18   0e80     movlw	0x80               	MOVLW	0x80
002e1a   6e05     movwf	0x5, 0             	MOVWF	r0x05
002e1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e24   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e28   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e2c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e30   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e34   ec48     call	0x1c90, 0           	CALL	_time_print
002e36   f00e
002e38   0e06     movlw	0x6                	MOVLW	0x06
002e3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/clockio.c	display_string(0, display_line);
002e3c   0e0e     movlw	0xe                	MOVLW	HIGH(_display_update_display_line_1_1)
002e3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e40   0e00     movlw	0                  	MOVLW	LOW(_display_update_display_line_1_1)
002e42   6e00     movwf	0, 0               	MOVWF	r0x00
002e44   0e80     movlw	0x80               	MOVLW	0x80
002e46   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e50   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e54   0e00     movlw	0                  	MOVLW	0x00
002e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e58   ec66     call	0x1ecc, 0           	CALL	_display_string
002e5a   f00f
002e5c   0e04     movlw	0x4                	MOVLW	0x04
002e5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002e60   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002e62   f005
002e64   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002e66   f004
002e68   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002e6a   f003
002e6c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e6e   f002
002e70   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e72   f001
002e74   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e76   f000
002e78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e7a   ffd9
002e7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clockio__display_string	code
                                           _display_string:
                                           ;	.line	6; src/clockio.c	void display_string(BYTE pos, char* text){
001ecc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ece   ffe5
001ed0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ed2   ffd9
001ed4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001ed6   ffe5
001ed8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001eda   ffe5
001edc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001ede   ffe5
001ee0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001ee2   ffe5
001ee4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001ee6   ffe5
001ee8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001eea   ffe5
001eec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001eee   ffe5
001ef0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001ef2   ffe5
001ef4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001ef6   ffe5
001ef8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001efa   ffe5
001efc   0e02     movlw	0x2                	MOVLW	0x02
001efe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001f00   f000
001f02   0e03     movlw	0x3                	MOVLW	0x03
001f04   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001f06   f001
001f08   0e04     movlw	0x4                	MOVLW	0x04
001f0a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001f0c   f002
001f0e   0e05     movlw	0x5                	MOVLW	0x05
001f10   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001f12   f003
                                           ;	.line	7; src/clockio.c	BYTE        l = strlen(text);
001f14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f20   ec9f     call	0x313e, 0           	CALL	_strlen
001f22   f018
001f24   6e04     movwf	0x4, 0             	MOVWF	r0x04
001f26   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001f28   f005
001f2a   0e03     movlw	0x3                	MOVLW	0x03
001f2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	8; src/clockio.c	BYTE      max = 32-pos;    
001f2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f30   0820     sublw	0x20               	SUBLW	0x20
001f32   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	9; src/clockio.c	char       *d = (char*)&LCDText[pos];
001f34   6a06     clrf	0x6, 0              	CLRF	r0x06
001f36   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001f38   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001f3a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001f3c   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001f3e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f40   6e06     movwf	0x6, 0             	MOVWF	r0x06
001f42   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f44   6e00     movwf	0, 0               	MOVWF	r0x00
001f46   0e80     movlw	0x80               	MOVLW	0x80
001f48   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	11; src/clockio.c	size_t      n = (l<max)?l:max;
001f4a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f4c   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001f4e   e302     bnc	0x1f54               	BNC	_00113_DS_
001f50   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001f52   f004
                                           _00113_DS_:
001f54   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	12; src/clockio.c	if (n != 0)
001f56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f58   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001f5a   e027     bz	0x1faa                	BZ	_00109_DS_
                                           _00105_DS_:
                                           ;	.line	13; src/clockio.c	while (n-- != 0)*d++ = *s++;
001f5c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001f5e   f008
001f60   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001f62   f009
001f64   0eff     movlw	0xff               	MOVLW	0xff
001f66   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001f68   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001f6a   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001f6c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001f6e   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001f70   e01c     bz	0x1faa                	BZ	_00109_DS_
001f72   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001f74   ffe9
001f76   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001f78   fff3
001f7a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f7c   ec28     call	0x3450, 0           	CALL	__gptrget1
001f7e   f01a
001f80   6e08     movwf	0x8, 0             	MOVWF	r0x08
001f82   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001f84   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001f86   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001f88   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001f8a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001f8c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f8e   ffe5
001f90   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001f92   ffe9
001f94   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001f96   fff3
001f98   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001f9a   ec5f     call	0x34be, 0           	CALL	__gptrput1
001f9c   f01a
001f9e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001fa0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001fa2   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001fa4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001fa6   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001fa8   d7d9     bra	0x1f5c               	BRA	_00105_DS_
                                           _00109_DS_:
                                           ;	.line	14; src/clockio.c	LCDUpdate();
001faa   ec80     call	0xb00, 0            	CALL	_LCDUpdate
001fac   f005
001fae   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001fb0   f009
001fb2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001fb4   f008
001fb6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001fb8   f007
001fba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001fbc   f006
001fbe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001fc0   f005
001fc2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001fc4   f004
001fc6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001fc8   f003
001fca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001fcc   f002
001fce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001fd0   f001
001fd2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001fd4   f000
001fd6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001fd8   ffd9
001fda   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001fdc   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
001fde   6432     cpfsgt	0x32, 0           
001fe0   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1316 (0x0524) bytes ( 1.00%)
                                           ;           	  658 (0x0292) words
                                           ; udata size:	   35 (0x0023) bytes ( 0.91%)
                                           ; access size:	   17 (0x0011) bytes
                                           
                                           
                                           	end
