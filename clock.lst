gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  19:29:47
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:29:47 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_clock
                                           	global _get_input
                                           	global _display_string
                                           	global _delay_1ms
                                           	global _delay_ms
                                           	global _to_double_digits
                                           	global __time
                                           	global _display_line
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _time_print
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           _display_line	res	32
                                           
                                           udata_clock_2	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	29; src/clock.c	_time = time_create();
0027ea   ec3a     call	0x2874, 0           	CALL	_time_create
0027ec   f014
0027ee   010f     movlb	0xf                	BANKSEL	__time
0027f0   6f4e     movwf	0x4e, 0x1          	MOVWF	__time, B
0027f2   cff3     movff	0xff3, 0xf4f       	MOVFF	PRODL, (__time + 1)
0027f4   ff4f
0027f6   cff4     movff	0xff4, 0xf50       	MOVFF	PRODH, (__time + 2)
0027f8   ff50
                                           ;	.line	30; src/clock.c	LCDInit();
0027fa   ec52     call	0xaa4, 0            	CALL	_LCDInit
0027fc   f005
0027fe   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	31; src/clock.c	init_clock(_time);
002800   5150     movf	0x50, 0, 0x1        	MOVF	(__time + 2), W, B
002802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002804   010f     movlb	0xf                	BANKSEL	(__time + 1)
002806   514f     movf	0x4f, 0, 0x1        	MOVF	(__time + 1), W, B
002808   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00280a   010f     movlb	0xf                	BANKSEL	__time
00280c   514e     movf	0x4e, 0, 0x1        	MOVF	__time, W, B
00280e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002810   ec47     call	0x168e, 0           	CALL	_init_clock
002812   f00b
002814   0e03     movlw	0x3                	MOVLW	0x03
002816   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	32; src/clock.c	time_print(_time, display_line);
002818   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00281a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00281c   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
00281e   6e00     movwf	0, 0               	MOVWF	r0x00
002820   0e80     movlw	0x80               	MOVLW	0x80
002822   6e02     movwf	0x2, 0             	MOVWF	r0x02
002824   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002826   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002828   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00282a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00282c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00282e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002830   010f     movlb	0xf                	BANKSEL	(__time + 2)
002832   5150     movf	0x50, 0, 0x1        	MOVF	(__time + 2), W, B
002834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002836   010f     movlb	0xf                	BANKSEL	(__time + 1)
002838   514f     movf	0x4f, 0, 0x1        	MOVF	(__time + 1), W, B
00283a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00283c   010f     movlb	0xf                	BANKSEL	__time
00283e   514e     movf	0x4e, 0, 0x1        	MOVF	__time, W, B
002840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002842   ecb6     call	0x156c, 0           	CALL	_time_print
002844   f00a
002846   0e06     movlw	0x6                	MOVLW	0x06
002848   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	33; src/clock.c	display_string(0, display_line);
00284a   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00284c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00284e   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002850   6e00     movwf	0, 0               	MOVWF	r0x00
002852   0e80     movlw	0x80               	MOVLW	0x80
002854   6e02     movwf	0x2, 0             	MOVWF	r0x02
002856   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00285c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002862   0e00     movlw	0                  	MOVLW	0x00
002864   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002866   ec62     call	0x18c4, 0           	CALL	_display_string
002868   f00c
00286a   0e04     movlw	0x4                	MOVLW	0x04
00286c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	34; src/clock.c	return 0;
00286e   6af3     clrf	0xf3, 0             	CLRF	PRODL
002870   6ae8     clrf	0xe8, 0             	CLRF	WREG
002872   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	94; src/clock.c	char* to_double_digits(int value){
00275e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002760   ffe5
002762   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002764   ffd9
002766   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002768   ffe5
00276a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00276c   ffe5
00276e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002770   ffe5
002772   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002774   ffe5
002776   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002778   ffe5
00277a   0e02     movlw	0x2                	MOVLW	0x02
00277c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00277e   f000
002780   0e03     movlw	0x3                	MOVLW	0x03
002782   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002784   f001
                                           ;	.line	96; src/clock.c	sprintf(buffer, "%02d", value);
002786   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002788   6e03     movwf	0x3, 0             	MOVWF	r0x03
00278a   0e51     movlw	0x51               	MOVLW	LOW(_to_double_digits_buffer_1_1)
00278c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00278e   0e80     movlw	0x80               	MOVLW	0x80
002790   6e04     movwf	0x4, 0             	MOVWF	r0x04
002792   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002796   5000     movf	0, 0, 0             	MOVF	r0x00, W
002798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279a   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
00279c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279e   0e17     movlw	0x17               	MOVLW	HIGH(__str_3)
0027a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a2   0ea4     movlw	0xa4               	MOVLW	LOW(__str_3)
0027a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b2   ec5c     call	0x1cb8, 0           	CALL	_sprintf
0027b4   f00e
0027b6   0e08     movlw	0x8                	MOVLW	0x08
0027b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	97; src/clock.c	return buffer;
0027ba   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
0027bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027be   0e51     movlw	0x51               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0027c0   6e00     movwf	0, 0               	MOVWF	r0x00
0027c2   0e80     movlw	0x80               	MOVLW	0x80
0027c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0027c6   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0027c8   fff4
0027ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0027cc   fff3
0027ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0027d0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027d2   f004
0027d4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027d6   f003
0027d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027da   f002
0027dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027de   f001
0027e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027e2   f000
0027e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027e6   ffd9
0027e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__delay_ms	code
                                           _delay_ms:
                                           ;	.line	88; src/clock.c	void delay_ms(unsigned int ms) {
002a5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a5e   ffe5
002a60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a62   ffd9
002a64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a66   ffe5
002a68   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a6a   ffe5
002a6c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a6e   ffe5
002a70   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a72   ffe5
002a74   0e02     movlw	0x2                	MOVLW	0x02
002a76   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a78   f000
002a7a   0e03     movlw	0x3                	MOVLW	0x03
002a7c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a7e   f001
                                           _00153_DS_:
                                           ;	.line	89; src/clock.c	while (ms--) {
002a80   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
002a82   f002
002a84   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
002a86   f003
002a88   0eff     movlw	0xff               	MOVLW	0xff
002a8a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002a8c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002a8e   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
002a90   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a92   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
002a94   e003     bz	0x2a9c                	BZ	_00156_DS_
                                           ;	.line	90; src/clock.c	delay_1ms();
002a96   ecc1     call	0x2b82, 0           	CALL	_delay_1ms
002a98   f015
002a9a   d7f2     bra	0x2a80               	BRA	_00153_DS_
                                           _00156_DS_:
002a9c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a9e   f003
002aa0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002aa2   f002
002aa4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002aa6   f001
002aa8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002aaa   f000
002aac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002aae   ffd9
002ab0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__delay_1ms	code
                                           _delay_1ms:
                                           ;	.line	74; src/clock.c	void delay_1ms(void) {
002b82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b84   ffe5
002b86   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b88   ffd9
                                           ;	.line	75; src/clock.c	TMR0H=(0x10000-EXEC_FREQ/1000)>>8;
002b8a   0ed8     movlw	0xd8               	MOVLW	0xd8
002b8c   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	76; src/clock.c	TMR0L=(0x10000-EXEC_FREQ/1000)&0xff;
002b8e   0ef0     movlw	0xf0               	MOVLW	0xf0
002b90   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	77; src/clock.c	T0CONbits.TMR0ON=0; // disable timer0
002b92   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	78; src/clock.c	T0CONbits.T08BIT=0; // use timer0 16-bit counter
002b94   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	79; src/clock.c	T0CONbits.T0CS=0; // use timer0 instruction cycle clock
002b96   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	80; src/clock.c	T0CONbits.PSA=1; // disable timer0 prescaler
002b98   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	81; src/clock.c	INTCONbits.T0IF=0; // clear timer0 overflow bit
002b9a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	82; src/clock.c	T0CONbits.TMR0ON=1; // enable timer0
002b9c   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00145_DS_:
                                           ;	.line	83; src/clock.c	while (!INTCONbits.T0IF) {} // wait for timer0 overflow
002b9e   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
002ba0   d7fe     bra	0x2b9e               	BRA	_00145_DS_
                                           ;	.line	84; src/clock.c	INTCONbits.T0IF=0; // clear timer0 overflow bit
002ba2   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	85; src/clock.c	T0CONbits.TMR0ON=0; // disable timer0
002ba4   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
002ba6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ba8   ffd9
002baa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	62; src/clock.c	void display_string(BYTE pos, char* text){
0018c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0018c6   ffe5
0018c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0018ca   ffd9
0018cc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0018ce   ffe5
0018d0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0018d2   ffe5
0018d4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0018d6   ffe5
0018d8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0018da   ffe5
0018dc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0018de   ffe5
0018e0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0018e2   ffe5
0018e4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0018e6   ffe5
0018e8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0018ea   ffe5
0018ec   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0018ee   ffe5
0018f0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0018f2   ffe5
0018f4   0e02     movlw	0x2                	MOVLW	0x02
0018f6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018f8   f000
0018fa   0e03     movlw	0x3                	MOVLW	0x03
0018fc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018fe   f001
001900   0e04     movlw	0x4                	MOVLW	0x04
001902   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001904   f002
001906   0e05     movlw	0x5                	MOVLW	0x05
001908   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00190a   f003
                                           ;	.line	63; src/clock.c	BYTE        l = strlen(text);/*number of actual chars in the string*/
00190c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00190e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001910   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001914   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001916   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001918   ec7e     call	0x28fc, 0           	CALL	_strlen
00191a   f014
00191c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00191e   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001920   f005
001922   0e03     movlw	0x3                	MOVLW	0x03
001924   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	64; src/clock.c	BYTE      max = 32-pos;    /*available space on the lcd*/
001926   5000     movf	0, 0, 0             	MOVF	r0x00, W
001928   0820     sublw	0x20               	SUBLW	0x20
00192a   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	65; src/clock.c	char       *d = (char*)&LCDText[pos];
00192c   6a06     clrf	0x6, 0              	CLRF	r0x06
00192e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001930   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001932   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001934   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001936   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001938   6e06     movwf	0x6, 0             	MOVWF	r0x06
00193a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00193c   6e00     movwf	0, 0               	MOVWF	r0x00
00193e   0e80     movlw	0x80               	MOVLW	0x80
001940   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	67; src/clock.c	size_t      n = (l<max)?l:max;
001942   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001944   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001946   e302     bnc	0x194c               	BNC	_00135_DS_
001948   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00194a   f004
                                           _00135_DS_:
00194c   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	69; src/clock.c	if (n != 0)
00194e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001950   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001952   e027     bz	0x19a2                	BZ	_00131_DS_
                                           _00127_DS_:
                                           ;	.line	70; src/clock.c	while (n-- != 0)*d++ = *s++;
001954   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001956   f008
001958   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
00195a   f009
00195c   0eff     movlw	0xff               	MOVLW	0xff
00195e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001960   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001962   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001964   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001966   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001968   e01c     bz	0x19a2                	BZ	_00131_DS_
00196a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00196c   ffe9
00196e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001970   fff3
001972   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001974   ecd6     call	0x2bac, 0           	CALL	__gptrget1
001976   f015
001978   6e08     movwf	0x8, 0             	MOVWF	r0x08
00197a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00197c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00197e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001980   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001982   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001984   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001986   ffe5
001988   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00198a   ffe9
00198c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00198e   fff3
001990   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001992   ec0d     call	0x2c1a, 0           	CALL	__gptrput1
001994   f016
001996   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001998   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00199a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00199c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00199e   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0019a0   d7d9     bra	0x1954               	BRA	_00127_DS_
                                           _00131_DS_:
                                           ;	.line	71; src/clock.c	LCDUpdate();
0019a2   ec1d     call	0x83a, 0            	CALL	_LCDUpdate
0019a4   f004
0019a6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0019a8   f009
0019aa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0019ac   f008
0019ae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0019b0   f007
0019b2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0019b4   f006
0019b6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0019b8   f005
0019ba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0019bc   f004
0019be   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0019c0   f003
0019c2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0019c4   f002
0019c6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019c8   f001
0019ca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0019cc   f000
0019ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019d0   ffd9
0019d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	45; src/clock.c	int get_input(int maxvalue, char *text){
00144a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00144c   ffe5
00144e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001450   ffd9
001452   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001454   ffe5
001456   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001458   ffe5
00145a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00145c   ffe5
00145e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001460   ffe5
001462   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001464   ffe5
001466   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001468   ffe5
00146a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00146c   ffe5
00146e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001470   ffe5
001472   0e02     movlw	0x2                	MOVLW	0x02
001474   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001476   f000
001478   0e03     movlw	0x3                	MOVLW	0x03
00147a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00147c   f001
00147e   0e04     movlw	0x4                	MOVLW	0x04
001480   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001482   f002
001484   0e05     movlw	0x5                	MOVLW	0x05
001486   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001488   f003
00148a   0e06     movlw	0x6                	MOVLW	0x06
00148c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00148e   f004
                                           ;	.line	46; src/clock.c	BYTE length = strlen(text);
001490   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001492   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001494   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001496   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001498   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00149a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00149c   ec7e     call	0x28fc, 0           	CALL	_strlen
00149e   f014
0014a0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0014a2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0014a4   f006
0014a6   0e03     movlw	0x3                	MOVLW	0x03
0014a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	47; src/clock.c	int value = 0;
0014aa   6a06     clrf	0x6, 0              	CLRF	r0x06
0014ac   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	48; src/clock.c	display_string(0, text);
0014ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0014b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0014b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ba   0e00     movlw	0                  	MOVLW	0x00
0014bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014be   ec62     call	0x18c4, 0           	CALL	_display_string
0014c0   f00c
0014c2   0e04     movlw	0x4                	MOVLW	0x04
0014c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	49; src/clock.c	while(1)
0014c6   2805     incf	0x5, 0, 0           	INCF	r0x05, W
0014c8   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00120_DS_:
                                           ;	.line	51; src/clock.c	if(BUTTON1_IO == 0u){
0014ca   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0014cc   d006     bra	0x14da               	BRA	_00116_DS_
                                           ;	.line	52; src/clock.c	LCDErase();
0014ce   ecb6     call	0x256c, 0           	CALL	_LCDErase
0014d0   f012
                                           ;	.line	53; src/clock.c	return value;
0014d2   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0014d4   fff3
0014d6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0014d8   d036     bra	0x1546               	BRA	_00122_DS_
                                           _00116_DS_:
                                           ;	.line	55; src/clock.c	if(BUTTON0_IO == 0u) 
0014da   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0014dc   d012     bra	0x1502               	BRA	_00118_DS_
                                           ;	.line	56; src/clock.c	value = (++value)%maxvalue;
0014de   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0014e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014e2   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0014e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ec   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0014ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0014f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014f4   ecd1     call	0x1da2, 0           	CALL	__modsint
0014f6   f00e
0014f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0014fa   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0014fc   f007
0014fe   0e04     movlw	0x4                	MOVLW	0x04
001500   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00118_DS_:
                                           ;	.line	57; src/clock.c	display_string(length + 1, to_double_digits(value));
001502   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001506   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00150a   ecaf     call	0x275e, 0           	CALL	_to_double_digits
00150c   f013
00150e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001510   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001512   f004
001514   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
001516   f005
001518   0e02     movlw	0x2                	MOVLW	0x02
00151a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00151c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00151e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001520   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001524   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001528   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00152a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00152c   ec62     call	0x18c4, 0           	CALL	_display_string
00152e   f00c
001530   0e04     movlw	0x4                	MOVLW	0x04
001532   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	58; src/clock.c	delay_ms(50);
001534   0e00     movlw	0                  	MOVLW	0x00
001536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001538   0e32     movlw	0x32               	MOVLW	0x32
00153a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00153c   ec2e     call	0x2a5c, 0           	CALL	_delay_ms
00153e   f015
001540   0e02     movlw	0x2                	MOVLW	0x02
001542   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001544   d7c2     bra	0x14ca               	BRA	_00120_DS_
                                           _00122_DS_:
001546   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001548   f007
00154a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00154c   f006
00154e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001550   f005
001552   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001554   f004
001556   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001558   f003
00155a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00155c   f002
00155e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001560   f001
001562   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001564   f000
001566   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001568   ffd9
00156a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_clock	code
                                           _init_clock:
                                           ;	.line	37; src/clock.c	void init_clock(time t){
00168e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001690   ffe5
001692   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001694   ffd9
001696   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001698   ffe5
00169a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00169c   ffe5
00169e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0016a0   ffe5
0016a2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0016a4   ffe5
0016a6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0016a8   ffe5
0016aa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0016ac   ffe5
0016ae   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0016b0   ffe5
0016b2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0016b4   ffe5
0016b6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0016b8   ffe5
0016ba   0e02     movlw	0x2                	MOVLW	0x02
0016bc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0016be   f000
0016c0   0e03     movlw	0x3                	MOVLW	0x03
0016c2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0016c4   f001
0016c6   0e04     movlw	0x4                	MOVLW	0x04
0016c8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0016ca   f002
                                           ;	.line	39; src/clock.c	h = get_input(24, "HOURS:");
0016cc   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0016ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d0   0e17     movlw	0x17               	MOVLW	HIGH(__str_0)
0016d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d4   0e88     movlw	0x88               	MOVLW	LOW(__str_0)
0016d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d8   0e00     movlw	0                  	MOVLW	0x00
0016da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016dc   0e18     movlw	0x18               	MOVLW	0x18
0016de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e0   ec25     call	0x144a, 0           	CALL	_get_input
0016e2   f00a
0016e4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0016e6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0016e8   f004
0016ea   0e05     movlw	0x5                	MOVLW	0x05
0016ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	40; src/clock.c	m = get_input(60, "MINUTES:");
0016ee   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
0016f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016f2   0e17     movlw	0x17               	MOVLW	HIGH(__str_1)
0016f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016f6   0e90     movlw	0x90               	MOVLW	LOW(__str_1)
0016f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016fa   0e00     movlw	0                  	MOVLW	0x00
0016fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016fe   0e3c     movlw	0x3c               	MOVLW	0x3c
001700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001702   ec25     call	0x144a, 0           	CALL	_get_input
001704   f00a
001706   6e05     movwf	0x5, 0             	MOVWF	r0x05
001708   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00170a   f006
00170c   0e05     movlw	0x5                	MOVLW	0x05
00170e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/clock.c	s = get_input(60, "SECONDS:");
001710   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001712   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001714   0e17     movlw	0x17               	MOVLW	HIGH(__str_2)
001716   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001718   0e9a     movlw	0x9a               	MOVLW	LOW(__str_2)
00171a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00171c   0e00     movlw	0                  	MOVLW	0x00
00171e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001720   0e3c     movlw	0x3c               	MOVLW	0x3c
001722   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001724   ec25     call	0x144a, 0           	CALL	_get_input
001726   f00a
001728   6e07     movwf	0x7, 0             	MOVWF	r0x07
00172a   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
00172c   f008
00172e   0e05     movlw	0x5                	MOVLW	0x05
001730   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	42; src/clock.c	time_set(t,h,m,s);
001732   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001736   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00173c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001742   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001746   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00174a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00174c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00174e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001752   5000     movf	0, 0, 0             	MOVF	r0x00, W
001754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001756   ec43     call	0x1e86, 0           	CALL	_time_set
001758   f00f
00175a   0e09     movlw	0x9                	MOVLW	0x09
00175c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00175e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001760   f008
001762   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001764   f007
001766   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001768   f006
00176a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00176c   f005
00176e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001770   f004
001772   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001774   f003
001776   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001778   f002
00177a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00177c   f001
00177e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001780   f000
001782   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001784   ffd9
001786   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001788   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
00178a   5255     movf	0x55, 0x1, 0        
00178c   3a53     swapf	0x53, 0x1, 0       
00178e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001790   494d     infsnz	0x4d, 0, 0x1      	DB	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x3a, 0x00
001792   554e     subfwb	0x4e, 0, 0x1      
001794   4554     rlncf	0x54, 0, 0x1       
001796   3a53     swapf	0x53, 0x1, 0       
001798   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
00179a   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x3a, 0x00
00179c   4f43     dcfsnz	0x43, 0x1, 0x1    
00179e   444e     rlncf	0x4e, 0, 0         
0017a0   3a53     swapf	0x53, 0x1, 0       
0017a2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0017a4   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
0017a6   6432     cpfsgt	0x32, 0           
0017a8   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1226 (0x04ca) bytes ( 0.94%)
                                           ;           	  613 (0x0265) words
                                           ; udata size:	   38 (0x0026) bytes ( 0.99%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:10:15 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
00256c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00256e   ffe5
002570   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002572   ffd9
002574   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002576   ffe5
002578   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00257a   ffe5
00257c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00257e   ffe5
002580   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002582   ffe5
002584   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002586   ffe5
002588   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00258a   ffe5
00258c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00258e   ffe5
002590   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002592   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002594   0e01     movlw	0x1                	MOVLW	0x01
002596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002598   0e00     movlw	0                  	MOVLW	0x00
00259a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00259c   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
00259e   f014
0025a0   0e02     movlw	0x2                	MOVLW	0x02
0025a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0025a4   0e48     movlw	0x48               	MOVLW	0x48
0025a6   6e00     movwf	0, 0               	MOVWF	r0x00
0025a8   0e0d     movlw	0xd                	MOVLW	0x0d
0025aa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0025ac   6a02     clrf	0x2, 0              	CLRF	r0x02
0025ae   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0025b0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0025b2   f004
0025b4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0025b6   f005
0025b8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0025ba   f006
0025bc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0025be   f007
0025c0   0eff     movlw	0xff               	MOVLW	0xff
0025c2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0025c4   0eff     movlw	0xff               	MOVLW	0xff
0025c6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0025c8   0eff     movlw	0xff               	MOVLW	0xff
0025ca   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0025cc   0eff     movlw	0xff               	MOVLW	0xff
0025ce   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0025d0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025d2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0025d4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0025d6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0025d8   e1eb     bnz	0x25b0               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0025da   0e00     movlw	0                  	MOVLW	0x00
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   0e20     movlw	0x20               	MOVLW	0x20
0025e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e2   0e20     movlw	0x20               	MOVLW	0x20
0025e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0025e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ea   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0025ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ee   ecb3     call	0x1f66, 0           	CALL	_memset
0025f0   f00f
0025f2   0e05     movlw	0x5                	MOVLW	0x05
0025f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025f6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0025f8   f007
0025fa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0025fc   f006
0025fe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002600   f005
002602   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002604   f004
002606   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002608   f003
00260a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00260c   f002
00260e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002610   f001
002612   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002614   f000
002616   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002618   ffd9
00261a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
00083a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00083c   ffe5
00083e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000840   ffd9
000842   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000844   ffe5
000846   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000848   ffe5
00084a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00084c   ffe5
00084e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000850   ffe5
000852   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000854   ffe5
000856   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000858   ffe5
00085a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00085c   ffe5
00085e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000860   ffe5
000862   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000864   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000866   0e02     movlw	0x2                	MOVLW	0x02
000868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086a   0e00     movlw	0                  	MOVLW	0x00
00086c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086e   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000870   f014
000872   0e02     movlw	0x2                	MOVLW	0x02
000874   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000876   0e48     movlw	0x48               	MOVLW	0x48
000878   6e00     movwf	0, 0               	MOVWF	r0x00
00087a   0e0d     movlw	0xd                	MOVLW	0x0d
00087c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00087e   6a02     clrf	0x2, 0              	CLRF	r0x02
000880   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000882   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000884   f004
000886   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000888   f005
00088a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00088c   f006
00088e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000890   f007
000892   0eff     movlw	0xff               	MOVLW	0xff
000894   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000896   0eff     movlw	0xff               	MOVLW	0xff
000898   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008a4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008a6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008a8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008aa   e1eb     bnz	0x882                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008ac   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b0   f001
0008b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0008b4   0e00     movlw	0                  	MOVLW	0x00
0008b6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008b8   e102     bnz	0x8be                	BNZ	_00297_DS_
0008ba   0e10     movlw	0x10               	MOVLW	0x10
0008bc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c0   d057     bra	0x970                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008c2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008c4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008c6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0008ca   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008cc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008ce   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d0   ffe9
0008d2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008d4   ffea
0008d6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008d8   f001
0008da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008dc   e119     bnz	0x910                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008de   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e0   f001
                                           _00253_DS_:
0008e2   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008e4   f002
0008e6   6a03     clrf	0x3, 0              	CLRF	r0x03
0008e8   0e00     movlw	0                  	MOVLW	0x00
0008ea   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008ec   e102     bnz	0x8f2                	BNZ	_00298_DS_
0008ee   0e10     movlw	0x10               	MOVLW	0x10
0008f0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008f2   e20e     bc	0x910                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008f4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008f6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0008f8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008fa   6a03     clrf	0x3, 0              	CLRF	r0x03
0008fc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008fe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000900   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000902   ffe9
000904   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000906   ffea
000908   0e20     movlw	0x20               	MOVLW	0x20
00090a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
00090c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00090e   d7e9     bra	0x8e2                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000910   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000912   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000914   6e01     movwf	0x1, 0             	MOVWF	r0x01
000916   6a02     clrf	0x2, 0              	CLRF	r0x02
000918   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00091a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00091c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00091e   ffe9
000920   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000922   ffea
000924   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000926   f001
000928   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00092a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092c   0e01     movlw	0x1                	MOVLW	0x01
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000932   f014
000934   0e02     movlw	0x2                	MOVLW	0x02
000936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000938   0e55     movlw	0x55               	MOVLW	0x55
00093a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00093c   6a02     clrf	0x2, 0              	CLRF	r0x02
00093e   6a03     clrf	0x3, 0              	CLRF	r0x03
000940   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000942   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000944   f005
000946   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000948   f006
00094a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00094c   f007
00094e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000950   f008
000952   0eff     movlw	0xff               	MOVLW	0xff
000954   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000956   0eff     movlw	0xff               	MOVLW	0xff
000958   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000962   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000964   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000966   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000968   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00096a   e1eb     bnz	0x942                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
00096c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00096e   d79f     bra	0x8ae                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000970   0ec0     movlw	0xc0               	MOVLW	0xc0
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   0e00     movlw	0                  	MOVLW	0x00
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
00097a   f014
00097c   0e02     movlw	0x2                	MOVLW	0x02
00097e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000980   0e55     movlw	0x55               	MOVLW	0x55
000982   6e00     movwf	0, 0               	MOVWF	r0x00
000984   6a01     clrf	0x1, 0              	CLRF	r0x01
000986   6a02     clrf	0x2, 0              	CLRF	r0x02
000988   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00098a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00098c   f004
00098e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000990   f005
000992   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000994   f006
000996   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000998   f007
00099a   0eff     movlw	0xff               	MOVLW	0xff
00099c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00099e   0eff     movlw	0xff               	MOVLW	0xff
0009a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009b2   e1eb     bnz	0x98a                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009b4   0e10     movlw	0x10               	MOVLW	0x10
0009b6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009b8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ba   f001
0009bc   6a02     clrf	0x2, 0              	CLRF	r0x02
0009be   0e00     movlw	0                  	MOVLW	0x00
0009c0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009c2   e102     bnz	0x9c8                	BNZ	_00299_DS_
0009c4   0e20     movlw	0x20               	MOVLW	0x20
0009c6   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009c8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009ca   d057     bra	0xa7a                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009cc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009ce   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009d2   6a02     clrf	0x2, 0              	CLRF	r0x02
0009d4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009d8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009da   ffe9
0009dc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009de   ffea
0009e0   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009e2   f001
0009e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e6   e119     bnz	0xa1a                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009e8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ea   f001
                                           _00261_DS_:
0009ec   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009ee   f002
0009f0   6a03     clrf	0x3, 0              	CLRF	r0x03
0009f2   0e00     movlw	0                  	MOVLW	0x00
0009f4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009f6   e102     bnz	0x9fc                	BNZ	_00300_DS_
0009f8   0e20     movlw	0x20               	MOVLW	0x20
0009fa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0009fc   e20e     bc	0xa1a                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
0009fe   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a00   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a02   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a04   6a03     clrf	0x3, 0              	CLRF	r0x03
000a06   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a0a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a0c   ffe9
000a0e   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a10   ffea
000a12   0e20     movlw	0x20               	MOVLW	0x20
000a14   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a16   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a18   d7e9     bra	0x9ec                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a1a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a1c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   6a02     clrf	0x2, 0              	CLRF	r0x02
000a22   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a26   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a28   ffe9
000a2a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a2c   ffea
000a2e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a30   f001
000a32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0e01     movlw	0x1                	MOVLW	0x01
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000a3c   f014
000a3e   0e02     movlw	0x2                	MOVLW	0x02
000a40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a42   0e55     movlw	0x55               	MOVLW	0x55
000a44   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a46   6a02     clrf	0x2, 0              	CLRF	r0x02
000a48   6a03     clrf	0x3, 0              	CLRF	r0x03
000a4a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a4c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a4e   f005
000a50   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a52   f006
000a54   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a56   f007
000a58   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a5a   f008
000a5c   0eff     movlw	0xff               	MOVLW	0xff
000a5e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a60   0eff     movlw	0xff               	MOVLW	0xff
000a62   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a6c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a6e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a70   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a72   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a74   e1eb     bnz	0xa4c                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a76   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a78   d79f     bra	0x9b8                	BRA	_00265_DS_
                                           _00269_DS_:
000a7a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a7c   f008
000a7e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a80   f007
000a82   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a84   f006
000a86   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a88   f005
000a8a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a8c   f004
000a8e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a90   f003
000a92   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a94   f002
000a96   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000a98   f001
000a9a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a9c   f000
000a9e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa0   ffd9
000aa2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aa4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aa6   ffe5
000aa8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000aaa   ffd9
000aac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000aae   ffe5
000ab0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ab2   ffe5
000ab4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ab6   ffe5
000ab8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000aba   ffe5
000abc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000abe   ffe5
000ac0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ac2   ffe5
000ac4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ac6   ffe5
000ac8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000aca   ffe5
000acc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ace   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad0   0e00     movlw	0                  	MOVLW	0x00
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   0e20     movlw	0x20               	MOVLW	0x20
000ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad8   0e20     movlw	0x20               	MOVLW	0x20
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   ecb3     call	0x1f66, 0           	CALL	_memset
000ae6   f00f
000ae8   0e05     movlw	0x5                	MOVLW	0x05
000aea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000aec   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000aee   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af0   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000af2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000af4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000af6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000af8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000afa   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000afc   0ea0     movlw	0xa0               	MOVLW	0xa0
000afe   6e00     movwf	0, 0               	MOVWF	r0x00
000b00   0e09     movlw	0x9                	MOVLW	0x09
000b02   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b04   0e01     movlw	0x1                	MOVLW	0x01
000b06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b08   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b0a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b0c   f004
000b0e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b10   f005
000b12   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b14   f006
000b16   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b18   f007
000b1a   0eff     movlw	0xff               	MOVLW	0xff
000b1c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b1e   0eff     movlw	0xff               	MOVLW	0xff
000b20   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b2c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b2e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b30   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b32   e1eb     bnz	0xb0a                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b34   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b36   0e03     movlw	0x3                	MOVLW	0x03
000b38   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b3a   0000     nop                      	nop 
000b3c   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b3e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b40   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b42   f001
000b44   6a02     clrf	0x2, 0              	CLRF	r0x02
000b46   0e00     movlw	0                  	MOVLW	0x00
000b48   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b4a   e102     bnz	0xb50                	BNZ	_00220_DS_
000b4c   0e03     movlw	0x3                	MOVLW	0x03
000b4e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b50   e239     bc	0xbc4                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b52   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b54   0e11     movlw	0x11               	MOVLW	0x11
000b56   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b58   6a02     clrf	0x2, 0              	CLRF	r0x02
000b5a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b5c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b5e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b60   f005
000b62   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b64   f006
000b66   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b68   f007
000b6a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b6c   f008
000b6e   0eff     movlw	0xff               	MOVLW	0xff
000b70   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b72   0eff     movlw	0xff               	MOVLW	0xff
000b74   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b80   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b84   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b86   e1eb     bnz	0xb5e                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b88   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b8a   0e48     movlw	0x48               	MOVLW	0x48
000b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b8e   0e0d     movlw	0xd                	MOVLW	0x0d
000b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b92   6a03     clrf	0x3, 0              	CLRF	r0x03
000b94   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b96   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b98   f005
000b9a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b9c   f006
000b9e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba0   f007
000ba2   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000ba4   f008
000ba6   0eff     movlw	0xff               	MOVLW	0xff
000ba8   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000baa   0eff     movlw	0xff               	MOVLW	0xff
000bac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bb6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bba   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bbc   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bbe   e1eb     bnz	0xb96                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bc2   d7be     bra	0xb40                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bc4   0e38     movlw	0x38               	MOVLW	0x38
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   0e00     movlw	0                  	MOVLW	0x00
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000bce   f014
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bd4   0e55     movlw	0x55               	MOVLW	0x55
000bd6   6e00     movwf	0, 0               	MOVWF	r0x00
000bd8   6a01     clrf	0x1, 0              	CLRF	r0x01
000bda   6a02     clrf	0x2, 0              	CLRF	r0x02
000bdc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000bde   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be0   f004
000be2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000be4   f005
000be6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000be8   f006
000bea   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bec   f007
000bee   0eff     movlw	0xff               	MOVLW	0xff
000bf0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bf2   0eff     movlw	0xff               	MOVLW	0xff
000bf4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bfe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c00   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c02   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c04   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c06   e1eb     bnz	0xbde                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c08   0e06     movlw	0x6                	MOVLW	0x06
000c0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0c   0e00     movlw	0                  	MOVLW	0x00
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000c12   f014
000c14   0e02     movlw	0x2                	MOVLW	0x02
000c16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c18   0e55     movlw	0x55               	MOVLW	0x55
000c1a   6e00     movwf	0, 0               	MOVWF	r0x00
000c1c   6a01     clrf	0x1, 0              	CLRF	r0x01
000c1e   6a02     clrf	0x2, 0              	CLRF	r0x02
000c20   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c22   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c24   f004
000c26   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c28   f005
000c2a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c2c   f006
000c2e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c30   f007
000c32   0eff     movlw	0xff               	MOVLW	0xff
000c34   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c36   0eff     movlw	0xff               	MOVLW	0xff
000c38   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c44   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c46   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c48   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c4a   e1eb     bnz	0xc22                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c4c   0e0c     movlw	0xc                	MOVLW	0x0c
000c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c50   0e00     movlw	0                  	MOVLW	0x00
000c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c54   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000c56   f014
000c58   0e02     movlw	0x2                	MOVLW	0x02
000c5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c5c   0e55     movlw	0x55               	MOVLW	0x55
000c5e   6e00     movwf	0, 0               	MOVWF	r0x00
000c60   6a01     clrf	0x1, 0              	CLRF	r0x01
000c62   6a02     clrf	0x2, 0              	CLRF	r0x02
000c64   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c66   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c68   f004
000c6a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c6c   f005
000c6e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c70   f006
000c72   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c74   f007
000c76   0eff     movlw	0xff               	MOVLW	0xff
000c78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c7a   0eff     movlw	0xff               	MOVLW	0xff
000c7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c88   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c8a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c8c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c8e   e1eb     bnz	0xc66                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c90   0e01     movlw	0x1                	MOVLW	0x01
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   0e00     movlw	0                  	MOVLW	0x00
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   ecfd     call	0x29fa, 0           	CALL	_LCDWrite
000c9a   f014
000c9c   0e02     movlw	0x2                	MOVLW	0x02
000c9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca0   0e48     movlw	0x48               	MOVLW	0x48
000ca2   6e00     movwf	0, 0               	MOVWF	r0x00
000ca4   0e0d     movlw	0xd                	MOVLW	0x0d
000ca6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca8   6a02     clrf	0x2, 0              	CLRF	r0x02
000caa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cac   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cae   f004
000cb0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cb2   f005
000cb4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cb6   f006
000cb8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cba   f007
000cbc   0eff     movlw	0xff               	MOVLW	0xff
000cbe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc0   0eff     movlw	0xff               	MOVLW	0xff
000cc2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ccc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cce   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cd2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cd4   e1eb     bnz	0xcac                	BNZ	_00185_DS_
000cd6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cd8   f008
000cda   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cdc   f007
000cde   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce0   f006
000ce2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ce4   f005
000ce6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ce8   f004
000cea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cec   f003
000cee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf0   f002
000cf2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cf4   f001
000cf6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf8   f000
000cfa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cfc   ffd9
000cfe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0029fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0029fc   ffe5
0029fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a00   ffd9
002a02   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a04   ffe5
002a06   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a08   ffe5
002a0a   0e02     movlw	0x2                	MOVLW	0x02
002a0c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a0e   f000
002a10   0e03     movlw	0x3                	MOVLW	0x03
002a12   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a14   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002a16   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002a18   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002a1a   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002a1c   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002a1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a20   0b01     andlw	0x1                	ANDLW	0x01
002a22   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002a24   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002a26   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002a28   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002a2a   0bfb     andlw	0xfb               	ANDLW	0xfb
002a2c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002a2e   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002a30   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002a32   ff8d
002a34   0000     nop                      	nop 
002a36   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002a38   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002a3a   0000     nop                      	nop 
002a3c   0000     nop                      	nop 
002a3e   0000     nop                      	nop 
002a40   0000     nop                      	nop 
002a42   0000     nop                      	nop 
002a44   0000     nop                      	nop 
002a46   0000     nop                      	nop 
002a48   0000     nop                      	nop 
002a4a   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002a4c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002a4e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a50   f001
002a52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a54   f000
002a56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a58   ffd9
002a5a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:15:36 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
00103e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001040   ffe5
001042   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001044   ffd9
001046   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001048   ffe5
00104a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00104c   ffe5
00104e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001050   ffe5
001052   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001054   ffe5
001056   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001058   ffe5
00105a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00105c   ffe5
00105e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001060   ffe5
001062   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001064   ffe5
001066   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001068   ffe5
00106a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00106c   ffe5
00106e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001070   ffe5
001072   0e02     movlw	0x2                	MOVLW	0x02
001074   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001076   f000
001078   0e03     movlw	0x3                	MOVLW	0x03
00107a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00107c   f001
00107e   0e04     movlw	0x4                	MOVLW	0x04
001080   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001082   f002
001084   0e05     movlw	0x5                	MOVLW	0x05
001086   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001088   f003
00108a   0e06     movlw	0x6                	MOVLW	0x06
00108c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00108e   f004
001090   0e07     movlw	0x7                	MOVLW	0x07
001092   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001094   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
001096   5000     movf	0, 0, 0             	MOVF	r0x00, W
001098   0f04     addlw	0x4                	ADDLW	0x04
00109a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00109c   0e00     movlw	0                  	MOVLW	0x00
00109e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0010a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0010a2   0e00     movlw	0                  	MOVLW	0x00
0010a4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0010a6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010a8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0010aa   ffe9
0010ac   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0010ae   fff3
0010b0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0010b2   ecab     call	0x2b56, 0           	CALL	__gptrget2
0010b4   f015
0010b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010b8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0010ba   f007
0010bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010be   0f04     addlw	0x4                	ADDLW	0x04
0010c0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010c2   0e00     movlw	0                  	MOVLW	0x00
0010c4   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0010c6   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010c8   0e00     movlw	0                  	MOVLW	0x00
0010ca   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0010cc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0010ce   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0010d0   ffe9
0010d2   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0010d4   fff3
0010d6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010d8   ecab     call	0x2b56, 0           	CALL	__gptrget2
0010da   f015
0010dc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010de   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0010e0   f009
0010e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010e4   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0010e6   e103     bnz	0x10ee               	BNZ	_00166_DS_
0010e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0010ea   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0010ec   e003     bz	0x10f4                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
0010ee   6af3     clrf	0xf3, 0             	CLRF	PRODL
0010f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010f2   d04e     bra	0x1190               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
0010f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010f6   0f02     addlw	0x2                	ADDLW	0x02
0010f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010fa   0e00     movlw	0                  	MOVLW	0x00
0010fc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0010fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
001100   0e00     movlw	0                  	MOVLW	0x00
001102   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001104   6e08     movwf	0x8, 0             	MOVWF	r0x08
001106   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001108   ffe9
00110a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00110c   fff3
00110e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001110   ecab     call	0x2b56, 0           	CALL	__gptrget2
001112   f015
001114   6e06     movwf	0x6, 0             	MOVWF	r0x06
001116   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001118   f007
00111a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00111c   0f02     addlw	0x2                	ADDLW	0x02
00111e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001120   0e00     movlw	0                  	MOVLW	0x00
001122   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001124   6e09     movwf	0x9, 0             	MOVWF	r0x09
001126   0e00     movlw	0                  	MOVLW	0x00
001128   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00112a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00112c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00112e   ffe9
001130   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001132   fff3
001134   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001136   ecab     call	0x2b56, 0           	CALL	__gptrget2
001138   f015
00113a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00113c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00113e   f009
001140   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001142   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001144   e103     bnz	0x114c               	BNZ	_00168_DS_
001146   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001148   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00114a   e003     bz	0x1152                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
00114c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00114e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001150   d01f     bra	0x1190               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
001152   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001154   ffe9
001156   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001158   fff3
00115a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00115c   ecab     call	0x2b56, 0           	CALL	__gptrget2
00115e   f015
001160   6e00     movwf	0, 0               	MOVWF	r0x00
001162   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001164   f001
001166   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001168   ffe9
00116a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00116c   fff3
00116e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001170   ecab     call	0x2b56, 0           	CALL	__gptrget2
001172   f015
001174   6e03     movwf	0x3, 0             	MOVWF	r0x03
001176   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001178   f004
00117a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00117c   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
00117e   e103     bnz	0x1186               	BNZ	_00170_DS_
001180   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001182   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
001184   e003     bz	0x118c                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
001186   6af3     clrf	0xf3, 0             	CLRF	PRODL
001188   6ae8     clrf	0xe8, 0             	CLRF	WREG
00118a   d002     bra	0x1190               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
00118c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00118e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
001190   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001192   f00a
001194   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001196   f009
001198   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00119a   f008
00119c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00119e   f007
0011a0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0011a2   f006
0011a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0011a6   f005
0011a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0011aa   f004
0011ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0011ae   f003
0011b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0011b2   f002
0011b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011b6   f001
0011b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011ba   f000
0011bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011be   ffd9
0011c0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
00156c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00156e   ffe5
001570   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001572   ffd9
001574   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001576   ffe5
001578   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00157a   ffe5
00157c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00157e   ffe5
001580   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001582   ffe5
001584   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001586   ffe5
001588   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00158a   ffe5
00158c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00158e   ffe5
001590   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001592   ffe5
001594   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001596   ffe5
001598   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00159a   ffe5
00159c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00159e   ffe5
0015a0   0e02     movlw	0x2                	MOVLW	0x02
0015a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0015a4   f000
0015a6   0e03     movlw	0x3                	MOVLW	0x03
0015a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0015aa   f001
0015ac   0e04     movlw	0x4                	MOVLW	0x04
0015ae   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0015b0   f002
0015b2   0e05     movlw	0x5                	MOVLW	0x05
0015b4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0015b6   f003
0015b8   0e06     movlw	0x6                	MOVLW	0x06
0015ba   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0015bc   f004
0015be   0e07     movlw	0x7                	MOVLW	0x07
0015c0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0015c2   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
0015c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015c6   0f04     addlw	0x4                	ADDLW	0x04
0015c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0015ca   0e00     movlw	0                  	MOVLW	0x00
0015cc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0015ce   6e07     movwf	0x7, 0             	MOVWF	r0x07
0015d0   0e00     movlw	0                  	MOVLW	0x00
0015d2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0015d4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0015d6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0015d8   ffe9
0015da   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0015dc   fff3
0015de   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0015e0   ecab     call	0x2b56, 0           	CALL	__gptrget2
0015e2   f015
0015e4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0015e6   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0015e8   f007
0015ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015ec   0f02     addlw	0x2                	ADDLW	0x02
0015ee   6e08     movwf	0x8, 0             	MOVWF	r0x08
0015f0   0e00     movlw	0                  	MOVLW	0x00
0015f2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0015f4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0015f6   0e00     movlw	0                  	MOVLW	0x00
0015f8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0015fa   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0015fc   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0015fe   ffe9
001600   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001602   fff3
001604   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001606   ecab     call	0x2b56, 0           	CALL	__gptrget2
001608   f015
00160a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00160c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00160e   f009
001610   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001612   ffe9
001614   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001616   fff3
001618   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00161a   ecab     call	0x2b56, 0           	CALL	__gptrget2
00161c   f015
00161e   6e00     movwf	0, 0               	MOVWF	r0x00
001620   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001622   f001
001624   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001628   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00162a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00162c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00162e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001630   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001632   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001634   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001636   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001638   5000     movf	0, 0, 0             	MOVF	r0x00, W
00163a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00163c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
00163e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001640   0e28     movlw	0x28               	MOVLW	HIGH(__str_0)
001642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001644   0eec     movlw	0xec               	MOVLW	LOW(__str_0)
001646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001648   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00164a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00164c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00164e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001650   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001654   ec5c     call	0x1cb8, 0           	CALL	_sprintf
001656   f00e
001658   0e0c     movlw	0xc                	MOVLW	0x0c
00165a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00165c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00165e   f00a
001660   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001662   f009
001664   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001666   f008
001668   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00166a   f007
00166c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00166e   f006
001670   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001672   f005
001674   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001676   f004
001678   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00167a   f003
00167c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00167e   f002
001680   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001682   f001
001684   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001686   f000
001688   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00168a   ffd9
00168c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
00297c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00297e   ffe5
002980   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002982   ffd9
002984   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002986   ffe5
002988   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00298a   ffe5
00298c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00298e   ffe5
002990   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002992   ffe5
002994   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002996   ffe5
002998   0e02     movlw	0x2                	MOVLW	0x02
00299a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00299c   f000
00299e   0e03     movlw	0x3                	MOVLW	0x03
0029a0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029a2   f001
0029a4   0e04     movlw	0x4                	MOVLW	0x04
0029a6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0029a8   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
0029aa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0029ac   ffe9
0029ae   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0029b0   fff3
0029b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029b4   ecab     call	0x2b56, 0           	CALL	__gptrget2
0029b6   f015
0029b8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029ba   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029bc   f004
0029be   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0029c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0029c2   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0029c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d8   ec44     call	0x2288, 0           	CALL	_set_hours
0029da   f011
0029dc   0e05     movlw	0x5                	MOVLW	0x05
0029de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029e2   f004
0029e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029e6   f003
0029e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029ea   f002
0029ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029ee   f001
0029f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029f2   f000
0029f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029f6   ffd9
0029f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
002344   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002346   ffe5
002348   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00234a   ffd9
00234c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00234e   ffe5
002350   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002352   ffe5
002354   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002356   ffe5
002358   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00235a   ffe5
00235c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00235e   ffe5
002360   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002362   ffe5
002364   0e02     movlw	0x2                	MOVLW	0x02
002366   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002368   f000
00236a   0e03     movlw	0x3                	MOVLW	0x03
00236c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00236e   f001
002370   0e04     movlw	0x4                	MOVLW	0x04
002372   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002374   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002376   5000     movf	0, 0, 0             	MOVF	r0x00, W
002378   0f02     addlw	0x2                	ADDLW	0x02
00237a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00237c   0e00     movlw	0                  	MOVLW	0x00
00237e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002380   6e04     movwf	0x4, 0             	MOVWF	r0x04
002382   0e00     movlw	0                  	MOVLW	0x00
002384   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002386   6e05     movwf	0x5, 0             	MOVWF	r0x05
002388   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00238a   ffe9
00238c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00238e   fff3
002390   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002392   ecab     call	0x2b56, 0           	CALL	__gptrget2
002394   f015
002396   6e03     movwf	0x3, 0             	MOVWF	r0x03
002398   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00239a   f004
00239c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00239e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0023a0   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0023a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0023b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0023b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023b6   ec7c     call	0x20f8, 0           	CALL	_set_minutes
0023b8   f010
0023ba   6e03     movwf	0x3, 0             	MOVWF	r0x03
0023bc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0023be   f004
0023c0   0e05     movlw	0x5                	MOVLW	0x05
0023c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0023c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023c6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0023c8   e00a     bz	0x23de                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0023ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0023d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0023d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023d6   ecbe     call	0x297c, 0           	CALL	_add_hour
0023d8   f014
0023da   0e03     movlw	0x3                	MOVLW	0x03
0023dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0023de   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0023e0   f005
0023e2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023e4   f004
0023e6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023e8   f003
0023ea   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023ec   f002
0023ee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023f0   f001
0023f2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0023f4   f000
0023f6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0023f8   ffd9
0023fa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
0023fc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0023fe   ffe5
002400   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002402   ffd9
002404   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002406   ffe5
002408   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00240a   ffe5
00240c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00240e   ffe5
002410   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002412   ffe5
002414   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002416   ffe5
002418   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00241a   ffe5
00241c   0e02     movlw	0x2                	MOVLW	0x02
00241e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002420   f000
002422   0e03     movlw	0x3                	MOVLW	0x03
002424   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002426   f001
002428   0e04     movlw	0x4                	MOVLW	0x04
00242a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00242c   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
00242e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002430   0f04     addlw	0x4                	ADDLW	0x04
002432   6e03     movwf	0x3, 0             	MOVWF	r0x03
002434   0e00     movlw	0                  	MOVLW	0x00
002436   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002438   6e04     movwf	0x4, 0             	MOVWF	r0x04
00243a   0e00     movlw	0                  	MOVLW	0x00
00243c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00243e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002440   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002442   ffe9
002444   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002446   fff3
002448   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00244a   ecab     call	0x2b56, 0           	CALL	__gptrget2
00244c   f015
00244e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002450   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002452   f004
002454   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002456   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002458   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00245a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00245c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00245e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002462   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002466   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002468   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00246a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00246c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00246e   ec18     call	0x2030, 0           	CALL	_set_seconds
002470   f010
002472   6e03     movwf	0x3, 0             	MOVWF	r0x03
002474   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002476   f004
002478   0e05     movlw	0x5                	MOVLW	0x05
00247a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00247c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00247e   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002480   e00a     bz	0x2496                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002482   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002486   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00248c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248e   eca2     call	0x2344, 0           	CALL	_add_minute
002490   f011
002492   0e03     movlw	0x3                	MOVLW	0x03
002494   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002496   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002498   f005
00249a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00249c   f004
00249e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024a0   f003
0024a2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0024a4   f002
0024a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0024a8   f001
0024aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0024ac   f000
0024ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024b0   ffd9
0024b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
002030   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002032   ffe5
002034   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002036   ffd9
002038   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00203a   ffe5
00203c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00203e   ffe5
002040   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002042   ffe5
002044   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002046   ffe5
002048   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00204a   ffe5
00204c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00204e   ffe5
002050   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002052   ffe5
002054   0e02     movlw	0x2                	MOVLW	0x02
002056   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002058   f000
00205a   0e03     movlw	0x3                	MOVLW	0x03
00205c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00205e   f001
002060   0e04     movlw	0x4                	MOVLW	0x04
002062   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002064   f002
002066   0e05     movlw	0x5                	MOVLW	0x05
002068   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00206a   f003
00206c   0e06     movlw	0x6                	MOVLW	0x06
00206e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002070   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
002072   0e00     movlw	0                  	MOVLW	0x00
002074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002076   0e3c     movlw	0x3c               	MOVLW	0x3c
002078   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00207a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00207c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00207e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002082   ec69     call	0x1ad2, 0           	CALL	__divsint
002084   f00d
002086   6e05     movwf	0x5, 0             	MOVWF	r0x05
002088   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00208a   f006
00208c   0e04     movlw	0x4                	MOVLW	0x04
00208e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
002090   0e04     movlw	0x4                	MOVLW	0x04
002092   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002094   0e00     movlw	0                  	MOVLW	0x00
002096   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002098   0e00     movlw	0                  	MOVLW	0x00
00209a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00209c   0e00     movlw	0                  	MOVLW	0x00
00209e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a0   0e3c     movlw	0x3c               	MOVLW	0x3c
0020a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020ac   ecd1     call	0x1da2, 0           	CALL	__modsint
0020ae   f00e
0020b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0020b2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0020b4   f004
0020b6   0e04     movlw	0x4                	MOVLW	0x04
0020b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0020ba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020bc   ffe5
0020be   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0020c0   fff4
0020c2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0020c4   ffe9
0020c6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0020c8   fff3
0020ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020cc   ec01     call	0x2c02, 0           	CALL	__gptrput2
0020ce   f016
                                           ;	.line	42; src/newtime.c	return overflow;
0020d0   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0020d2   fff3
0020d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020d6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0020d8   f006
0020da   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0020dc   f005
0020de   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0020e0   f004
0020e2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0020e4   f003
0020e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0020e8   f002
0020ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0020ec   f001
0020ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0020f0   f000
0020f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0020f4   ffd9
0020f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
0020f8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0020fa   ffe5
0020fc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0020fe   ffd9
002100   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002102   ffe5
002104   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002106   ffe5
002108   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00210a   ffe5
00210c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00210e   ffe5
002110   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002112   ffe5
002114   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002116   ffe5
002118   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00211a   ffe5
00211c   0e02     movlw	0x2                	MOVLW	0x02
00211e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002120   f000
002122   0e03     movlw	0x3                	MOVLW	0x03
002124   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002126   f001
002128   0e04     movlw	0x4                	MOVLW	0x04
00212a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00212c   f002
00212e   0e05     movlw	0x5                	MOVLW	0x05
002130   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002132   f003
002134   0e06     movlw	0x6                	MOVLW	0x06
002136   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002138   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
00213a   0e00     movlw	0                  	MOVLW	0x00
00213c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213e   0e3c     movlw	0x3c               	MOVLW	0x3c
002140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002142   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002146   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00214a   ec69     call	0x1ad2, 0           	CALL	__divsint
00214c   f00d
00214e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002150   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002152   f006
002154   0e04     movlw	0x4                	MOVLW	0x04
002156   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002158   0e02     movlw	0x2                	MOVLW	0x02
00215a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00215c   0e00     movlw	0                  	MOVLW	0x00
00215e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002160   0e00     movlw	0                  	MOVLW	0x00
002162   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002164   0e00     movlw	0                  	MOVLW	0x00
002166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002168   0e3c     movlw	0x3c               	MOVLW	0x3c
00216a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00216c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00216e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002170   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002174   ecd1     call	0x1da2, 0           	CALL	__modsint
002176   f00e
002178   6e03     movwf	0x3, 0             	MOVWF	r0x03
00217a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00217c   f004
00217e   0e04     movlw	0x4                	MOVLW	0x04
002180   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002182   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002184   ffe5
002186   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002188   fff4
00218a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00218c   ffe9
00218e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002190   fff3
002192   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002194   ec01     call	0x2c02, 0           	CALL	__gptrput2
002196   f016
                                           ;	.line	36; src/newtime.c	return overflow;
002198   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00219a   fff3
00219c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00219e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0021a0   f006
0021a2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0021a4   f005
0021a6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021a8   f004
0021aa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021ac   f003
0021ae   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021b0   f002
0021b2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021b4   f001
0021b6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021b8   f000
0021ba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021bc   ffd9
0021be   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002288   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00228a   ffe5
00228c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00228e   ffd9
002290   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002292   ffe5
002294   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002296   ffe5
002298   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00229a   ffe5
00229c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00229e   ffe5
0022a0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0022a2   ffe5
0022a4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0022a6   ffe5
0022a8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0022aa   ffe5
0022ac   0e02     movlw	0x2                	MOVLW	0x02
0022ae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0022b0   f000
0022b2   0e03     movlw	0x3                	MOVLW	0x03
0022b4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0022b6   f001
0022b8   0e04     movlw	0x4                	MOVLW	0x04
0022ba   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0022bc   f002
0022be   0e05     movlw	0x5                	MOVLW	0x05
0022c0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0022c2   f003
0022c4   0e06     movlw	0x6                	MOVLW	0x06
0022c6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0022c8   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0022ca   0e00     movlw	0                  	MOVLW	0x00
0022cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ce   0e18     movlw	0x18               	MOVLW	0x18
0022d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022da   ec69     call	0x1ad2, 0           	CALL	__divsint
0022dc   f00d
0022de   6e05     movwf	0x5, 0             	MOVWF	r0x05
0022e0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0022e2   f006
0022e4   0e04     movlw	0x4                	MOVLW	0x04
0022e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0022e8   0e00     movlw	0                  	MOVLW	0x00
0022ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ec   0e18     movlw	0x18               	MOVLW	0x18
0022ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f8   ecd1     call	0x1da2, 0           	CALL	__modsint
0022fa   f00e
0022fc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022fe   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002300   f004
002302   0e04     movlw	0x4                	MOVLW	0x04
002304   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002306   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002308   ffe5
00230a   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00230c   fff4
00230e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002310   ffe9
002312   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002314   fff3
002316   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002318   ec01     call	0x2c02, 0           	CALL	__gptrput2
00231a   f016
                                           ;	.line	30; src/newtime.c	return overflow;
00231c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00231e   fff3
002320   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002322   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002324   f006
002326   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002328   f005
00232a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00232c   f004
00232e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002330   f003
002332   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002334   f002
002336   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002338   f001
00233a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00233c   f000
00233e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002340   ffd9
002342   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
001e86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001e88   ffe5
001e8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001e8c   ffd9
001e8e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001e90   ffe5
001e92   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001e94   ffe5
001e96   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001e98   ffe5
001e9a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001e9c   ffe5
001e9e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001ea0   ffe5
001ea2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001ea4   ffe5
001ea6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001ea8   ffe5
001eaa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001eac   ffe5
001eae   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001eb0   ffe5
001eb2   0e02     movlw	0x2                	MOVLW	0x02
001eb4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001eb6   f000
001eb8   0e03     movlw	0x3                	MOVLW	0x03
001eba   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001ebc   f001
001ebe   0e04     movlw	0x4                	MOVLW	0x04
001ec0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001ec2   f002
001ec4   0e05     movlw	0x5                	MOVLW	0x05
001ec6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001ec8   f003
001eca   0e06     movlw	0x6                	MOVLW	0x06
001ecc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001ece   f004
001ed0   0e07     movlw	0x7                	MOVLW	0x07
001ed2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001ed4   f005
001ed6   0e08     movlw	0x8                	MOVLW	0x08
001ed8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001eda   f006
001edc   0e09     movlw	0x9                	MOVLW	0x09
001ede   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001ee0   f007
001ee2   0e0a     movlw	0xa                	MOVLW	0x0a
001ee4   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001ee6   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
001ee8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001eea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001eee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ef2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ef6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001efa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001efc   ec44     call	0x2288, 0           	CALL	_set_hours
001efe   f011
001f00   0e05     movlw	0x5                	MOVLW	0x05
001f02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
001f04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f08   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f14   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f18   ec7c     call	0x20f8, 0           	CALL	_set_minutes
001f1a   f010
001f1c   0e05     movlw	0x5                	MOVLW	0x05
001f1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
001f20   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f24   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f28   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f2c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f30   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f34   ec18     call	0x2030, 0           	CALL	_set_seconds
001f36   f010
001f38   0e05     movlw	0x5                	MOVLW	0x05
001f3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001f3c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001f3e   f008
001f40   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001f42   f007
001f44   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001f46   f006
001f48   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001f4a   f005
001f4c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001f4e   f004
001f50   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001f52   f003
001f54   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001f56   f002
001f58   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001f5a   f001
001f5c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001f5e   f000
001f60   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001f62   ffd9
001f64   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002874   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002876   ffe5
002878   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00287a   ffd9
00287c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00287e   ffe5
002880   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002882   ffe5
002884   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002886   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002888   0e06     movlw	0x6                	MOVLW	0x06
00288a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00288c   ec5c     call	0xeb8, 0            	CALL	_malloc
00288e   f007
002890   6e00     movwf	0, 0               	MOVWF	r0x00
002892   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002894   f001
002896   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002898   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00289a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00289c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00289e   6e00     movwf	0, 0               	MOVWF	r0x00
0028a0   0e80     movlw	0x80               	MOVLW	0x80
0028a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
0028a4   0e00     movlw	0                  	MOVLW	0x00
0028a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a8   0e00     movlw	0                  	MOVLW	0x00
0028aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ac   0e00     movlw	0                  	MOVLW	0x00
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   0e00     movlw	0                  	MOVLW	0x00
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   0e00     movlw	0                  	MOVLW	0x00
0028b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b8   0e00     movlw	0                  	MOVLW	0x00
0028ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0028c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c8   ec43     call	0x1e86, 0           	CALL	_time_set
0028ca   f00f
0028cc   0e09     movlw	0x9                	MOVLW	0x09
0028ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
0028d0   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0028d2   fff4
0028d4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0028d6   fff3
0028d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028da   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028dc   f002
0028de   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028e0   f001
0028e2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028e4   f000
0028e6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028e8   ffd9
0028ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0028ec   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
0028ee   6432     cpfsgt	0x32, 0           
0028f0   253a     addwf	0x3a, 0, 0x1       
0028f2   3230     rrcf	0x30, 0x1, 0        
0028f4   3a64     swapf	0x64, 0x1, 0       
0028f6   3025     rrcf	0x25, 0, 0          
0028f8   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
0028fa   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
