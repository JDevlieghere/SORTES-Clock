gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  11:46:14
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 11:45:29 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _getInput
                                           	global _DisplayString
                                           	global _delay_1ms
                                           	global _delay_ms
                                           	global _str
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _seconds_since_midnight
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _sprintf
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _set_time
                                           	extern _to_double_digits
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_clock_0	udata
                                           _str	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	24; src/clock.c	LCDInit();
0022ca   ec52     call	0xaa4, 0            	CALL	_LCDInit
0022cc   f005
                                           ;	.line	25; src/clock.c	set_time(getInput(24, "HOURS:"),0,0);
0022ce   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0022d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022d2   0e17     movlw	0x17               	MOVLW	HIGH(__str_0)
0022d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022d6   0e7c     movlw	0x7c               	MOVLW	LOW(__str_0)
0022d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022da   0e00     movlw	0                  	MOVLW	0x00
0022dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022de   0e18     movlw	0x18               	MOVLW	0x18
0022e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022e2   ec1e     call	0x163c, 0           	CALL	_getInput
0022e4   f00b
0022e6   6e00     movwf	0, 0               	MOVWF	r0x00
0022e8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0022ea   f001
0022ec   0e05     movlw	0x5                	MOVLW	0x05
0022ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0022f0   0e00     movlw	0                  	MOVLW	0x00
0022f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f4   0e00     movlw	0                  	MOVLW	0x00
0022f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022f8   0e00     movlw	0                  	MOVLW	0x00
0022fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022fc   0e00     movlw	0                  	MOVLW	0x00
0022fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002300   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002304   5000     movf	0, 0, 0             	MOVF	r0x00, W
002306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002308   ec54     call	0x14a8, 0           	CALL	_set_time
00230a   f00a
00230c   0e06     movlw	0x6                	MOVLW	0x06
00230e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	26; src/clock.c	sprintf (str, "%lu" , seconds_since_midnight);
002310   0e0f     movlw	0xf                	MOVLW	HIGH(_str)
002312   6e01     movwf	0x1, 0             	MOVWF	r0x01
002314   0e41     movlw	0x41               	MOVLW	LOW(_str)
002316   6e00     movwf	0, 0               	MOVWF	r0x00
002318   0e80     movlw	0x80               	MOVLW	0x80
00231a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00231c   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 3)
00231e   5110     movf	0x10, 0, 0x1        	MOVF	(_seconds_since_midnight + 3), W, B
002320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002322   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 2)
002324   510f     movf	0xf, 0, 0x1         	MOVF	(_seconds_since_midnight + 2), W, B
002326   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002328   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 1)
00232a   510e     movf	0xe, 0, 0x1         	MOVF	(_seconds_since_midnight + 1), W, B
00232c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00232e   010e     movlb	0xe                	BANKSEL	_seconds_since_midnight
002330   510d     movf	0xd, 0, 0x1         	MOVF	_seconds_since_midnight, W, B
002332   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002334   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
002336   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002338   0e17     movlw	0x17               	MOVLW	HIGH(__str_1)
00233a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00233c   0e84     movlw	0x84               	MOVLW	LOW(__str_1)
00233e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002340   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002342   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002344   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002346   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002348   5000     movf	0, 0, 0             	MOVF	r0x00, W
00234a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234c   ecf3     call	0x1de6, 0           	CALL	_sprintf
00234e   f00e
002350   0e0a     movlw	0xa                	MOVLW	0x0a
002352   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	27; src/clock.c	DisplayString(0, str);
002354   0e0f     movlw	0xf                	MOVLW	HIGH(_str)
002356   6e01     movwf	0x1, 0             	MOVWF	r0x01
002358   0e41     movlw	0x41               	MOVLW	LOW(_str)
00235a   6e00     movwf	0, 0               	MOVWF	r0x00
00235c   0e80     movlw	0x80               	MOVLW	0x80
00235e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002360   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002362   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002364   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002366   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002368   5000     movf	0, 0, 0             	MOVF	r0x00, W
00236a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00236c   0e00     movlw	0                  	MOVLW	0x00
00236e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002370   ec71     call	0x1ae2, 0           	CALL	_DisplayString
002372   f00d
002374   0e04     movlw	0x4                	MOVLW	0x04
002376   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	28; src/clock.c	return 0;
002378   6af3     clrf	0xf3, 0             	CLRF	PRODL
00237a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00237c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__delay_ms	code
                                           _delay_ms:
                                           ;	.line	74; src/clock.c	void delay_ms(unsigned int ms) {
002782   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002784   ffe5
002786   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002788   ffd9
00278a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00278c   ffe5
00278e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002790   ffe5
002792   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002794   ffe5
002796   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002798   ffe5
00279a   0e02     movlw	0x2                	MOVLW	0x02
00279c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00279e   f000
0027a0   0e03     movlw	0x3                	MOVLW	0x03
0027a2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0027a4   f001
                                           _00148_DS_:
                                           ;	.line	75; src/clock.c	while (ms--) {
0027a6   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0027a8   f002
0027aa   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
0027ac   f003
0027ae   0eff     movlw	0xff               	MOVLW	0xff
0027b0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027b2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0027b4   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0027b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027b8   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0027ba   e003     bz	0x27c2                	BZ	_00151_DS_
                                           ;	.line	76; src/clock.c	delay_1ms();
0027bc   ec54     call	0x28a8, 0           	CALL	_delay_1ms
0027be   f014
0027c0   d7f2     bra	0x27a6               	BRA	_00148_DS_
                                           _00151_DS_:
0027c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027c4   f003
0027c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027c8   f002
0027ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027cc   f001
0027ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027d0   f000
0027d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027d4   ffd9
0027d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__delay_1ms	code
                                           _delay_1ms:
                                           ;	.line	60; src/clock.c	void delay_1ms(void) {
0028a8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028aa   ffe5
0028ac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028ae   ffd9
                                           ;	.line	61; src/clock.c	TMR0H=(0x10000-EXEC_FREQ/1000)>>8;
0028b0   0ed8     movlw	0xd8               	MOVLW	0xd8
0028b2   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	62; src/clock.c	TMR0L=(0x10000-EXEC_FREQ/1000)&0xff;
0028b4   0ef0     movlw	0xf0               	MOVLW	0xf0
0028b6   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	63; src/clock.c	T0CONbits.TMR0ON=0; // disable timer0
0028b8   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	64; src/clock.c	T0CONbits.T08BIT=0; // use timer0 16-bit counter
0028ba   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	65; src/clock.c	T0CONbits.T0CS=0; // use timer0 instruction cycle clock
0028bc   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	66; src/clock.c	T0CONbits.PSA=1; // disable timer0 prescaler
0028be   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	67; src/clock.c	INTCONbits.T0IF=0; // clear timer0 overflow bit
0028c0   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	68; src/clock.c	T0CONbits.TMR0ON=1; // enable timer0
0028c2   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00140_DS_:
                                           ;	.line	69; src/clock.c	while (!INTCONbits.T0IF) {} // wait for timer0 overflow
0028c4   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0028c6   d7fe     bra	0x28c4               	BRA	_00140_DS_
                                           ;	.line	70; src/clock.c	INTCONbits.T0IF=0; // clear timer0 overflow bit
0028c8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	71; src/clock.c	T0CONbits.TMR0ON=0; // disable timer0
0028ca   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
0028cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028ce   ffd9
0028d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__DisplayString	code
                                           _DisplayString:
                                           ;	.line	48; src/clock.c	void DisplayString(BYTE pos, char* text){
001ae2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ae4   ffe5
001ae6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ae8   ffd9
001aea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001aec   ffe5
001aee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001af0   ffe5
001af2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001af4   ffe5
001af6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001af8   ffe5
001afa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001afc   ffe5
001afe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001b00   ffe5
001b02   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001b04   ffe5
001b06   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001b08   ffe5
001b0a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001b0c   ffe5
001b0e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001b10   ffe5
001b12   0e02     movlw	0x2                	MOVLW	0x02
001b14   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001b16   f000
001b18   0e03     movlw	0x3                	MOVLW	0x03
001b1a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001b1c   f001
001b1e   0e04     movlw	0x4                	MOVLW	0x04
001b20   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001b22   f002
001b24   0e05     movlw	0x5                	MOVLW	0x05
001b26   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001b28   f003
                                           ;	.line	49; src/clock.c	BYTE        l = strlen(text);/*number of actual chars in the string*/
001b2a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b36   ec50     call	0x26a0, 0           	CALL	_strlen
001b38   f013
001b3a   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b3c   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001b3e   f005
001b40   0e03     movlw	0x3                	MOVLW	0x03
001b42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	50; src/clock.c	BYTE      max = 32-pos;    /*available space on the lcd*/
001b44   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b46   0820     sublw	0x20               	SUBLW	0x20
001b48   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	51; src/clock.c	char       *d = (char*)&LCDText[pos];
001b4a   6a06     clrf	0x6, 0              	CLRF	r0x06
001b4c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001b4e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001b50   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001b52   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001b54   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001b56   6e06     movwf	0x6, 0             	MOVWF	r0x06
001b58   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b5a   6e00     movwf	0, 0               	MOVWF	r0x00
001b5c   0e80     movlw	0x80               	MOVLW	0x80
001b5e   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	53; src/clock.c	size_t      n = (l<max)?l:max;
001b60   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b62   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001b64   e302     bnc	0x1b6a               	BNC	_00130_DS_
001b66   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001b68   f004
                                           _00130_DS_:
001b6a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	55; src/clock.c	if (n != 0)
001b6c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b6e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001b70   e027     bz	0x1bc0                	BZ	_00126_DS_
                                           _00122_DS_:
                                           ;	.line	56; src/clock.c	while (n-- != 0)*d++ = *s++;
001b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001b74   f008
001b76   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001b78   f009
001b7a   0eff     movlw	0xff               	MOVLW	0xff
001b7c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001b7e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001b80   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001b82   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001b84   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001b86   e01c     bz	0x1bc0                	BZ	_00126_DS_
001b88   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001b8a   ffe9
001b8c   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001b8e   fff3
001b90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b92   ec69     call	0x28d2, 0           	CALL	__gptrget1
001b94   f014
001b96   6e08     movwf	0x8, 0             	MOVWF	r0x08
001b98   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001b9a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001b9c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001b9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ba0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001ba2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001ba4   ffe5
001ba6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001ba8   ffe9
001baa   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001bac   fff3
001bae   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001bb0   ec94     call	0x2928, 0           	CALL	__gptrput1
001bb2   f014
001bb4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001bb6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001bb8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001bba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001bbc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001bbe   d7d9     bra	0x1b72               	BRA	_00122_DS_
                                           _00126_DS_:
                                           ;	.line	57; src/clock.c	LCDUpdate();
001bc0   ec1d     call	0x83a, 0            	CALL	_LCDUpdate
001bc2   f004
001bc4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001bc6   f009
001bc8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001bca   f008
001bcc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001bce   f007
001bd0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001bd2   f006
001bd4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001bd6   f005
001bd8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001bda   f004
001bdc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001bde   f003
001be0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001be2   f002
001be4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001be6   f001
001be8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001bea   f000
001bec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001bee   ffd9
001bf0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__getInput	code
                                           _getInput:
                                           ;	.line	32; src/clock.c	int getInput(int maxvalue, char *text){
00163c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00163e   ffe5
001640   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001642   ffd9
001644   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001646   ffe5
001648   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00164a   ffe5
00164c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00164e   ffe5
001650   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001652   ffe5
001654   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001656   ffe5
001658   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00165a   ffe5
00165c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00165e   ffe5
001660   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001662   ffe5
001664   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001666   ffe5
001668   0e02     movlw	0x2                	MOVLW	0x02
00166a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00166c   f000
00166e   0e03     movlw	0x3                	MOVLW	0x03
001670   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001672   f001
001674   0e04     movlw	0x4                	MOVLW	0x04
001676   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001678   f002
00167a   0e05     movlw	0x5                	MOVLW	0x05
00167c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00167e   f003
001680   0e06     movlw	0x6                	MOVLW	0x06
001682   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001684   f004
                                           ;	.line	33; src/clock.c	BYTE length = strlen(text);
001686   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00168c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001692   ec50     call	0x26a0, 0           	CALL	_strlen
001694   f013
001696   6e05     movwf	0x5, 0             	MOVWF	r0x05
001698   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00169a   f006
00169c   0e03     movlw	0x3                	MOVLW	0x03
00169e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	34; src/clock.c	int value = 0;
0016a0   6a06     clrf	0x6, 0              	CLRF	r0x06
0016a2   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	35; src/clock.c	DisplayString(0, text);
0016a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b0   0e00     movlw	0                  	MOVLW	0x00
0016b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b4   ec71     call	0x1ae2, 0           	CALL	_DisplayString
0016b6   f00d
0016b8   0e04     movlw	0x4                	MOVLW	0x04
0016ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	37; src/clock.c	while(1)
0016bc   2805     incf	0x5, 0, 0           	INCF	r0x05, W
0016be   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00115_DS_:
                                           ;	.line	39; src/clock.c	if(BUTTON1_IO == 0u)
0016c0   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0016c2   d004     bra	0x16cc               	BRA	_00111_DS_
                                           ;	.line	40; src/clock.c	return value;
0016c4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0016c6   fff3
0016c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0016ca   d043     bra	0x1752               	BRA	_00117_DS_
                                           _00111_DS_:
                                           ;	.line	41; src/clock.c	if(BUTTON0_IO == 0u) 
0016cc   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0016ce   d012     bra	0x16f4               	BRA	_00113_DS_
                                           ;	.line	42; src/clock.c	value = (++value)%maxvalue;
0016d0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0016d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016d4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0016d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016de   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0016e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e6   ec68     call	0x1ed0, 0           	CALL	__modsint
0016e8   f00f
0016ea   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016ec   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016ee   f007
0016f0   0e04     movlw	0x4                	MOVLW	0x04
0016f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	43; src/clock.c	DisplayString(length + 1, to_double_digits(value));
0016f4   c006     movff	0x6, 0x3           	MOVFF	r0x06, r0x03
0016f6   f003
0016f8   c007     movff	0x7, 0x4           	MOVFF	r0x07, r0x04
0016fa   f004
0016fc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0016fe   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
001700   0eff     movlw	0xff               	MOVLW	0xff
001702   6e05     movwf	0x5, 0             	MOVWF	r0x05
001704   6e08     movwf	0x8, 0             	MOVWF	r0x08
001706   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00170a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00170c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00170e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001712   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001716   ec17     call	0x242e, 0           	CALL	_to_double_digits
001718   f012
00171a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00171c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00171e   f004
001720   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
001722   f005
001724   0e04     movlw	0x4                	MOVLW	0x04
001726   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001728   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00172a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00172c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00172e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001730   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001732   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001734   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001736   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001738   ec71     call	0x1ae2, 0           	CALL	_DisplayString
00173a   f00d
00173c   0e04     movlw	0x4                	MOVLW	0x04
00173e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	44; src/clock.c	delay_ms(50);
001740   0e00     movlw	0                  	MOVLW	0x00
001742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001744   0e32     movlw	0x32               	MOVLW	0x32
001746   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001748   ecc1     call	0x2782, 0           	CALL	_delay_ms
00174a   f013
00174c   0e02     movlw	0x2                	MOVLW	0x02
00174e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001750   d7b7     bra	0x16c0               	BRA	_00115_DS_
                                           _00117_DS_:
001752   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001754   f008
001756   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001758   f007
00175a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00175c   f006
00175e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001760   f005
001762   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001764   f004
001766   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001768   f003
00176a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00176c   f002
00176e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001770   f001
001772   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001774   f000
001776   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001778   ffd9
00177a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00177c   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
00177e   5255     movf	0x55, 0x1, 0        
001780   3a53     swapf	0x53, 0x1, 0       
001782   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001784   6c25     negf	0x25, 0             	DB	0x25, 0x6c, 0x75, 0x00
001786   0075     dw	0x75  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  904 (0x0388) bytes ( 0.69%)
                                           ;           	  452 (0x01c4) words
                                           ; udata size:	   20 (0x0014) bytes ( 0.52%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Thu Nov 14 20:54:12 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
00237e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002380   ffe5
002382   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002384   ffd9
002386   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002388   ffe5
00238a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00238c   ffe5
00238e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002390   ffe5
002392   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002394   ffe5
002396   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002398   ffe5
00239a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00239c   ffe5
00239e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0023a0   ffe5
0023a2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0023a4   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
0023a6   0e01     movlw	0x1                	MOVLW	0x01
0023a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023aa   0e00     movlw	0                  	MOVLW	0x00
0023ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ae   ec90     call	0x2720, 0           	CALL	_LCDWrite
0023b0   f013
0023b2   0e02     movlw	0x2                	MOVLW	0x02
0023b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0023b6   0e48     movlw	0x48               	MOVLW	0x48
0023b8   6e00     movwf	0, 0               	MOVWF	r0x00
0023ba   0e0d     movlw	0xd                	MOVLW	0x0d
0023bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0023be   6a02     clrf	0x2, 0              	CLRF	r0x02
0023c0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0023c2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0023c4   f004
0023c6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0023c8   f005
0023ca   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0023cc   f006
0023ce   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0023d0   f007
0023d2   0eff     movlw	0xff               	MOVLW	0xff
0023d4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0023d6   0eff     movlw	0xff               	MOVLW	0xff
0023d8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0023da   0eff     movlw	0xff               	MOVLW	0xff
0023dc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0023de   0eff     movlw	0xff               	MOVLW	0xff
0023e0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0023e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023e4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0023e6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0023e8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0023ea   e1eb     bnz	0x23c2               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0023ec   0e00     movlw	0                  	MOVLW	0x00
0023ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023f0   0e20     movlw	0x20               	MOVLW	0x20
0023f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023f4   0e20     movlw	0x20               	MOVLW	0x20
0023f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023f8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0023fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0023fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002400   ec40     call	0x2080, 0           	CALL	_memset
002402   f010
002404   0e05     movlw	0x5                	MOVLW	0x05
002406   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002408   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00240a   f007
00240c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00240e   f006
002410   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002412   f005
002414   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002416   f004
002418   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00241a   f003
00241c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00241e   f002
002420   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002422   f001
002424   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002426   f000
002428   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00242a   ffd9
00242c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
00083a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00083c   ffe5
00083e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000840   ffd9
000842   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000844   ffe5
000846   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000848   ffe5
00084a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00084c   ffe5
00084e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000850   ffe5
000852   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000854   ffe5
000856   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000858   ffe5
00085a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00085c   ffe5
00085e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000860   ffe5
000862   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000864   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000866   0e02     movlw	0x2                	MOVLW	0x02
000868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086a   0e00     movlw	0                  	MOVLW	0x00
00086c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086e   ec90     call	0x2720, 0           	CALL	_LCDWrite
000870   f013
000872   0e02     movlw	0x2                	MOVLW	0x02
000874   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000876   0e48     movlw	0x48               	MOVLW	0x48
000878   6e00     movwf	0, 0               	MOVWF	r0x00
00087a   0e0d     movlw	0xd                	MOVLW	0x0d
00087c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00087e   6a02     clrf	0x2, 0              	CLRF	r0x02
000880   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000882   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000884   f004
000886   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000888   f005
00088a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00088c   f006
00088e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000890   f007
000892   0eff     movlw	0xff               	MOVLW	0xff
000894   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000896   0eff     movlw	0xff               	MOVLW	0xff
000898   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008a4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008a6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008a8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008aa   e1eb     bnz	0x882                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008ac   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b0   f001
0008b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0008b4   0e00     movlw	0                  	MOVLW	0x00
0008b6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008b8   e102     bnz	0x8be                	BNZ	_00297_DS_
0008ba   0e10     movlw	0x10               	MOVLW	0x10
0008bc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c0   d057     bra	0x970                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008c2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008c4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008c6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0008ca   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008cc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008ce   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d0   ffe9
0008d2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008d4   ffea
0008d6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008d8   f001
0008da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008dc   e119     bnz	0x910                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008de   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e0   f001
                                           _00253_DS_:
0008e2   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008e4   f002
0008e6   6a03     clrf	0x3, 0              	CLRF	r0x03
0008e8   0e00     movlw	0                  	MOVLW	0x00
0008ea   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008ec   e102     bnz	0x8f2                	BNZ	_00298_DS_
0008ee   0e10     movlw	0x10               	MOVLW	0x10
0008f0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008f2   e20e     bc	0x910                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008f4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008f6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0008f8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008fa   6a03     clrf	0x3, 0              	CLRF	r0x03
0008fc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008fe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000900   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000902   ffe9
000904   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000906   ffea
000908   0e20     movlw	0x20               	MOVLW	0x20
00090a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
00090c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00090e   d7e9     bra	0x8e2                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000910   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000912   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000914   6e01     movwf	0x1, 0             	MOVWF	r0x01
000916   6a02     clrf	0x2, 0              	CLRF	r0x02
000918   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00091a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00091c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00091e   ffe9
000920   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000922   ffea
000924   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000926   f001
000928   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00092a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092c   0e01     movlw	0x1                	MOVLW	0x01
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   ec90     call	0x2720, 0           	CALL	_LCDWrite
000932   f013
000934   0e02     movlw	0x2                	MOVLW	0x02
000936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000938   0e55     movlw	0x55               	MOVLW	0x55
00093a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00093c   6a02     clrf	0x2, 0              	CLRF	r0x02
00093e   6a03     clrf	0x3, 0              	CLRF	r0x03
000940   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000942   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000944   f005
000946   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000948   f006
00094a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00094c   f007
00094e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000950   f008
000952   0eff     movlw	0xff               	MOVLW	0xff
000954   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000956   0eff     movlw	0xff               	MOVLW	0xff
000958   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000962   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000964   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000966   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000968   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00096a   e1eb     bnz	0x942                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
00096c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00096e   d79f     bra	0x8ae                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000970   0ec0     movlw	0xc0               	MOVLW	0xc0
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   0e00     movlw	0                  	MOVLW	0x00
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   ec90     call	0x2720, 0           	CALL	_LCDWrite
00097a   f013
00097c   0e02     movlw	0x2                	MOVLW	0x02
00097e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000980   0e55     movlw	0x55               	MOVLW	0x55
000982   6e00     movwf	0, 0               	MOVWF	r0x00
000984   6a01     clrf	0x1, 0              	CLRF	r0x01
000986   6a02     clrf	0x2, 0              	CLRF	r0x02
000988   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00098a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00098c   f004
00098e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000990   f005
000992   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000994   f006
000996   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000998   f007
00099a   0eff     movlw	0xff               	MOVLW	0xff
00099c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00099e   0eff     movlw	0xff               	MOVLW	0xff
0009a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009b2   e1eb     bnz	0x98a                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009b4   0e10     movlw	0x10               	MOVLW	0x10
0009b6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009b8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ba   f001
0009bc   6a02     clrf	0x2, 0              	CLRF	r0x02
0009be   0e00     movlw	0                  	MOVLW	0x00
0009c0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009c2   e102     bnz	0x9c8                	BNZ	_00299_DS_
0009c4   0e20     movlw	0x20               	MOVLW	0x20
0009c6   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009c8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009ca   d057     bra	0xa7a                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009cc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009ce   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009d2   6a02     clrf	0x2, 0              	CLRF	r0x02
0009d4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009d8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009da   ffe9
0009dc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009de   ffea
0009e0   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009e2   f001
0009e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e6   e119     bnz	0xa1a                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009e8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009ea   f001
                                           _00261_DS_:
0009ec   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009ee   f002
0009f0   6a03     clrf	0x3, 0              	CLRF	r0x03
0009f2   0e00     movlw	0                  	MOVLW	0x00
0009f4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009f6   e102     bnz	0x9fc                	BNZ	_00300_DS_
0009f8   0e20     movlw	0x20               	MOVLW	0x20
0009fa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0009fc   e20e     bc	0xa1a                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
0009fe   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a00   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a02   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a04   6a03     clrf	0x3, 0              	CLRF	r0x03
000a06   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a0a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a0c   ffe9
000a0e   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a10   ffea
000a12   0e20     movlw	0x20               	MOVLW	0x20
000a14   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a16   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a18   d7e9     bra	0x9ec                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a1a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a1c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   6a02     clrf	0x2, 0              	CLRF	r0x02
000a22   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a26   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a28   ffe9
000a2a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a2c   ffea
000a2e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a30   f001
000a32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0e01     movlw	0x1                	MOVLW	0x01
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   ec90     call	0x2720, 0           	CALL	_LCDWrite
000a3c   f013
000a3e   0e02     movlw	0x2                	MOVLW	0x02
000a40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a42   0e55     movlw	0x55               	MOVLW	0x55
000a44   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a46   6a02     clrf	0x2, 0              	CLRF	r0x02
000a48   6a03     clrf	0x3, 0              	CLRF	r0x03
000a4a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a4c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a4e   f005
000a50   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a52   f006
000a54   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a56   f007
000a58   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a5a   f008
000a5c   0eff     movlw	0xff               	MOVLW	0xff
000a5e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a60   0eff     movlw	0xff               	MOVLW	0xff
000a62   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a6c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a6e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a70   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a72   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a74   e1eb     bnz	0xa4c                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a76   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a78   d79f     bra	0x9b8                	BRA	_00265_DS_
                                           _00269_DS_:
000a7a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a7c   f008
000a7e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a80   f007
000a82   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a84   f006
000a86   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a88   f005
000a8a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a8c   f004
000a8e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a90   f003
000a92   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a94   f002
000a96   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000a98   f001
000a9a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a9c   f000
000a9e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa0   ffd9
000aa2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aa4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aa6   ffe5
000aa8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000aaa   ffd9
000aac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000aae   ffe5
000ab0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ab2   ffe5
000ab4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ab6   ffe5
000ab8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000aba   ffe5
000abc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000abe   ffe5
000ac0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ac2   ffe5
000ac4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ac6   ffe5
000ac8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000aca   ffe5
000acc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ace   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad0   0e00     movlw	0                  	MOVLW	0x00
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   0e20     movlw	0x20               	MOVLW	0x20
000ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad8   0e20     movlw	0x20               	MOVLW	0x20
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   ec40     call	0x2080, 0           	CALL	_memset
000ae6   f010
000ae8   0e05     movlw	0x5                	MOVLW	0x05
000aea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000aec   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000aee   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af0   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000af2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000af4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000af6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000af8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000afa   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000afc   0ea0     movlw	0xa0               	MOVLW	0xa0
000afe   6e00     movwf	0, 0               	MOVWF	r0x00
000b00   0e09     movlw	0x9                	MOVLW	0x09
000b02   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b04   0e01     movlw	0x1                	MOVLW	0x01
000b06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b08   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b0a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b0c   f004
000b0e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b10   f005
000b12   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b14   f006
000b16   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b18   f007
000b1a   0eff     movlw	0xff               	MOVLW	0xff
000b1c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b1e   0eff     movlw	0xff               	MOVLW	0xff
000b20   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b2c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b2e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b30   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b32   e1eb     bnz	0xb0a                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b34   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b36   0e03     movlw	0x3                	MOVLW	0x03
000b38   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b3a   0000     nop                      	nop 
000b3c   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b3e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b40   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b42   f001
000b44   6a02     clrf	0x2, 0              	CLRF	r0x02
000b46   0e00     movlw	0                  	MOVLW	0x00
000b48   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b4a   e102     bnz	0xb50                	BNZ	_00220_DS_
000b4c   0e03     movlw	0x3                	MOVLW	0x03
000b4e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b50   e239     bc	0xbc4                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b52   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b54   0e11     movlw	0x11               	MOVLW	0x11
000b56   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b58   6a02     clrf	0x2, 0              	CLRF	r0x02
000b5a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b5c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b5e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b60   f005
000b62   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b64   f006
000b66   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b68   f007
000b6a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b6c   f008
000b6e   0eff     movlw	0xff               	MOVLW	0xff
000b70   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b72   0eff     movlw	0xff               	MOVLW	0xff
000b74   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b80   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b84   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b86   e1eb     bnz	0xb5e                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b88   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b8a   0e48     movlw	0x48               	MOVLW	0x48
000b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b8e   0e0d     movlw	0xd                	MOVLW	0x0d
000b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b92   6a03     clrf	0x3, 0              	CLRF	r0x03
000b94   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b96   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b98   f005
000b9a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b9c   f006
000b9e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba0   f007
000ba2   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000ba4   f008
000ba6   0eff     movlw	0xff               	MOVLW	0xff
000ba8   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000baa   0eff     movlw	0xff               	MOVLW	0xff
000bac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bb6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bba   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bbc   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bbe   e1eb     bnz	0xb96                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bc2   d7be     bra	0xb40                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bc4   0e38     movlw	0x38               	MOVLW	0x38
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   0e00     movlw	0                  	MOVLW	0x00
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   ec90     call	0x2720, 0           	CALL	_LCDWrite
000bce   f013
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bd4   0e55     movlw	0x55               	MOVLW	0x55
000bd6   6e00     movwf	0, 0               	MOVWF	r0x00
000bd8   6a01     clrf	0x1, 0              	CLRF	r0x01
000bda   6a02     clrf	0x2, 0              	CLRF	r0x02
000bdc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000bde   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be0   f004
000be2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000be4   f005
000be6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000be8   f006
000bea   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bec   f007
000bee   0eff     movlw	0xff               	MOVLW	0xff
000bf0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bf2   0eff     movlw	0xff               	MOVLW	0xff
000bf4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bfe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c00   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c02   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c04   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c06   e1eb     bnz	0xbde                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c08   0e06     movlw	0x6                	MOVLW	0x06
000c0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0c   0e00     movlw	0                  	MOVLW	0x00
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   ec90     call	0x2720, 0           	CALL	_LCDWrite
000c12   f013
000c14   0e02     movlw	0x2                	MOVLW	0x02
000c16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c18   0e55     movlw	0x55               	MOVLW	0x55
000c1a   6e00     movwf	0, 0               	MOVWF	r0x00
000c1c   6a01     clrf	0x1, 0              	CLRF	r0x01
000c1e   6a02     clrf	0x2, 0              	CLRF	r0x02
000c20   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c22   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c24   f004
000c26   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c28   f005
000c2a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c2c   f006
000c2e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c30   f007
000c32   0eff     movlw	0xff               	MOVLW	0xff
000c34   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c36   0eff     movlw	0xff               	MOVLW	0xff
000c38   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c44   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c46   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c48   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c4a   e1eb     bnz	0xc22                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c4c   0e0c     movlw	0xc                	MOVLW	0x0c
000c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c50   0e00     movlw	0                  	MOVLW	0x00
000c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c54   ec90     call	0x2720, 0           	CALL	_LCDWrite
000c56   f013
000c58   0e02     movlw	0x2                	MOVLW	0x02
000c5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c5c   0e55     movlw	0x55               	MOVLW	0x55
000c5e   6e00     movwf	0, 0               	MOVWF	r0x00
000c60   6a01     clrf	0x1, 0              	CLRF	r0x01
000c62   6a02     clrf	0x2, 0              	CLRF	r0x02
000c64   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c66   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c68   f004
000c6a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c6c   f005
000c6e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c70   f006
000c72   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c74   f007
000c76   0eff     movlw	0xff               	MOVLW	0xff
000c78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c7a   0eff     movlw	0xff               	MOVLW	0xff
000c7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c88   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c8a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c8c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c8e   e1eb     bnz	0xc66                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c90   0e01     movlw	0x1                	MOVLW	0x01
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   0e00     movlw	0                  	MOVLW	0x00
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   ec90     call	0x2720, 0           	CALL	_LCDWrite
000c9a   f013
000c9c   0e02     movlw	0x2                	MOVLW	0x02
000c9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca0   0e48     movlw	0x48               	MOVLW	0x48
000ca2   6e00     movwf	0, 0               	MOVWF	r0x00
000ca4   0e0d     movlw	0xd                	MOVLW	0x0d
000ca6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca8   6a02     clrf	0x2, 0              	CLRF	r0x02
000caa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cac   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cae   f004
000cb0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cb2   f005
000cb4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cb6   f006
000cb8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cba   f007
000cbc   0eff     movlw	0xff               	MOVLW	0xff
000cbe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc0   0eff     movlw	0xff               	MOVLW	0xff
000cc2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ccc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cce   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cd2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cd4   e1eb     bnz	0xcac                	BNZ	_00185_DS_
000cd6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cd8   f008
000cda   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cdc   f007
000cde   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce0   f006
000ce2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ce4   f005
000ce6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ce8   f004
000cea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cec   f003
000cee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf0   f002
000cf2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cf4   f001
000cf6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf8   f000
000cfa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cfc   ffd9
000cfe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002720   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002722   ffe5
002724   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002726   ffd9
002728   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00272a   ffe5
00272c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00272e   ffe5
002730   0e02     movlw	0x2                	MOVLW	0x02
002732   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002734   f000
002736   0e03     movlw	0x3                	MOVLW	0x03
002738   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00273a   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00273c   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
00273e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002740   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002742   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002744   5000     movf	0, 0, 0             	MOVF	r0x00, W
002746   0b01     andlw	0x1                	ANDLW	0x01
002748   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00274a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00274c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00274e   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002750   0bfb     andlw	0xfb               	ANDLW	0xfb
002752   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002754   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002756   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002758   ff8d
00275a   0000     nop                      	nop 
00275c   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
00275e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002760   0000     nop                      	nop 
002762   0000     nop                      	nop 
002764   0000     nop                      	nop 
002766   0000     nop                      	nop 
002768   0000     nop                      	nop 
00276a   0000     nop                      	nop 
00276c   0000     nop                      	nop 
00276e   0000     nop                      	nop 
002770   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002772   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002774   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002776   f001
002778   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00277a   f000
00277c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00277e   ffd9
002780   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 11:46:14 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _get_hours
                                           	global _get_minutes
                                           	global _get_seconds
                                           	global _time2string
                                           	global _to_double_digits
                                           	global _set_time
                                           	global _seconds_since_midnight
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern __divslong
                                           	extern __mullong
                                           	extern __divsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _seconds_since_midnight	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_time_0	udata
                                           _time2string_string_1_1	res	9
                                           
                                           udata_time_1	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__set_time	code
                                           _set_time:
                                           ;	.line	55; src/time.c	int set_time(int hours, int minutes, int seconds){
0014a8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014aa   ffe5
0014ac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014ae   ffd9
0014b0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014b2   ffe5
0014b4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0014b6   ffe5
0014b8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0014ba   ffe5
0014bc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0014be   ffe5
0014c0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0014c2   ffe5
0014c4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0014c6   ffe5
0014c8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0014ca   ffe5
0014cc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0014ce   ffe5
0014d0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0014d2   ffe5
0014d4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0014d6   ffe5
0014d8   0e02     movlw	0x2                	MOVLW	0x02
0014da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0014dc   f000
0014de   0e03     movlw	0x3                	MOVLW	0x03
0014e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0014e2   f001
0014e4   0e04     movlw	0x4                	MOVLW	0x04
0014e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0014e8   f002
0014ea   0e05     movlw	0x5                	MOVLW	0x05
0014ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0014ee   f003
0014f0   0e06     movlw	0x6                	MOVLW	0x06
0014f2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0014f4   f004
0014f6   0e07     movlw	0x7                	MOVLW	0x07
0014f8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0014fa   f005
                                           ;	.line	56; src/time.c	if(hours < 0 || hours >= 24)
0014fc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0014fe   ae01     btfss	0x1, 0x7, 0        	BTFSS	r0x01, 7
001500   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001502   e207     bc	0x1512                	BC	_00130_DS_
001504   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001506   0f80     addlw	0x80               	ADDLW	0x80
001508   0f80     addlw	0x80               	ADDLW	0x80
00150a   e102     bnz	0x1510               	BNZ	_00144_DS_
00150c   0e18     movlw	0x18               	MOVLW	0x18
00150e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00144_DS_:
001510   e303     bnc	0x1518               	BNC	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	57; src/time.c	return ERROR_HOURS;
001512   68f3     setf	0xf3, 0             	SETF	PRODL
001514   68e8     setf	0xe8, 0             	SETF	WREG
001516   d07b     bra	0x160e               	BRA	_00139_DS_
                                           _00131_DS_:
                                           ;	.line	58; src/time.c	if(minutes < 0 || minutes >= 60)
001518   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00151a   ae03     btfss	0x3, 0x7, 0        	BTFSS	r0x03, 7
00151c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00151e   e207     bc	0x152e                	BC	_00133_DS_
001520   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001522   0f80     addlw	0x80               	ADDLW	0x80
001524   0f80     addlw	0x80               	ADDLW	0x80
001526   e102     bnz	0x152c               	BNZ	_00145_DS_
001528   0e3c     movlw	0x3c               	MOVLW	0x3c
00152a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00145_DS_:
00152c   e303     bnc	0x1534               	BNC	_00134_DS_
                                           _00133_DS_:
                                           ;	.line	59; src/time.c	return ERROR_MINS;
00152e   68f3     setf	0xf3, 0             	SETF	PRODL
001530   0efe     movlw	0xfe               	MOVLW	0xfe
001532   d06d     bra	0x160e               	BRA	_00139_DS_
                                           _00134_DS_:
                                           ;	.line	60; src/time.c	if(seconds < 0 || seconds >= 60)
001534   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001536   ae05     btfss	0x5, 0x7, 0        	BTFSS	r0x05, 7
001538   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00153a   e207     bc	0x154a                	BC	_00136_DS_
00153c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00153e   0f80     addlw	0x80               	ADDLW	0x80
001540   0f80     addlw	0x80               	ADDLW	0x80
001542   e102     bnz	0x1548               	BNZ	_00146_DS_
001544   0e3c     movlw	0x3c               	MOVLW	0x3c
001546   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00146_DS_:
001548   e303     bnc	0x1550               	BNC	_00137_DS_
                                           _00136_DS_:
                                           ;	.line	61; src/time.c	return ERROR_SECS;
00154a   68f3     setf	0xf3, 0             	SETF	PRODL
00154c   0efd     movlw	0xfd               	MOVLW	0xfd
00154e   d05f     bra	0x160e               	BRA	_00139_DS_
                                           _00137_DS_:
                                           ;	.line	62; src/time.c	seconds_since_midnight = (long)seconds + (long)minutes * SEC_IN_MIN + (long)hours * SEC_IN_HOUR;
001550   6ae8     clrf	0xe8, 0             	CLRF	WREG
001552   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
001554   0eff     movlw	0xff               	MOVLW	0xff
001556   6e06     movwf	0x6, 0             	MOVWF	r0x06
001558   6e07     movwf	0x7, 0             	MOVWF	r0x07
00155a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00155c   be03     btfsc	0x3, 0x7, 0        	BTFSC	r0x03, 7
00155e   0eff     movlw	0xff               	MOVLW	0xff
001560   6e08     movwf	0x8, 0             	MOVWF	r0x08
001562   6e09     movwf	0x9, 0             	MOVWF	r0x09
001564   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001568   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00156a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00156c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001574   0e00     movlw	0                  	MOVLW	0x00
001576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001578   0e00     movlw	0                  	MOVLW	0x00
00157a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00157c   0e00     movlw	0                  	MOVLW	0x00
00157e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001580   0e3c     movlw	0x3c               	MOVLW	0x3c
001582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001584   ec97     call	0xf2e, 0            	CALL	__mullong
001586   f007
001588   6e02     movwf	0x2, 0             	MOVWF	r0x02
00158a   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
00158c   f003
00158e   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
001590   f008
001592   cfe9     movff	0xfe9, 0x9         	MOVFF	FSR0L, r0x09
001594   f009
001596   0e08     movlw	0x8                	MOVLW	0x08
001598   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00159a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00159c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00159e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015a0   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0015a2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0015a4   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0015a6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0015a8   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0015aa   6ae8     clrf	0xe8, 0             	CLRF	WREG
0015ac   be01     btfsc	0x1, 0x7, 0        	BTFSC	r0x01, 7
0015ae   0eff     movlw	0xff               	MOVLW	0xff
0015b0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0015b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   0e00     movlw	0                  	MOVLW	0x00
0015c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c8   0e00     movlw	0                  	MOVLW	0x00
0015ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015cc   0e0e     movlw	0xe                	MOVLW	0x0e
0015ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015d0   0e10     movlw	0x10               	MOVLW	0x10
0015d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015d4   ec97     call	0xf2e, 0            	CALL	__mullong
0015d6   f007
0015d8   6e00     movwf	0, 0               	MOVWF	r0x00
0015da   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0015dc   f001
0015de   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0015e0   f002
0015e2   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0015e4   f003
0015e6   0e08     movlw	0x8                	MOVLW	0x08
0015e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0015ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015ec   2404     addwf	0x4, 0, 0          	ADDWF	r0x04, W
0015ee   010e     movlb	0xe                	BANKSEL	_seconds_since_midnight
0015f0   6f0d     movwf	0xd, 0x1           	MOVWF	_seconds_since_midnight, B
0015f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015f4   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0015f6   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 1)
0015f8   6f0e     movwf	0xe, 0x1           	MOVWF	(_seconds_since_midnight + 1), B
0015fa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015fc   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
0015fe   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 2)
001600   6f0f     movwf	0xf, 0x1           	MOVWF	(_seconds_since_midnight + 2), B
001602   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001604   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
001606   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 3)
001608   6f10     movwf	0x10, 0x1          	MOVWF	(_seconds_since_midnight + 3), B
                                           ;	.line	63; src/time.c	return 0;
00160a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00160c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00139_DS_:
00160e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001610   f009
001612   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001614   f008
001616   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001618   f007
00161a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00161c   f006
00161e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001620   f005
001622   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001624   f004
001626   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001628   f003
00162a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00162c   f002
00162e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001630   f001
001632   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001634   f000
001636   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001638   ffd9
00163a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	43; src/time.c	char* to_double_digits(long value){
00242e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002430   ffe5
002432   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002434   ffd9
002436   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002438   ffe5
00243a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00243c   ffe5
00243e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002440   ffe5
002442   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002444   ffe5
002446   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002448   ffe5
00244a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00244c   ffe5
00244e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002450   ffe5
002452   0e02     movlw	0x2                	MOVLW	0x02
002454   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002456   f000
002458   0e03     movlw	0x3                	MOVLW	0x03
00245a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00245c   f001
00245e   0e04     movlw	0x4                	MOVLW	0x04
002460   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002462   f002
002464   0e05     movlw	0x5                	MOVLW	0x05
002466   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002468   f003
                                           ;	.line	45; src/time.c	sprintf(buffer, "%02lu", value);
00246a   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
00246c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00246e   0e26     movlw	0x26               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002470   6e04     movwf	0x4, 0             	MOVWF	r0x04
002472   0e80     movlw	0x80               	MOVLW	0x80
002474   6e06     movwf	0x6, 0             	MOVWF	r0x06
002476   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002478   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00247c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002482   5000     movf	0, 0, 0             	MOVF	r0x00, W
002484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002486   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
002488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248a   0e26     movlw	0x26               	MOVLW	HIGH(__str_0)
00248c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248e   0e9a     movlw	0x9a               	MOVLW	LOW(__str_0)
002490   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002492   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002494   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002496   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002498   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00249a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00249c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00249e   ecf3     call	0x1de6, 0           	CALL	_sprintf
0024a0   f00e
0024a2   0e0a     movlw	0xa                	MOVLW	0x0a
0024a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	46; src/time.c	return buffer;
0024a6   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
0024a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0024aa   0e26     movlw	0x26               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0024ac   6e00     movwf	0, 0               	MOVWF	r0x00
0024ae   0e80     movlw	0x80               	MOVLW	0x80
0024b0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0024b2   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0024b4   fff4
0024b6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0024b8   fff3
0024ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024bc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0024be   f006
0024c0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0024c2   f005
0024c4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0024c6   f004
0024c8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024ca   f003
0024cc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0024ce   f002
0024d0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0024d2   f001
0024d4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0024d6   f000
0024d8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024da   ffd9
0024dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__time2string	code
                                           _time2string:
                                           ;	.line	26; src/time.c	char* time2string(void){
000d00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d02   ffe5
000d04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d06   ffd9
000d08   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d0a   ffe5
000d0c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d0e   ffe5
000d10   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d12   ffe5
000d14   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d16   ffe5
                                           ;	.line	28; src/time.c	string[0] = to_double_digits(get_hours())[0];
000d18   ec10     call	0x2620, 0           	CALL	_get_hours
000d1a   f013
000d1c   6e00     movwf	0, 0               	MOVWF	r0x00
000d1e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d20   f001
000d22   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d24   f002
000d26   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000d28   f003
000d2a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d36   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3a   ec17     call	0x242e, 0           	CALL	_to_double_digits
000d3c   f012
000d3e   6e00     movwf	0, 0               	MOVWF	r0x00
000d40   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d42   f001
000d44   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d46   f002
000d48   0e04     movlw	0x4                	MOVLW	0x04
000d4a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d4c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000d4e   ffe9
000d50   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000d52   fff3
000d54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d56   ec69     call	0x28d2, 0           	CALL	__gptrget1
000d58   f014
000d5a   6e00     movwf	0, 0               	MOVWF	r0x00
000d5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d5e   010f     movlb	0xf                	BANKSEL	_time2string_string_1_1
000d60   6f55     movwf	0x55, 0x1          	MOVWF	_time2string_string_1_1, B
                                           ;	.line	29; src/time.c	string[1] = to_double_digits(get_hours())[1];
000d62   ec10     call	0x2620, 0           	CALL	_get_hours
000d64   f013
000d66   6e00     movwf	0, 0               	MOVWF	r0x00
000d68   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d6a   f001
000d6c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d6e   f002
000d70   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000d72   f003
000d74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   ec17     call	0x242e, 0           	CALL	_to_double_digits
000d86   f012
000d88   6e00     movwf	0, 0               	MOVWF	r0x00
000d8a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d8c   f001
000d8e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d90   f002
000d92   0e04     movlw	0x4                	MOVLW	0x04
000d94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d96   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000d98   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000d9a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000d9c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000d9e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000da0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000da2   ffe9
000da4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000da6   fff3
000da8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000daa   ec69     call	0x28d2, 0           	CALL	__gptrget1
000dac   f014
000dae   6e00     movwf	0, 0               	MOVWF	r0x00
000db0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000db2   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 1)
000db4   6f56     movwf	0x56, 0x1          	MOVWF	(_time2string_string_1_1 + 1), B
                                           ;	.line	30; src/time.c	string[2] = ':';
000db6   0e3a     movlw	0x3a               	MOVLW	0x3a
000db8   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 2)
000dba   6f57     movwf	0x57, 0x1          	MOVWF	(_time2string_string_1_1 + 2), B
                                           ;	.line	31; src/time.c	string[3] = to_double_digits(get_minutes())[0];
000dbc   ecda     call	0x1fb4, 0           	CALL	_get_minutes
000dbe   f00f
000dc0   6e00     movwf	0, 0               	MOVWF	r0x00
000dc2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000dc4   f001
000dc6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000dc8   f002
000dca   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000dcc   f003
000dce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dda   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dde   ec17     call	0x242e, 0           	CALL	_to_double_digits
000de0   f012
000de2   6e00     movwf	0, 0               	MOVWF	r0x00
000de4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000de6   f001
000de8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000dea   f002
000dec   0e04     movlw	0x4                	MOVLW	0x04
000dee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000df0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000df2   ffe9
000df4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000df6   fff3
000df8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dfa   ec69     call	0x28d2, 0           	CALL	__gptrget1
000dfc   f014
000dfe   6e00     movwf	0, 0               	MOVWF	r0x00
000e00   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e02   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 3)
000e04   6f58     movwf	0x58, 0x1          	MOVWF	(_time2string_string_1_1 + 3), B
                                           ;	.line	32; src/time.c	string[4] = to_double_digits(get_minutes())[1];
000e06   ecda     call	0x1fb4, 0           	CALL	_get_minutes
000e08   f00f
000e0a   6e00     movwf	0, 0               	MOVWF	r0x00
000e0c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000e0e   f001
000e10   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000e12   f002
000e14   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000e16   f003
000e18   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e20   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e24   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e28   ec17     call	0x242e, 0           	CALL	_to_double_digits
000e2a   f012
000e2c   6e00     movwf	0, 0               	MOVWF	r0x00
000e2e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000e30   f001
000e32   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000e34   f002
000e36   0e04     movlw	0x4                	MOVLW	0x04
000e38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e3a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e3c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e3e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000e40   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e42   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000e44   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000e46   ffe9
000e48   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000e4a   fff3
000e4c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e4e   ec69     call	0x28d2, 0           	CALL	__gptrget1
000e50   f014
000e52   6e00     movwf	0, 0               	MOVWF	r0x00
000e54   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e56   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 4)
000e58   6f59     movwf	0x59, 0x1          	MOVWF	(_time2string_string_1_1 + 4), B
                                           ;	.line	33; src/time.c	string[5] = ':';
000e5a   0e3a     movlw	0x3a               	MOVLW	0x3a
000e5c   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 5)
000e5e   6f5a     movwf	0x5a, 0x1          	MOVWF	(_time2string_string_1_1 + 5), B
                                           ;	.line	34; src/time.c	string[6] = to_double_digits(get_seconds())[0];
000e60   ec56     call	0x18ac, 0           	CALL	_get_seconds
000e62   f00c
000e64   6e00     movwf	0, 0               	MOVWF	r0x00
000e66   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000e68   f001
000e6a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000e6c   f002
000e6e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000e70   f003
000e72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e82   ec17     call	0x242e, 0           	CALL	_to_double_digits
000e84   f012
000e86   6e00     movwf	0, 0               	MOVWF	r0x00
000e88   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000e8a   f001
000e8c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000e8e   f002
000e90   0e04     movlw	0x4                	MOVLW	0x04
000e92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e94   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000e96   ffe9
000e98   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000e9a   fff3
000e9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e9e   ec69     call	0x28d2, 0           	CALL	__gptrget1
000ea0   f014
000ea2   6e00     movwf	0, 0               	MOVWF	r0x00
000ea4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ea6   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 6)
000ea8   6f5b     movwf	0x5b, 0x1          	MOVWF	(_time2string_string_1_1 + 6), B
                                           ;	.line	35; src/time.c	string[7] = to_double_digits(get_seconds())[1];	
000eaa   ec56     call	0x18ac, 0           	CALL	_get_seconds
000eac   f00c
000eae   6e00     movwf	0, 0               	MOVWF	r0x00
000eb0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000eb2   f001
000eb4   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000eb6   f002
000eb8   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000eba   f003
000ebc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ebe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ec2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ec6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ecc   ec17     call	0x242e, 0           	CALL	_to_double_digits
000ece   f012
000ed0   6e00     movwf	0, 0               	MOVWF	r0x00
000ed2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000ed4   f001
000ed6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000ed8   f002
000eda   0e04     movlw	0x4                	MOVLW	0x04
000edc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ede   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000ee0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ee2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000ee4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ee6   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000ee8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000eea   ffe9
000eec   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000eee   fff3
000ef0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ef2   ec69     call	0x28d2, 0           	CALL	__gptrget1
000ef4   f014
000ef6   6e00     movwf	0, 0               	MOVWF	r0x00
000ef8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000efa   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 7)
000efc   6f5c     movwf	0x5c, 0x1          	MOVWF	(_time2string_string_1_1 + 7), B
000efe   010f     movlb	0xf                	BANKSEL	(_time2string_string_1_1 + 8)
                                           ;	.line	36; src/time.c	string[8] = '\0';
000f00   6b5d     clrf	0x5d, 0x1           	CLRF	(_time2string_string_1_1 + 8), B
                                           ;	.line	37; src/time.c	return string;
000f02   0e0f     movlw	0xf                	MOVLW	HIGH(_time2string_string_1_1)
000f04   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f06   0e55     movlw	0x55               	MOVLW	LOW(_time2string_string_1_1)
000f08   6e00     movwf	0, 0               	MOVWF	r0x00
000f0a   0e80     movlw	0x80               	MOVLW	0x80
000f0c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f0e   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
000f10   fff4
000f12   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f14   fff3
000f16   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f18   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f1a   f003
000f1c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f1e   f002
000f20   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f22   f001
000f24   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f26   f000
000f28   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f2a   ffd9
000f2c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__get_seconds	code
                                           _get_seconds:
                                           ;	.line	17; src/time.c	long get_seconds(void){
0018ac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0018ae   ffe5
0018b0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0018b2   ffd9
0018b4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0018b6   ffe5
0018b8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0018ba   ffe5
0018bc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0018be   ffe5
0018c0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0018c2   ffe5
0018c4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0018c6   ffe5
0018c8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0018ca   ffe5
0018cc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0018ce   ffe5
0018d0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0018d2   ffe5
                                           ;	.line	18; src/time.c	long remaining_seconds = seconds_since_midnight - (get_hours() * SEC_IN_HOUR + get_minutes() * SEC_IN_MIN);
0018d4   ec10     call	0x2620, 0           	CALL	_get_hours
0018d6   f013
0018d8   6e00     movwf	0, 0               	MOVWF	r0x00
0018da   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0018dc   f001
0018de   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0018e0   f002
0018e2   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0018e4   f003
0018e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0018f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018f6   0e00     movlw	0                  	MOVLW	0x00
0018f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018fa   0e00     movlw	0                  	MOVLW	0x00
0018fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018fe   0e0e     movlw	0xe                	MOVLW	0x0e
001900   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001902   0e10     movlw	0x10               	MOVLW	0x10
001904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001906   ec97     call	0xf2e, 0            	CALL	__mullong
001908   f007
00190a   6e00     movwf	0, 0               	MOVWF	r0x00
00190c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00190e   f001
001910   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001912   f002
001914   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001916   f003
001918   0e08     movlw	0x8                	MOVLW	0x08
00191a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00191c   ecda     call	0x1fb4, 0           	CALL	_get_minutes
00191e   f00f
001920   6e04     movwf	0x4, 0             	MOVWF	r0x04
001922   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001924   f005
001926   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
001928   f006
00192a   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
00192c   f007
00192e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001932   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001936   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00193a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00193c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00193e   0e00     movlw	0                  	MOVLW	0x00
001940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001942   0e00     movlw	0                  	MOVLW	0x00
001944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001946   0e00     movlw	0                  	MOVLW	0x00
001948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194a   0e3c     movlw	0x3c               	MOVLW	0x3c
00194c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194e   ec97     call	0xf2e, 0            	CALL	__mullong
001950   f007
001952   6e04     movwf	0x4, 0             	MOVWF	r0x04
001954   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001956   f005
001958   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
00195a   f006
00195c   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
00195e   f007
001960   0e08     movlw	0x8                	MOVLW	0x08
001962   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001964   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001966   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001968   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00196a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00196c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00196e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001970   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001972   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001974   5000     movf	0, 0, 0             	MOVF	r0x00, W
001976   010e     movlb	0xe                	BANKSEL	_seconds_since_midnight
001978   5d0d     subwf	0xd, 0, 0x1        	SUBWF	_seconds_since_midnight, W, B
00197a   6e00     movwf	0, 0               	MOVWF	r0x00
00197c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00197e   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 1)
001980   590e     subwfb	0xe, 0, 0x1       	SUBWFB	(_seconds_since_midnight + 1), W, B
001982   6e01     movwf	0x1, 0             	MOVWF	r0x01
001984   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001986   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 2)
001988   590f     subwfb	0xf, 0, 0x1       	SUBWFB	(_seconds_since_midnight + 2), W, B
00198a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00198c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00198e   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 3)
001990   5910     subwfb	0x10, 0, 0x1      	SUBWFB	(_seconds_since_midnight + 3), W, B
001992   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	19; src/time.c	return remaining_seconds;
001994   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001996   ffe9
001998   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
00199a   fff4
00199c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00199e   fff3
0019a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019a2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0019a4   f007
0019a6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0019a8   f006
0019aa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0019ac   f005
0019ae   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0019b0   f004
0019b2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0019b4   f003
0019b6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0019b8   f002
0019ba   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019bc   f001
0019be   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0019c0   f000
0019c2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019c4   ffd9
0019c6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__get_minutes	code
                                           _get_minutes:
                                           ;	.line	12; src/time.c	long get_minutes(void){
001fb4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001fb6   ffe5
001fb8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001fba   ffd9
001fbc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001fbe   ffe5
001fc0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001fc2   ffe5
001fc4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001fc6   ffe5
001fc8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001fca   ffe5
                                           ;	.line	13; src/time.c	int remaining_seconds = seconds_since_midnight - (get_hours() * SEC_IN_HOUR);
001fcc   ec10     call	0x2620, 0           	CALL	_get_hours
001fce   f013
001fd0   6e00     movwf	0, 0               	MOVWF	r0x00
001fd2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001fd4   f001
001fd6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001fd8   f002
001fda   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001fdc   f003
001fde   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001fe0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fe2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001fe4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fe6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fe8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fea   5000     movf	0, 0, 0             	MOVF	r0x00, W
001fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fee   0e00     movlw	0                  	MOVLW	0x00
001ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff2   0e00     movlw	0                  	MOVLW	0x00
001ff4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff6   0e0e     movlw	0xe                	MOVLW	0x0e
001ff8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ffa   0e10     movlw	0x10               	MOVLW	0x10
001ffc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ffe   ec97     call	0xf2e, 0            	CALL	__mullong
002000   f007
002002   6e00     movwf	0, 0               	MOVWF	r0x00
002004   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002006   f001
002008   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00200a   f002
00200c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00200e   f003
002010   0e08     movlw	0x8                	MOVLW	0x08
002012   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002014   5000     movf	0, 0, 0             	MOVF	r0x00, W
002016   010e     movlb	0xe                	BANKSEL	_seconds_since_midnight
002018   5d0d     subwf	0xd, 0, 0x1        	SUBWF	_seconds_since_midnight, W, B
00201a   6e00     movwf	0, 0               	MOVWF	r0x00
00201c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00201e   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 1)
002020   590e     subwfb	0xe, 0, 0x1       	SUBWFB	(_seconds_since_midnight + 1), W, B
002022   6e01     movwf	0x1, 0             	MOVWF	r0x01
002024   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002026   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 2)
002028   590f     subwfb	0xf, 0, 0x1       	SUBWFB	(_seconds_since_midnight + 2), W, B
00202a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00202c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00202e   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 3)
002030   5910     subwfb	0x10, 0, 0x1      	SUBWFB	(_seconds_since_midnight + 3), W, B
002032   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	14; src/time.c	return (remaining_seconds / SEC_IN_MIN);
002034   0e00     movlw	0                  	MOVLW	0x00
002036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002038   0e3c     movlw	0x3c               	MOVLW	0x3c
00203a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00203c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00203e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002040   5000     movf	0, 0, 0             	MOVF	r0x00, W
002042   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002044   ec78     call	0x1cf0, 0           	CALL	__divsint
002046   f00e
002048   6e00     movwf	0, 0               	MOVWF	r0x00
00204a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00204c   f001
00204e   0e04     movlw	0x4                	MOVLW	0x04
002050   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002052   6ae8     clrf	0xe8, 0             	CLRF	WREG
002054   be01     btfsc	0x1, 0x7, 0        	BTFSC	r0x01, 7
002056   0eff     movlw	0xff               	MOVLW	0xff
002058   6e02     movwf	0x2, 0             	MOVWF	r0x02
00205a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00205c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00205e   ffe9
002060   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002062   fff4
002064   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002066   fff3
002068   5000     movf	0, 0, 0             	MOVF	r0x00, W
00206a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00206c   f003
00206e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002070   f002
002072   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002074   f001
002076   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002078   f000
00207a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00207c   ffd9
00207e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__get_hours	code
                                           _get_hours:
                                           ;	.line	8; src/time.c	long get_hours(void){
002620   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002622   ffe5
002624   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002626   ffd9
002628   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00262a   ffe5
00262c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00262e   ffe5
002630   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002632   ffe5
002634   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002636   ffe5
                                           ;	.line	9; src/time.c	return (seconds_since_midnight / SEC_IN_HOUR);
002638   0e00     movlw	0                  	MOVLW	0x00
00263a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263c   0e00     movlw	0                  	MOVLW	0x00
00263e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002640   0e0e     movlw	0xe                	MOVLW	0x0e
002642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002644   0e10     movlw	0x10               	MOVLW	0x10
002646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002648   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 3)
00264a   5110     movf	0x10, 0, 0x1        	MOVF	(_seconds_since_midnight + 3), W, B
00264c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00264e   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 2)
002650   510f     movf	0xf, 0, 0x1         	MOVF	(_seconds_since_midnight + 2), W, B
002652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002654   010e     movlb	0xe                	BANKSEL	(_seconds_since_midnight + 1)
002656   510e     movf	0xe, 0, 0x1         	MOVF	(_seconds_since_midnight + 1), W, B
002658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00265a   010e     movlb	0xe                	BANKSEL	_seconds_since_midnight
00265c   510d     movf	0xd, 0, 0x1         	MOVF	_seconds_since_midnight, W, B
00265e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002660   ec7d     call	0x12fa, 0           	CALL	__divslong
002662   f009
002664   6e00     movwf	0, 0               	MOVWF	r0x00
002666   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002668   f001
00266a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00266c   f002
00266e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
002670   f003
002672   0e08     movlw	0x8                	MOVLW	0x08
002674   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002676   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002678   ffe9
00267a   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
00267c   fff4
00267e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002680   fff3
002682   5000     movf	0, 0, 0             	MOVF	r0x00, W
002684   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002686   f003
002688   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00268a   f002
00268c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00268e   f001
002690   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002692   f000
002694   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002696   ffd9
002698   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00269a   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x6c, 0x75, 0x00
00269c   6c32     negf	0x32, 0             
00269e   0075     dw	0x75  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1750 (0x06d6) bytes ( 1.34%)
                                           ;           	  875 (0x036b) words
                                           ; udata size:	   12 (0x000c) bytes ( 0.31%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
