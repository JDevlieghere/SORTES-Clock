gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  23:12:53
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 23:12:53 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_clock
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _main
                                           	global _alarm_led
                                           	global _lowPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_lowPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_lowPriorityInterruptHandler:
000008   ef41     goto	0x1082              	GOTO	_lowPriorityInterruptHandler
00000a   f008
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	46; src/clock.c	_time = time_create();
002c9e   ec4b     call	0x2a96, 0           	CALL	_time_create
002ca0   f015
002ca2   010f     movlb	0xf                	BANKSEL	__time
002ca4   6f59     movwf	0x59, 0x1          	MOVWF	__time, B
002ca6   cff3     movff	0xff3, 0xf5a       	MOVFF	PRODL, (__time + 1)
002ca8   ff5a
002caa   cff4     movff	0xff4, 0xf5b       	MOVFF	PRODH, (__time + 2)
002cac   ff5b
                                           ;	.line	47; src/clock.c	_alarm = time_create();
002cae   ec4b     call	0x2a96, 0           	CALL	_time_create
002cb0   f015
002cb2   010f     movlb	0xf                	BANKSEL	__alarm
002cb4   6f5c     movwf	0x5c, 0x1          	MOVWF	__alarm, B
002cb6   cff3     movff	0xff3, 0xf5d       	MOVFF	PRODL, (__alarm + 1)
002cb8   ff5d
002cba   cff4     movff	0xff4, 0xf5e       	MOVFF	PRODH, (__alarm + 2)
002cbc   ff5e
                                           ;	.line	49; src/clock.c	init();
002cbe   ec03     call	0x2e06, 0           	CALL	_init
002cc0   f017
002cc2   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	50; src/clock.c	init_clock(_time);
002cc4   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
002cc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cc8   010f     movlb	0xf                	BANKSEL	(__time + 1)
002cca   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
002ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cce   010f     movlb	0xf                	BANKSEL	__time
002cd0   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
002cd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cd4   ecf2     call	0x1be4, 0           	CALL	_init_clock
002cd6   f00d
002cd8   0e03     movlw	0x3                	MOVLW	0x03
002cda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	51; src/clock.c	time_set(_alarm,0,0,5);
002cdc   0e00     movlw	0                  	MOVLW	0x00
002cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce0   0e05     movlw	0x5                	MOVLW	0x05
002ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce4   0e00     movlw	0                  	MOVLW	0x00
002ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce8   0e00     movlw	0                  	MOVLW	0x00
002cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cec   0e00     movlw	0                  	MOVLW	0x00
002cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf0   0e00     movlw	0                  	MOVLW	0x00
002cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf4   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
002cf6   515e     movf	0x5e, 0, 0x1        	MOVF	(__alarm + 2), W, B
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
002cfc   515d     movf	0x5d, 0, 0x1        	MOVF	(__alarm + 1), W, B
002cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d00   010f     movlb	0xf                	BANKSEL	__alarm
002d02   515c     movf	0x5c, 0, 0x1        	MOVF	__alarm, W, B
002d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d06   ec4a     call	0x2094, 0           	CALL	_time_set
002d08   f010
002d0a   0e09     movlw	0x9                	MOVLW	0x09
002d0c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	52; src/clock.c	update_display();
002d0e   ec6a     call	0x28d4, 0           	CALL	_update_display
002d10   f014
                                           ;	.line	53; src/clock.c	return 0;
002d12   6af3     clrf	0xf3, 0             	CLRF	PRODL
002d14   6ae8     clrf	0xe8, 0             	CLRF	WREG
002d16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	160; src/clock.c	void init(void){
002e06   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e08   ffe5
002e0a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e0c   ffd9
                                           ;	.line	162; src/clock.c	LCDInit();
002e0e   ec56     call	0xaac, 0            	CALL	_LCDInit
002e10   f005
                                           ;	.line	165; src/clock.c	BUTTON0_TRIS = 1;
002e12   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	166; src/clock.c	BUTTON1_TRIS = 1;
002e14   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	169; src/clock.c	INTCONbits.GIE = 1;
002e16   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	170; src/clock.c	INTCONbits.PEIE = 1;
002e18   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	171; src/clock.c	RCONbits.IPEN = 1; 
002e1a   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	174; src/clock.c	T0CONbits.TMR0ON = 0;
002e1c   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	177; src/clock.c	TMR0H = 0x00000000;
002e1e   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	178; src/clock.c	TMR0L = 0x00000000;
002e20   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	181; src/clock.c	T0CONbits.T08BIT = 0;
002e22   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	184; src/clock.c	T0CONbits.T0CS = 0;
002e24   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	187; src/clock.c	T0CONbits.PSA = 1;
002e26   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	190; src/clock.c	INTCONbits.TMR0IE = 1;
002e28   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	193; src/clock.c	INTCON3bits.INT1IE = 1;
002e2a   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	194; src/clock.c	INTCON3bits.INT3IE = 1;
002e2c   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	197; src/clock.c	LED0_TRIS = 0;
002e2e   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	198; src/clock.c	LED1_TRIS = 0;   
002e30   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	199; src/clock.c	LED2_TRIS = 0;
002e32   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	200; src/clock.c	LED3_TRIS = 0;
002e34   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	203; src/clock.c	LED0_IO = 0; 
002e36   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	204; src/clock.c	LED1_IO = 0;
002e38   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	205; src/clock.c	LED2_IO = 0;
002e3a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	206; src/clock.c	LED3_IO = 1;
002e3c   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
002e3e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e40   ffd9
002e42   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__lowPriorityInterruptHandler	code
                                           _lowPriorityInterruptHandler:
                                           ;	.line	122; src/clock.c	void lowPriorityInterruptHandler (void) __interrupt(1){
001082   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001084   ffe5
001086   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001088   ffe5
00108a   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00108c   ffe5
00108e   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001090   ffe5
001092   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001094   ffe5
001096   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001098   ffe5
00109a   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00109c   ffe5
00109e   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0010a0   ffe5
0010a2   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0010a4   ffe5
0010a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0010a8   ffe5
0010aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0010ac   ffd9
0010ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0010b0   ffe5
0010b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010b4   ffe5
                                           ;	.line	123; src/clock.c	if(INTCON3bits.INT1F == 1){
0010b6   6a00     clrf	0, 0                	CLRF	r0x00
0010b8   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
0010ba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010be   0a01     xorlw	0x1                	XORLW	0x01
0010c0   e109     bnz	0x10d4               	BNZ	_00181_DS_
                                           ;	.line	124; src/clock.c	but2_pressed = 1;	
0010c2   0e01     movlw	0x1                	MOVLW	0x01
0010c4   010f     movlb	0xf                	BANKSEL	_but2_pressed
0010c6   6f56     movwf	0x56, 0x1          	MOVWF	_but2_pressed, B
0010c8   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
0010ca   6b57     clrf	0x57, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	125; src/clock.c	if(BUTTON0_IO);
0010cc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010ce   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0010d0   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	126; src/clock.c	INTCON3bits.INT1F = 0; 
0010d2   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00181_DS_:
                                           ;	.line	129; src/clock.c	if(INTCON3bits.INT3F  == 1){
0010d4   6a00     clrf	0, 0                	CLRF	r0x00
0010d6   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
0010d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010dc   0a01     xorlw	0x1                	XORLW	0x01
0010de   e109     bnz	0x10f2               	BNZ	_00183_DS_
                                           ;	.line	130; src/clock.c	but1_pressed = 1;	
0010e0   0e01     movlw	0x1                	MOVLW	0x01
0010e2   010f     movlb	0xf                	BANKSEL	_but1_pressed
0010e4   6f54     movwf	0x54, 0x1          	MOVWF	_but1_pressed, B
0010e6   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
0010e8   6b55     clrf	0x55, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	131; src/clock.c	if(BUTTON1_IO);
0010ea   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010ec   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0010ee   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	132; src/clock.c	INTCON3bits.INT3F = 0; 
0010f0   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00183_DS_:
                                           ;	.line	134; src/clock.c	if(INTCONbits.TMR0IF == 1) {
0010f2   6a00     clrf	0, 0                	CLRF	r0x00
0010f4   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0010f6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010fa   0a01     xorlw	0x1                	XORLW	0x01
0010fc   e001     bz	0x1100                	BZ	_00212_DS_
0010fe   d06b     bra	0x11d6               	BRA	_00197_DS_
                                           _00212_DS_:
001100   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	135; src/clock.c	overflow_counter++;
001102   2b52     incf	0x52, 0x1, 0x1      	INCF	_overflow_counter, F, B
001104   e302     bnc	0x110a               	BNC	_10223_DS_
001106   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001108   2b53     incf	0x53, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10223_DS_:
00110a   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	136; src/clock.c	if(overflow_counter == 50){
00110c   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
00110e   0a32     xorlw	0x32               	XORLW	0x32
001110   e103     bnz	0x1118               	BNZ	_00213_DS_
001112   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001114   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
001116   e001     bz	0x111a                	BZ	_00214_DS_
                                           _00213_DS_:
001118   d003     bra	0x1120               	BRA	_00193_DS_
                                           _00214_DS_:
                                           ;	.line	137; src/clock.c	toggle_led();
00111a   ec3d     call	0x2e7a, 0           	CALL	_toggle_led
00111c   f017
00111e   d05a     bra	0x11d4               	BRA	_00194_DS_
                                           _00193_DS_:
001120   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	138; src/clock.c	}else if(overflow_counter == 100){
001122   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
001124   0a64     xorlw	0x64               	XORLW	0x64
001126   e103     bnz	0x112e               	BNZ	_00215_DS_
001128   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
00112a   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
00112c   e001     bz	0x1130                	BZ	_00216_DS_
                                           _00215_DS_:
00112e   d052     bra	0x11d4               	BRA	_00194_DS_
                                           _00216_DS_:
001130   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	139; src/clock.c	if(time_equals(_alarm,_time)){
001132   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
001134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001136   010f     movlb	0xf                	BANKSEL	(__time + 1)
001138   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
00113a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113c   010f     movlb	0xf                	BANKSEL	__time
00113e   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
001140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001142   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001144   515e     movf	0x5e, 0, 0x1        	MOVF	(__alarm + 2), W, B
001146   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001148   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
00114a   515d     movf	0x5d, 0, 0x1        	MOVF	(__alarm + 1), W, B
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   010f     movlb	0xf                	BANKSEL	__alarm
001150   515c     movf	0x5c, 0, 0x1        	MOVF	__alarm, W, B
001152   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001154   ecc7     call	0x138e, 0           	CALL	_time_equals
001156   f009
001158   6e00     movwf	0, 0               	MOVWF	r0x00
00115a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00115c   f001
00115e   0e06     movlw	0x6                	MOVLW	0x06
001160   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001162   5000     movf	0, 0, 0             	MOVF	r0x00, W
001164   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001166   e005     bz	0x1172                	BZ	_00185_DS_
                                           ;	.line	140; src/clock.c	alarm_going_off = 1;
001168   0e01     movlw	0x1                	MOVLW	0x01
00116a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
00116c   6f4e     movwf	0x4e, 0x1          	MOVWF	_alarm_going_off, B
00116e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001170   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00185_DS_:
001172   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	142; src/clock.c	if(alarm_going_off){
001174   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_going_off, W, B
001176   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001178   114f     iorwf	0x4f, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
00117a   e017     bz	0x11aa                	BZ	_00189_DS_
00117c   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	143; src/clock.c	alarm_counter++;
00117e   2b50     incf	0x50, 0x1, 0x1      	INCF	_alarm_counter, F, B
001180   e302     bnc	0x1186               	BNC	_20224_DS_
001182   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001184   2b51     incf	0x51, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20224_DS_:
                                           ;	.line	144; src/clock.c	alarm_led();
001186   ecbd     call	0x2d7a, 0           	CALL	_alarm_led
001188   f016
00118a   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	145; src/clock.c	if(alarm_counter==30){
00118c   5150     movf	0x50, 0, 0x1        	MOVF	_alarm_counter, W, B
00118e   0a1e     xorlw	0x1e               	XORLW	0x1e
001190   e103     bnz	0x1198               	BNZ	_00217_DS_
001192   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001194   5151     movf	0x51, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001196   e001     bz	0x119a                	BZ	_00218_DS_
                                           _00217_DS_:
001198   d008     bra	0x11aa               	BRA	_00189_DS_
                                           _00218_DS_:
00119a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	146; src/clock.c	alarm_going_off =0;
00119c   6b4e     clrf	0x4e, 0x1           	CLRF	_alarm_going_off, B
00119e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0011a0   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
0011a2   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	147; src/clock.c	alarm_counter = 0;
0011a4   6b50     clrf	0x50, 0x1           	CLRF	_alarm_counter, B
0011a6   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
0011a8   6b51     clrf	0x51, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00189_DS_:
0011aa   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	150; src/clock.c	overflow_counter = 0;
0011ac   6b52     clrf	0x52, 0x1           	CLRF	_overflow_counter, B
0011ae   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0011b0   6b53     clrf	0x53, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	151; src/clock.c	toggle_led();
0011b2   ec3d     call	0x2e7a, 0           	CALL	_toggle_led
0011b4   f017
0011b6   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	152; src/clock.c	add_second(_time);
0011b8   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
0011ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011bc   010f     movlb	0xf                	BANKSEL	(__time + 1)
0011be   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
0011c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c2   010f     movlb	0xf                	BANKSEL	__time
0011c4   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
0011c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c8   ec05     call	0x260a, 0           	CALL	_add_second
0011ca   f013
0011cc   0e03     movlw	0x3                	MOVLW	0x03
0011ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	153; src/clock.c	update_display();
0011d0   ec6a     call	0x28d4, 0           	CALL	_update_display
0011d2   f014
                                           _00194_DS_:
                                           ;	.line	155; src/clock.c	INTCONbits.TMR0IF = 0;
0011d4   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00197_DS_:
0011d6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011d8   f001
0011da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011dc   f000
0011de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011e0   ffd9
0011e2   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0011e4   fffb
0011e6   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0011e8   fffa
0011ea   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0011ec   ffea
0011ee   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0011f0   ffe9
0011f2   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0011f4   fff4
0011f6   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0011f8   fff3
0011fa   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0011fc   ffe0
0011fe   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001200   ffd8
001202   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001204   ffe8
001206   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	116; src/clock.c	char* to_double_digits(int value){
002a0a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a0c   ffe5
002a0e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a10   ffd9
002a12   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a14   ffe5
002a16   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a18   ffe5
002a1a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a1c   ffe5
002a1e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a20   ffe5
002a22   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a24   ffe5
002a26   0e02     movlw	0x2                	MOVLW	0x02
002a28   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a2a   f000
002a2c   0e03     movlw	0x3                	MOVLW	0x03
002a2e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a30   f001
                                           ;	.line	118; src/clock.c	sprintf(buffer, "%02d", value);
002a32   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002a34   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a36   0e40     movlw	0x40               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002a38   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a3a   0e80     movlw	0x80               	MOVLW	0x80
002a3c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a42   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a46   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   0e29     movlw	0x29               	MOVLW	HIGH(__str_3)
002a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4e   0e6c     movlw	0x6c               	MOVLW	LOW(__str_3)
002a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5e   ec63     call	0x1ec6, 0           	CALL	_sprintf
002a60   f00f
002a62   0e08     movlw	0x8                	MOVLW	0x08
002a64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	119; src/clock.c	return buffer;
002a66   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002a68   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a6a   0e40     movlw	0x40               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002a6c   6e00     movwf	0, 0               	MOVWF	r0x00
002a6e   0e80     movlw	0x80               	MOVLW	0x80
002a70   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a72   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002a74   fff4
002a76   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002a78   fff3
002a7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a7c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a7e   f004
002a80   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a82   f003
002a84   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a86   f002
002a88   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a8a   f001
002a8c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a8e   f000
002a90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a92   ffd9
002a94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	105; src/clock.c	void display_string(BYTE pos, char* text){
0019d6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0019d8   ffe5
0019da   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0019dc   ffd9
0019de   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0019e0   ffe5
0019e2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0019e4   ffe5
0019e6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0019e8   ffe5
0019ea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0019ec   ffe5
0019ee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0019f0   ffe5
0019f2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0019f4   ffe5
0019f6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0019f8   ffe5
0019fa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0019fc   ffe5
0019fe   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a00   ffe5
001a02   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001a04   ffe5
001a06   0e02     movlw	0x2                	MOVLW	0x02
001a08   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001a0a   f000
001a0c   0e03     movlw	0x3                	MOVLW	0x03
001a0e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001a10   f001
001a12   0e04     movlw	0x4                	MOVLW	0x04
001a14   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001a16   f002
001a18   0e05     movlw	0x5                	MOVLW	0x05
001a1a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001a1c   f003
                                           ;	.line	106; src/clock.c	BYTE        l = strlen(text);
001a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2a   ecd0     call	0x2ba0, 0           	CALL	_strlen
001a2c   f015
001a2e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a30   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001a32   f005
001a34   0e03     movlw	0x3                	MOVLW	0x03
001a36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	107; src/clock.c	BYTE      max = 32-pos;    
001a38   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a3a   0820     sublw	0x20               	SUBLW	0x20
001a3c   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	108; src/clock.c	char       *d = (char*)&LCDText[pos];
001a3e   6a06     clrf	0x6, 0              	CLRF	r0x06
001a40   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001a42   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a44   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001a46   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001a48   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a4a   6e06     movwf	0x6, 0             	MOVWF	r0x06
001a4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a4e   6e00     movwf	0, 0               	MOVWF	r0x00
001a50   0e80     movlw	0x80               	MOVLW	0x80
001a52   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	110; src/clock.c	size_t      n = (l<max)?l:max;
001a54   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a56   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001a58   e302     bnc	0x1a5e               	BNC	_00165_DS_
001a5a   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001a5c   f004
                                           _00165_DS_:
001a5e   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	111; src/clock.c	if (n != 0)
001a60   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a62   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001a64   e027     bz	0x1ab4                	BZ	_00161_DS_
                                           _00157_DS_:
                                           ;	.line	112; src/clock.c	while (n-- != 0)*d++ = *s++;
001a66   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001a68   f008
001a6a   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001a6c   f009
001a6e   0eff     movlw	0xff               	MOVLW	0xff
001a70   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001a74   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001a76   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a78   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001a7a   e01c     bz	0x1ab4                	BZ	_00161_DS_
001a7c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001a7e   ffe9
001a80   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001a82   fff3
001a84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a86   ec81     call	0x2f02, 0           	CALL	__gptrget1
001a88   f017
001a8a   6e08     movwf	0x8, 0             	MOVWF	r0x08
001a8c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001a8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a90   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001a92   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a94   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001a96   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a98   ffe5
001a9a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a9c   ffe9
001a9e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001aa0   fff3
001aa2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001aa4   ecb8     call	0x2f70, 0           	CALL	__gptrput1
001aa6   f017
001aa8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001aaa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aac   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001aae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ab0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001ab2   d7d9     bra	0x1a66               	BRA	_00157_DS_
                                           _00161_DS_:
                                           ;	.line	113; src/clock.c	LCDUpdate();
001ab4   ec21     call	0x842, 0            	CALL	_LCDUpdate
001ab6   f004
001ab8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001aba   f009
001abc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001abe   f008
001ac0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ac2   f007
001ac4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ac6   f006
001ac8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001aca   f005
001acc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ace   f004
001ad0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ad2   f003
001ad4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ad6   f002
001ad8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ada   f001
001adc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ade   f000
001ae0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ae2   ffd9
001ae4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	87; src/clock.c	int get_input(int maxvalue, char *text){
000d08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d0a   ffe5
000d0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d0e   ffd9
000d10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d12   ffe5
000d14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d16   ffe5
000d18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d1a   ffe5
000d1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d1e   ffe5
000d20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d22   ffe5
000d24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d26   ffe5
000d28   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d2a   ffe5
000d2c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d2e   ffe5
000d30   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d32   ffe5
000d34   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000d36   ffe5
000d38   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000d3a   ffe5
000d3c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000d3e   ffe5
000d40   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000d42   ffe5
000d44   0e02     movlw	0x2                	MOVLW	0x02
000d46   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d48   f000
000d4a   0e03     movlw	0x3                	MOVLW	0x03
000d4c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d4e   f001
000d50   0e04     movlw	0x4                	MOVLW	0x04
000d52   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000d54   f002
000d56   0e05     movlw	0x5                	MOVLW	0x05
000d58   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000d5a   f003
000d5c   0e06     movlw	0x6                	MOVLW	0x06
000d5e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000d60   f004
                                           ;	.line	88; src/clock.c	BYTE length = strlen(text);
000d62   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   ecd0     call	0x2ba0, 0           	CALL	_strlen
000d70   f015
000d72   6e05     movwf	0x5, 0             	MOVWF	r0x05
000d74   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000d76   f006
000d78   0e03     movlw	0x3                	MOVLW	0x03
000d7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	89; src/clock.c	int value = 0;
000d7c   6a06     clrf	0x6, 0              	CLRF	r0x06
000d7e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	90; src/clock.c	display_string(0, text);
000d80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8c   0e00     movlw	0                  	MOVLW	0x00
000d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d90   eceb     call	0x19d6, 0           	CALL	_display_string
000d92   f00c
000d94   0e04     movlw	0x4                	MOVLW	0x04
000d96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	91; src/clock.c	while(1)
000d98   2805     incf	0x5, 0, 0           	INCF	r0x05, W
000d9a   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00152_DS_:
                                           ;	.line	93; src/clock.c	DelayMs(10);
000d9c   0e68     movlw	0x68               	MOVLW	0x68
000d9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000da0   0e42     movlw	0x42               	MOVLW	0x42
000da2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000da4   6a05     clrf	0x5, 0              	CLRF	r0x05
000da6   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00137_DS_:
000da8   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
000daa   f009
000dac   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
000dae   f00a
000db0   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
000db2   f00b
000db4   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
000db6   f00c
000db8   0eff     movlw	0xff               	MOVLW	0xff
000dba   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000dbc   0eff     movlw	0xff               	MOVLW	0xff
000dbe   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000dc0   0eff     movlw	0xff               	MOVLW	0xff
000dc2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000dc4   0eff     movlw	0xff               	MOVLW	0xff
000dc6   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000dc8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000dca   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
000dcc   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
000dce   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
000dd0   e1eb     bnz	0xda8                	BNZ	_00137_DS_
                                           ;	.line	94; src/clock.c	if(read_and_clear(&but2_pressed)){
000dd2   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000dd4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dd6   0e56     movlw	0x56               	MOVLW	LOW(_but2_pressed)
000dd8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dda   0e80     movlw	0x80               	MOVLW	0x80
000ddc   6e05     movwf	0x5, 0             	MOVWF	r0x05
000dde   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dea   ec8f     call	0x2b1e, 0           	CALL	_read_and_clear
000dec   f015
000dee   6e03     movwf	0x3, 0             	MOVWF	r0x03
000df0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000df2   f004
000df4   0e03     movlw	0x3                	MOVLW	0x03
000df6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000df8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dfa   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000dfc   e006     bz	0xe0a                 	BZ	_00144_DS_
                                           ;	.line	95; src/clock.c	LCDErase();
000dfe   ecbd     call	0x277a, 0           	CALL	_LCDErase
000e00   f013
                                           ;	.line	96; src/clock.c	return value;
000e02   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
000e04   fff3
000e06   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e08   d043     bra	0xe90                	BRA	_00150_DS_
                                           _00144_DS_:
                                           ;	.line	98; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000e0a   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000e0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e0e   0e54     movlw	0x54               	MOVLW	LOW(_but1_pressed)
000e10   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e12   0e80     movlw	0x80               	MOVLW	0x80
000e14   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e22   ec8f     call	0x2b1e, 0           	CALL	_read_and_clear
000e24   f015
000e26   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e28   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e2a   f004
000e2c   0e03     movlw	0x3                	MOVLW	0x03
000e2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e30   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e32   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000e34   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e36   d7b2     bra	0xd9c                	BRA	_00152_DS_
                                           ;	.line	99; src/clock.c	value = (++value)%maxvalue;
000e38   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000e3a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e3c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
000e3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e42   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e46   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4e   ecd8     call	0x1fb0, 0           	CALL	__modsint
000e50   f00f
000e52   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e54   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
000e56   f007
000e58   0e04     movlw	0x4                	MOVLW	0x04
000e5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	100; src/clock.c	display_string(length + 1, to_double_digits(value));
000e5c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e60   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e64   ec05     call	0x2a0a, 0           	CALL	_to_double_digits
000e66   f015
000e68   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e6a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e6c   f004
000e6e   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
000e70   f005
000e72   0e02     movlw	0x2                	MOVLW	0x02
000e74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e76   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e86   eceb     call	0x19d6, 0           	CALL	_display_string
000e88   f00c
000e8a   0e04     movlw	0x4                	MOVLW	0x04
000e8c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e8e   d786     bra	0xd9c                	BRA	_00152_DS_
                                           _00150_DS_:
000e90   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000e92   f00c
000e94   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000e96   f00b
000e98   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e9a   f00a
000e9c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e9e   f009
000ea0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ea2   f008
000ea4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ea6   f007
000ea8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000eaa   f006
000eac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000eae   f005
000eb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000eb2   f004
000eb4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000eb6   f003
000eb8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000eba   f002
000ebc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ebe   f001
000ec0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ec2   f000
000ec4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ec6   ffd9
000ec8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	80; src/clock.c	int read_and_clear(int *variable){
002b1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b20   ffe5
002b22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b24   ffd9
002b26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b28   ffe5
002b2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b2c   ffe5
002b2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b30   ffe5
002b32   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b34   ffe5
002b36   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b38   ffe5
002b3a   0e02     movlw	0x2                	MOVLW	0x02
002b3c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b3e   f000
002b40   0e03     movlw	0x3                	MOVLW	0x03
002b42   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b44   f001
002b46   0e04     movlw	0x4                	MOVLW	0x04
002b48   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002b4a   f002
                                           ;	.line	81; src/clock.c	if(*variable){
002b4c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002b4e   ffe9
002b50   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002b52   fff3
002b54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b56   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
002b58   f017
002b5a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b5c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002b5e   f004
002b60   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b62   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002b64   e00e     bz	0x2b82                	BZ	_00131_DS_
                                           ;	.line	82; src/clock.c	*variable = 0;
002b66   0e00     movlw	0                  	MOVLW	0x00
002b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b6a   0e00     movlw	0                  	MOVLW	0x00
002b6c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002b6e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002b70   ffe9
002b72   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002b74   fff3
002b76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b78   ecac     call	0x2f58, 0           	CALL	__gptrput2
002b7a   f017
                                           ;	.line	83; src/clock.c	return 1;
002b7c   6af3     clrf	0xf3, 0             	CLRF	PRODL
002b7e   0e01     movlw	0x1                	MOVLW	0x01
002b80   d002     bra	0x2b86               	BRA	_00132_DS_
                                           _00131_DS_:
                                           ;	.line	85; src/clock.c	return 0;
002b82   6af3     clrf	0xf3, 0             	CLRF	PRODL
002b84   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00132_DS_:
002b86   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002b88   f004
002b8a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b8c   f003
002b8e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b90   f002
002b92   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b94   f001
002b96   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b98   f000
002b9a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b9c   ffd9
002b9e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_clock	code
                                           _init_clock:
                                           ;	.line	70; src/clock.c	void init_clock(time t){
001be4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001be6   ffe5
001be8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bea   ffd9
001bec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bee   ffe5
001bf0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bf2   ffe5
001bf4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bf6   ffe5
001bf8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bfa   ffe5
001bfc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bfe   ffe5
001c00   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001c02   ffe5
001c04   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001c06   ffe5
001c08   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001c0a   ffe5
001c0c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001c0e   ffe5
001c10   0e02     movlw	0x2                	MOVLW	0x02
001c12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001c14   f000
001c16   0e03     movlw	0x3                	MOVLW	0x03
001c18   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001c1a   f001
001c1c   0e04     movlw	0x4                	MOVLW	0x04
001c1e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001c20   f002
                                           ;	.line	72; src/clock.c	h = get_input(24, "HOURS:");
001c22   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c26   0e29     movlw	0x29               	MOVLW	HIGH(__str_0)
001c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2a   0e50     movlw	0x50               	MOVLW	LOW(__str_0)
001c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2e   0e00     movlw	0                  	MOVLW	0x00
001c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c32   0e18     movlw	0x18               	MOVLW	0x18
001c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c36   ec84     call	0xd08, 0            	CALL	_get_input
001c38   f006
001c3a   6e03     movwf	0x3, 0             	MOVWF	r0x03
001c3c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001c3e   f004
001c40   0e05     movlw	0x5                	MOVLW	0x05
001c42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	73; src/clock.c	m = get_input(60, "MINUTES:");
001c44   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001c46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c48   0e29     movlw	0x29               	MOVLW	HIGH(__str_1)
001c4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4c   0e58     movlw	0x58               	MOVLW	LOW(__str_1)
001c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c50   0e00     movlw	0                  	MOVLW	0x00
001c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c54   0e3c     movlw	0x3c               	MOVLW	0x3c
001c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c58   ec84     call	0xd08, 0            	CALL	_get_input
001c5a   f006
001c5c   6e05     movwf	0x5, 0             	MOVWF	r0x05
001c5e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001c60   f006
001c62   0e05     movlw	0x5                	MOVLW	0x05
001c64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	74; src/clock.c	s = get_input(60, "SECONDS:");
001c66   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6a   0e29     movlw	0x29               	MOVLW	HIGH(__str_2)
001c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6e   0e62     movlw	0x62               	MOVLW	LOW(__str_2)
001c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c72   0e00     movlw	0                  	MOVLW	0x00
001c74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c76   0e3c     movlw	0x3c               	MOVLW	0x3c
001c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7a   ec84     call	0xd08, 0            	CALL	_get_input
001c7c   f006
001c7e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001c80   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
001c82   f008
001c84   0e05     movlw	0x5                	MOVLW	0x05
001c86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	75; src/clock.c	time_set(t,h,m,s);
001c88   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c90   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c94   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c98   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c9c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cac   ec4a     call	0x2094, 0           	CALL	_time_set
001cae   f010
001cb0   0e09     movlw	0x9                	MOVLW	0x09
001cb2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	77; src/clock.c	T0CONbits.TMR0ON = 1;
001cb4   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001cb6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001cb8   f008
001cba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001cbc   f007
001cbe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001cc0   f006
001cc2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001cc4   f005
001cc6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001cc8   f004
001cca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ccc   f003
001cce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001cd0   f002
001cd2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001cd4   f001
001cd6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cd8   f000
001cda   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cdc   ffd9
001cde   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	65; src/clock.c	void alarm_led(void){
002d7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d7c   ffe5
002d7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d80   ffd9
002d82   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d84   ffe5
                                           ;	.line	66; src/clock.c	LED1_IO^=1;
002d86   6a00     clrf	0, 0                	CLRF	r0x00
002d88   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
002d8a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002d8c   0e01     movlw	0x1                	MOVLW	0x01
002d8e   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002d90   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d92   0b01     andlw	0x1                	ANDLW	0x01
002d94   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d96   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002d98   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002d9a   0bfd     andlw	0xfd               	ANDLW	0xfd
002d9c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002d9e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	67; src/clock.c	LED2_IO^=1;
002da0   6a00     clrf	0, 0                	CLRF	r0x00
002da2   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
002da4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002da6   0e01     movlw	0x1                	MOVLW	0x01
002da8   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002daa   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dac   0b01     andlw	0x1                	ANDLW	0x01
002dae   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002db0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002db2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002db4   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002db6   0bfb     andlw	0xfb               	ANDLW	0xfb
002db8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002dba   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002dbc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dbe   f000
002dc0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dc2   ffd9
002dc4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	61; src/clock.c	void toggle_led(void){
002e7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e7c   ffe5
002e7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e80   ffd9
002e82   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e84   ffe5
                                           ;	.line	62; src/clock.c	LED0_IO^=1;
002e86   6a00     clrf	0, 0                	CLRF	r0x00
002e88   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
002e8a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002e8c   0e01     movlw	0x1                	MOVLW	0x01
002e8e   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002e90   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e92   0b01     andlw	0x1                	ANDLW	0x01
002e94   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002e96   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002e98   0bfe     andlw	0xfe               	ANDLW	0xfe
002e9a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002e9c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002e9e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ea0   f000
002ea2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ea4   ffd9
002ea6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	56; src/clock.c	void update_display(void){
0028d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028d6   ffe5
0028d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028da   ffd9
0028dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028de   ffe5
0028e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028e2   ffe5
0028e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028e6   ffe5
                                           ;	.line	57; src/clock.c	time_print(_time, display_line);
0028e8   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
0028ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
0028ec   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
0028ee   6e00     movwf	0, 0               	MOVWF	r0x00
0028f0   0e80     movlw	0x80               	MOVLW	0x80
0028f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0028f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002900   010f     movlb	0xf                	BANKSEL	(__time + 2)
002902   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
002904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002906   010f     movlb	0xf                	BANKSEL	(__time + 1)
002908   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
00290a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00290c   010f     movlb	0xf                	BANKSEL	__time
00290e   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
002910   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002912   eccd     call	0x179a, 0           	CALL	_time_print
002914   f00b
002916   0e06     movlw	0x6                	MOVLW	0x06
002918   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	58; src/clock.c	display_string(0, display_line);
00291a   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00291c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00291e   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002920   6e00     movwf	0, 0               	MOVWF	r0x00
002922   0e80     movlw	0x80               	MOVLW	0x80
002924   6e02     movwf	0x2, 0             	MOVWF	r0x02
002926   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00292c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002932   0e00     movlw	0                  	MOVLW	0x00
002934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002936   eceb     call	0x19d6, 0           	CALL	_display_string
002938   f00c
00293a   0e04     movlw	0x4                	MOVLW	0x04
00293c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00293e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002940   f002
002942   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002944   f001
002946   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002948   f000
00294a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00294c   ffd9
00294e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002950   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
002952   5255     movf	0x55, 0x1, 0        
002954   3a53     swapf	0x53, 0x1, 0       
002956   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
002958   494d     infsnz	0x4d, 0, 0x1      	DB	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x3a, 0x00
00295a   554e     subfwb	0x4e, 0, 0x1      
00295c   4554     rlncf	0x54, 0, 0x1       
00295e   3a53     swapf	0x53, 0x1, 0       
002960   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
002962   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x3a, 0x00
002964   4f43     dcfsnz	0x43, 0x1, 0x1    
002966   444e     rlncf	0x4e, 0, 0         
002968   3a53     swapf	0x53, 0x1, 0       
00296a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
00296c   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
00296e   6432     cpfsgt	0x32, 0           
002970   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2074 (0x081a) bytes ( 1.58%)
                                           ;           	 1037 (0x040d) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
00277a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00277c   ffe5
00277e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002780   ffd9
002782   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002784   ffe5
002786   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002788   ffe5
00278a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00278c   ffe5
00278e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002790   ffe5
002792   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002794   ffe5
002796   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002798   ffe5
00279a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00279c   ffe5
00279e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0027a0   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
0027a2   0e01     movlw	0x1                	MOVLW	0x01
0027a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a6   0e00     movlw	0                  	MOVLW	0x00
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
0027ac   f016
0027ae   0e02     movlw	0x2                	MOVLW	0x02
0027b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0027b2   0e48     movlw	0x48               	MOVLW	0x48
0027b4   6e00     movwf	0, 0               	MOVWF	r0x00
0027b6   0e0d     movlw	0xd                	MOVLW	0x0d
0027b8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0027bc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0027be   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0027c0   f004
0027c2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027c4   f005
0027c6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027c8   f006
0027ca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027cc   f007
0027ce   0eff     movlw	0xff               	MOVLW	0xff
0027d0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027d2   0eff     movlw	0xff               	MOVLW	0xff
0027d4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0027d6   0eff     movlw	0xff               	MOVLW	0xff
0027d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027da   0eff     movlw	0xff               	MOVLW	0xff
0027dc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0027de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027e0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0027e2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0027e4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0027e6   e1eb     bnz	0x27be               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0027e8   0e00     movlw	0                  	MOVLW	0x00
0027ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ec   0e20     movlw	0x20               	MOVLW	0x20
0027ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f0   0e20     movlw	0x20               	MOVLW	0x20
0027f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0027f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0027fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027fc   ecba     call	0x2174, 0           	CALL	_memset
0027fe   f010
002800   0e05     movlw	0x5                	MOVLW	0x05
002802   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002804   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002806   f007
002808   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00280a   f006
00280c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280e   f005
002810   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002812   f004
002814   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002816   f003
002818   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00281a   f002
00281c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281e   f001
002820   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002822   f000
002824   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002826   ffd9
002828   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000878   f016
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
00093a   f016
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000982   f016
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000a44   f016
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ecba     call	0x2174, 0           	CALL	_memset
000aee   f010
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000bd6   f016
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000c1a   f016
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000c5e   f016
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ec8c     call	0x2d18, 0           	CALL	_LCDWrite
000ca2   f016
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002d18   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d1a   ffe5
002d1c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d1e   ffd9
002d20   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d22   ffe5
002d24   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d26   ffe5
002d28   0e02     movlw	0x2                	MOVLW	0x02
002d2a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d2c   f000
002d2e   0e03     movlw	0x3                	MOVLW	0x03
002d30   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d32   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002d34   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002d36   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002d38   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002d3a   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002d3c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d3e   0b01     andlw	0x1                	ANDLW	0x01
002d40   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d42   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d44   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002d46   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002d48   0bfb     andlw	0xfb               	ANDLW	0xfb
002d4a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002d4c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002d4e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002d50   ff8d
002d52   0000     nop                      	nop 
002d54   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002d56   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002d58   0000     nop                      	nop 
002d5a   0000     nop                      	nop 
002d5c   0000     nop                      	nop 
002d5e   0000     nop                      	nop 
002d60   0000     nop                      	nop 
002d62   0000     nop                      	nop 
002d64   0000     nop                      	nop 
002d66   0000     nop                      	nop 
002d68   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002d6a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002d6c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d6e   f001
002d70   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d72   f000
002d74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d76   ffd9
002d78   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
00138e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001390   ffe5
001392   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001394   ffd9
001396   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001398   ffe5
00139a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00139c   ffe5
00139e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0013a0   ffe5
0013a2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0013a4   ffe5
0013a6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0013a8   ffe5
0013aa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0013ac   ffe5
0013ae   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0013b0   ffe5
0013b2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0013b4   ffe5
0013b6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0013b8   ffe5
0013ba   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0013bc   ffe5
0013be   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0013c0   ffe5
0013c2   0e02     movlw	0x2                	MOVLW	0x02
0013c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0013c6   f000
0013c8   0e03     movlw	0x3                	MOVLW	0x03
0013ca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0013cc   f001
0013ce   0e04     movlw	0x4                	MOVLW	0x04
0013d0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0013d2   f002
0013d4   0e05     movlw	0x5                	MOVLW	0x05
0013d6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0013d8   f003
0013da   0e06     movlw	0x6                	MOVLW	0x06
0013dc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0013de   f004
0013e0   0e07     movlw	0x7                	MOVLW	0x07
0013e2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0013e4   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
0013e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013e8   0f04     addlw	0x4                	ADDLW	0x04
0013ea   6e06     movwf	0x6, 0             	MOVWF	r0x06
0013ec   0e00     movlw	0                  	MOVLW	0x00
0013ee   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0013f0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013f2   0e00     movlw	0                  	MOVLW	0x00
0013f4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0013f6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0013f8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0013fa   ffe9
0013fc   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0013fe   fff3
001400   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001402   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
001404   f017
001406   6e06     movwf	0x6, 0             	MOVWF	r0x06
001408   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00140a   f007
00140c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00140e   0f04     addlw	0x4                	ADDLW	0x04
001410   6e08     movwf	0x8, 0             	MOVWF	r0x08
001412   0e00     movlw	0                  	MOVLW	0x00
001414   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001416   6e09     movwf	0x9, 0             	MOVWF	r0x09
001418   0e00     movlw	0                  	MOVLW	0x00
00141a   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00141c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00141e   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001420   ffe9
001422   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001424   fff3
001426   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001428   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
00142a   f017
00142c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00142e   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001430   f009
001432   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001434   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001436   e103     bnz	0x143e               	BNZ	_00166_DS_
001438   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00143a   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00143c   e003     bz	0x1444                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
00143e   6af3     clrf	0xf3, 0             	CLRF	PRODL
001440   6ae8     clrf	0xe8, 0             	CLRF	WREG
001442   d04e     bra	0x14e0               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
001444   5000     movf	0, 0, 0             	MOVF	r0x00, W
001446   0f02     addlw	0x2                	ADDLW	0x02
001448   6e06     movwf	0x6, 0             	MOVWF	r0x06
00144a   0e00     movlw	0                  	MOVLW	0x00
00144c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00144e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001450   0e00     movlw	0                  	MOVLW	0x00
001452   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001454   6e08     movwf	0x8, 0             	MOVWF	r0x08
001456   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001458   ffe9
00145a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00145c   fff3
00145e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001460   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
001462   f017
001464   6e06     movwf	0x6, 0             	MOVWF	r0x06
001466   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001468   f007
00146a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00146c   0f02     addlw	0x2                	ADDLW	0x02
00146e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001470   0e00     movlw	0                  	MOVLW	0x00
001472   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001474   6e09     movwf	0x9, 0             	MOVWF	r0x09
001476   0e00     movlw	0                  	MOVLW	0x00
001478   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00147a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00147c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00147e   ffe9
001480   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001482   fff3
001484   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001486   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
001488   f017
00148a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00148c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00148e   f009
001490   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001492   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001494   e103     bnz	0x149c               	BNZ	_00168_DS_
001496   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001498   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00149a   e003     bz	0x14a2                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
00149c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00149e   6ae8     clrf	0xe8, 0             	CLRF	WREG
0014a0   d01f     bra	0x14e0               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
0014a2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0014a4   ffe9
0014a6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0014a8   fff3
0014aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0014ac   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
0014ae   f017
0014b0   6e00     movwf	0, 0               	MOVWF	r0x00
0014b2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0014b4   f001
0014b6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0014b8   ffe9
0014ba   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0014bc   fff3
0014be   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0014c0   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
0014c2   f017
0014c4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0014c6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0014c8   f004
0014ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014cc   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0014ce   e103     bnz	0x14d6               	BNZ	_00170_DS_
0014d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014d2   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
0014d4   e003     bz	0x14dc                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
0014d6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0014d8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0014da   d002     bra	0x14e0               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
0014dc   6af3     clrf	0xf3, 0             	CLRF	PRODL
0014de   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0014e0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0014e2   f00a
0014e4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0014e6   f009
0014e8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0014ea   f008
0014ec   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0014ee   f007
0014f0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0014f2   f006
0014f4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0014f6   f005
0014f8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0014fa   f004
0014fc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0014fe   f003
001500   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001502   f002
001504   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001506   f001
001508   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00150a   f000
00150c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00150e   ffd9
001510   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
00179a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00179c   ffe5
00179e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0017a0   ffd9
0017a2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0017a4   ffe5
0017a6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0017a8   ffe5
0017aa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0017ac   ffe5
0017ae   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0017b0   ffe5
0017b2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0017b4   ffe5
0017b6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0017b8   ffe5
0017ba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0017bc   ffe5
0017be   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017c0   ffe5
0017c2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0017c4   ffe5
0017c6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0017c8   ffe5
0017ca   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0017cc   ffe5
0017ce   0e02     movlw	0x2                	MOVLW	0x02
0017d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017d2   f000
0017d4   0e03     movlw	0x3                	MOVLW	0x03
0017d6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017d8   f001
0017da   0e04     movlw	0x4                	MOVLW	0x04
0017dc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017de   f002
0017e0   0e05     movlw	0x5                	MOVLW	0x05
0017e2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0017e4   f003
0017e6   0e06     movlw	0x6                	MOVLW	0x06
0017e8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0017ea   f004
0017ec   0e07     movlw	0x7                	MOVLW	0x07
0017ee   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0017f0   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
0017f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017f4   0f04     addlw	0x4                	ADDLW	0x04
0017f6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0017f8   0e00     movlw	0                  	MOVLW	0x00
0017fa   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0017fc   6e07     movwf	0x7, 0             	MOVWF	r0x07
0017fe   0e00     movlw	0                  	MOVLW	0x00
001800   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001802   6e08     movwf	0x8, 0             	MOVWF	r0x08
001804   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001806   ffe9
001808   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00180a   fff3
00180c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00180e   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
001810   f017
001812   6e06     movwf	0x6, 0             	MOVWF	r0x06
001814   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001816   f007
001818   5000     movf	0, 0, 0             	MOVF	r0x00, W
00181a   0f02     addlw	0x2                	ADDLW	0x02
00181c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00181e   0e00     movlw	0                  	MOVLW	0x00
001820   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001822   6e09     movwf	0x9, 0             	MOVWF	r0x09
001824   0e00     movlw	0                  	MOVLW	0x00
001826   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001828   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00182a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00182c   ffe9
00182e   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001830   fff3
001832   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001834   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
001836   f017
001838   6e08     movwf	0x8, 0             	MOVWF	r0x08
00183a   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00183c   f009
00183e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001840   ffe9
001842   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001844   fff3
001846   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001848   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
00184a   f017
00184c   6e00     movwf	0, 0               	MOVWF	r0x00
00184e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001850   f001
001852   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001854   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001856   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00185c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001862   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001864   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001866   5000     movf	0, 0, 0             	MOVF	r0x00, W
001868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00186a   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
00186c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00186e   0e2b     movlw	0x2b               	MOVLW	HIGH(__str_0)
001870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001872   0e0e     movlw	0xe                	MOVLW	LOW(__str_0)
001874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001876   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00187a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00187c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00187e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001882   ec63     call	0x1ec6, 0           	CALL	_sprintf
001884   f00f
001886   0e0c     movlw	0xc                	MOVLW	0x0c
001888   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00188a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00188c   f00a
00188e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001890   f009
001892   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001894   f008
001896   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001898   f007
00189a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00189c   f006
00189e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0018a0   f005
0018a2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0018a4   f004
0018a6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0018a8   f003
0018aa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018ac   f002
0018ae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018b0   f001
0018b2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018b4   f000
0018b6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018b8   ffd9
0018ba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002c20   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c22   ffe5
002c24   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c26   ffd9
002c28   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c2a   ffe5
002c2c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c2e   ffe5
002c30   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002c32   ffe5
002c34   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002c36   ffe5
002c38   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002c3a   ffe5
002c3c   0e02     movlw	0x2                	MOVLW	0x02
002c3e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c40   f000
002c42   0e03     movlw	0x3                	MOVLW	0x03
002c44   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c46   f001
002c48   0e04     movlw	0x4                	MOVLW	0x04
002c4a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002c4c   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002c4e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002c50   ffe9
002c52   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002c54   fff3
002c56   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c58   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
002c5a   f017
002c5c   6e03     movwf	0x3, 0             	MOVWF	r0x03
002c5e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002c60   f004
002c62   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002c64   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c66   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002c68   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c6c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c70   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c74   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c78   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c7c   ec4b     call	0x2496, 0           	CALL	_set_hours
002c7e   f012
002c80   0e05     movlw	0x5                	MOVLW	0x05
002c82   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c84   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c86   f004
002c88   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c8a   f003
002c8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c8e   f002
002c90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c92   f001
002c94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c96   f000
002c98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c9a   ffd9
002c9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
002552   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002554   ffe5
002556   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002558   ffd9
00255a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00255c   ffe5
00255e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002560   ffe5
002562   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002564   ffe5
002566   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002568   ffe5
00256a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00256c   ffe5
00256e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002570   ffe5
002572   0e02     movlw	0x2                	MOVLW	0x02
002574   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002576   f000
002578   0e03     movlw	0x3                	MOVLW	0x03
00257a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00257c   f001
00257e   0e04     movlw	0x4                	MOVLW	0x04
002580   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002582   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002584   5000     movf	0, 0, 0             	MOVF	r0x00, W
002586   0f02     addlw	0x2                	ADDLW	0x02
002588   6e03     movwf	0x3, 0             	MOVWF	r0x03
00258a   0e00     movlw	0                  	MOVLW	0x00
00258c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00258e   6e04     movwf	0x4, 0             	MOVWF	r0x04
002590   0e00     movlw	0                  	MOVLW	0x00
002592   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002594   6e05     movwf	0x5, 0             	MOVWF	r0x05
002596   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002598   ffe9
00259a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00259c   fff3
00259e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0025a0   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
0025a2   f017
0025a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025a6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025a8   f004
0025aa   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0025ac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0025ae   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0025b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c4   ec83     call	0x2306, 0           	CALL	_set_minutes
0025c6   f011
0025c8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025ca   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025cc   f004
0025ce   0e05     movlw	0x5                	MOVLW	0x05
0025d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025d4   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0025d6   e00a     bz	0x25ec                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0025d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e4   ec10     call	0x2c20, 0           	CALL	_add_hour
0025e6   f016
0025e8   0e03     movlw	0x3                	MOVLW	0x03
0025ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0025ec   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0025ee   f005
0025f0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0025f2   f004
0025f4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0025f6   f003
0025f8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0025fa   f002
0025fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025fe   f001
002600   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002602   f000
002604   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002606   ffd9
002608   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
00260a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00260c   ffe5
00260e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002610   ffd9
002612   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002614   ffe5
002616   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002618   ffe5
00261a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00261c   ffe5
00261e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002620   ffe5
002622   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002624   ffe5
002626   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002628   ffe5
00262a   0e02     movlw	0x2                	MOVLW	0x02
00262c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00262e   f000
002630   0e03     movlw	0x3                	MOVLW	0x03
002632   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002634   f001
002636   0e04     movlw	0x4                	MOVLW	0x04
002638   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00263a   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
00263c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00263e   0f04     addlw	0x4                	ADDLW	0x04
002640   6e03     movwf	0x3, 0             	MOVWF	r0x03
002642   0e00     movlw	0                  	MOVLW	0x00
002644   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002646   6e04     movwf	0x4, 0             	MOVWF	r0x04
002648   0e00     movlw	0                  	MOVLW	0x00
00264a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00264c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00264e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002650   ffe9
002652   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002654   fff3
002656   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002658   ec6b     call	0x2ed6, 0           	CALL	__gptrget2
00265a   f017
00265c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00265e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002660   f004
002662   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002664   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002666   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002668   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00266a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00266e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002670   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002672   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002674   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002676   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002678   5000     movf	0, 0, 0             	MOVF	r0x00, W
00267a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267c   ec1f     call	0x223e, 0           	CALL	_set_seconds
00267e   f011
002680   6e03     movwf	0x3, 0             	MOVWF	r0x03
002682   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002684   f004
002686   0e05     movlw	0x5                	MOVLW	0x05
002688   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00268a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00268c   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
00268e   e00a     bz	0x26a4                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002690   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002694   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002698   5000     movf	0, 0, 0             	MOVF	r0x00, W
00269a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00269c   eca9     call	0x2552, 0           	CALL	_add_minute
00269e   f012
0026a0   0e03     movlw	0x3                	MOVLW	0x03
0026a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
0026a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026a6   f005
0026a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026aa   f004
0026ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026ae   f003
0026b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026b2   f002
0026b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026b6   f001
0026b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026ba   f000
0026bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026be   ffd9
0026c0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
00223e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002240   ffe5
002242   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002244   ffd9
002246   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002248   ffe5
00224a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00224c   ffe5
00224e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002250   ffe5
002252   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002254   ffe5
002256   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002258   ffe5
00225a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00225c   ffe5
00225e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002260   ffe5
002262   0e02     movlw	0x2                	MOVLW	0x02
002264   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002266   f000
002268   0e03     movlw	0x3                	MOVLW	0x03
00226a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226c   f001
00226e   0e04     movlw	0x4                	MOVLW	0x04
002270   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002272   f002
002274   0e05     movlw	0x5                	MOVLW	0x05
002276   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002278   f003
00227a   0e06     movlw	0x6                	MOVLW	0x06
00227c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00227e   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
002280   0e00     movlw	0                  	MOVLW	0x00
002282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002284   0e3c     movlw	0x3c               	MOVLW	0x3c
002286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002288   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00228a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00228c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00228e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002290   ec70     call	0x1ce0, 0           	CALL	__divsint
002292   f00e
002294   6e05     movwf	0x5, 0             	MOVWF	r0x05
002296   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002298   f006
00229a   0e04     movlw	0x4                	MOVLW	0x04
00229c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
00229e   0e04     movlw	0x4                	MOVLW	0x04
0022a0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0022a2   0e00     movlw	0                  	MOVLW	0x00
0022a4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022a6   0e00     movlw	0                  	MOVLW	0x00
0022a8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022aa   0e00     movlw	0                  	MOVLW	0x00
0022ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ae   0e3c     movlw	0x3c               	MOVLW	0x3c
0022b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ba   ecd8     call	0x1fb0, 0           	CALL	__modsint
0022bc   f00f
0022be   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022c0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0022c2   f004
0022c4   0e04     movlw	0x4                	MOVLW	0x04
0022c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0022c8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0022ca   ffe5
0022cc   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0022ce   fff4
0022d0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0022d2   ffe9
0022d4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022d6   fff3
0022d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022da   ecac     call	0x2f58, 0           	CALL	__gptrput2
0022dc   f017
                                           ;	.line	42; src/newtime.c	return overflow;
0022de   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0022e0   fff3
0022e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0022e4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0022e6   f006
0022e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0022ea   f005
0022ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0022ee   f004
0022f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0022f2   f003
0022f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0022f6   f002
0022f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0022fa   f001
0022fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0022fe   f000
002300   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002302   ffd9
002304   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
002306   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002308   ffe5
00230a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00230c   ffd9
00230e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002310   ffe5
002312   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002314   ffe5
002316   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002318   ffe5
00231a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00231c   ffe5
00231e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002320   ffe5
002322   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002324   ffe5
002326   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002328   ffe5
00232a   0e02     movlw	0x2                	MOVLW	0x02
00232c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00232e   f000
002330   0e03     movlw	0x3                	MOVLW	0x03
002332   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002334   f001
002336   0e04     movlw	0x4                	MOVLW	0x04
002338   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00233a   f002
00233c   0e05     movlw	0x5                	MOVLW	0x05
00233e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002340   f003
002342   0e06     movlw	0x6                	MOVLW	0x06
002344   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002346   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
002348   0e00     movlw	0                  	MOVLW	0x00
00234a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234c   0e3c     movlw	0x3c               	MOVLW	0x3c
00234e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002350   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002352   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002354   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002356   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002358   ec70     call	0x1ce0, 0           	CALL	__divsint
00235a   f00e
00235c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00235e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002360   f006
002362   0e04     movlw	0x4                	MOVLW	0x04
002364   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002366   0e02     movlw	0x2                	MOVLW	0x02
002368   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00236a   0e00     movlw	0                  	MOVLW	0x00
00236c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00236e   0e00     movlw	0                  	MOVLW	0x00
002370   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002372   0e00     movlw	0                  	MOVLW	0x00
002374   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002376   0e3c     movlw	0x3c               	MOVLW	0x3c
002378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00237a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00237c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00237e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002380   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002382   ecd8     call	0x1fb0, 0           	CALL	__modsint
002384   f00f
002386   6e03     movwf	0x3, 0             	MOVWF	r0x03
002388   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00238a   f004
00238c   0e04     movlw	0x4                	MOVLW	0x04
00238e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002390   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002392   ffe5
002394   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002396   fff4
002398   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00239a   ffe9
00239c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00239e   fff3
0023a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023a2   ecac     call	0x2f58, 0           	CALL	__gptrput2
0023a4   f017
                                           ;	.line	36; src/newtime.c	return overflow;
0023a6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0023a8   fff3
0023aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023ac   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0023ae   f006
0023b0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0023b2   f005
0023b4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023b6   f004
0023b8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023ba   f003
0023bc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023be   f002
0023c0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023c2   f001
0023c4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0023c6   f000
0023c8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0023ca   ffd9
0023cc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002496   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002498   ffe5
00249a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00249c   ffd9
00249e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024a0   ffe5
0024a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024a4   ffe5
0024a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024a8   ffe5
0024aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024ac   ffe5
0024ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024b0   ffe5
0024b2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024b4   ffe5
0024b6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024b8   ffe5
0024ba   0e02     movlw	0x2                	MOVLW	0x02
0024bc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024be   f000
0024c0   0e03     movlw	0x3                	MOVLW	0x03
0024c2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024c4   f001
0024c6   0e04     movlw	0x4                	MOVLW	0x04
0024c8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024ca   f002
0024cc   0e05     movlw	0x5                	MOVLW	0x05
0024ce   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024d0   f003
0024d2   0e06     movlw	0x6                	MOVLW	0x06
0024d4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024d6   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0024d8   0e00     movlw	0                  	MOVLW	0x00
0024da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024dc   0e18     movlw	0x18               	MOVLW	0x18
0024de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e8   ec70     call	0x1ce0, 0           	CALL	__divsint
0024ea   f00e
0024ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0024ee   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0024f0   f006
0024f2   0e04     movlw	0x4                	MOVLW	0x04
0024f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0024f6   0e00     movlw	0                  	MOVLW	0x00
0024f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fa   0e18     movlw	0x18               	MOVLW	0x18
0024fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002502   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002506   ecd8     call	0x1fb0, 0           	CALL	__modsint
002508   f00f
00250a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00250c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00250e   f004
002510   0e04     movlw	0x4                	MOVLW	0x04
002512   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002514   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002516   ffe5
002518   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00251a   fff4
00251c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00251e   ffe9
002520   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002522   fff3
002524   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002526   ecac     call	0x2f58, 0           	CALL	__gptrput2
002528   f017
                                           ;	.line	30; src/newtime.c	return overflow;
00252a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00252c   fff3
00252e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002530   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002532   f006
002534   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002536   f005
002538   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00253a   f004
00253c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00253e   f003
002540   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002542   f002
002544   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002546   f001
002548   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00254a   f000
00254c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00254e   ffd9
002550   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002094   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002096   ffe5
002098   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00209a   ffd9
00209c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00209e   ffe5
0020a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020a2   ffe5
0020a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0020a6   ffe5
0020a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020aa   ffe5
0020ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0020ae   ffe5
0020b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0020b2   ffe5
0020b4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0020b6   ffe5
0020b8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0020ba   ffe5
0020bc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0020be   ffe5
0020c0   0e02     movlw	0x2                	MOVLW	0x02
0020c2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0020c4   f000
0020c6   0e03     movlw	0x3                	MOVLW	0x03
0020c8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0020ca   f001
0020cc   0e04     movlw	0x4                	MOVLW	0x04
0020ce   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0020d0   f002
0020d2   0e05     movlw	0x5                	MOVLW	0x05
0020d4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0020d6   f003
0020d8   0e06     movlw	0x6                	MOVLW	0x06
0020da   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0020dc   f004
0020de   0e07     movlw	0x7                	MOVLW	0x07
0020e0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0020e2   f005
0020e4   0e08     movlw	0x8                	MOVLW	0x08
0020e6   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0020e8   f006
0020ea   0e09     movlw	0x9                	MOVLW	0x09
0020ec   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0020ee   f007
0020f0   0e0a     movlw	0xa                	MOVLW	0x0a
0020f2   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0020f4   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0020f6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002102   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002106   5000     movf	0, 0, 0             	MOVF	r0x00, W
002108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00210a   ec4b     call	0x2496, 0           	CALL	_set_hours
00210c   f012
00210e   0e05     movlw	0x5                	MOVLW	0x05
002110   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002112   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002116   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00211c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002122   5000     movf	0, 0, 0             	MOVF	r0x00, W
002124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002126   ec83     call	0x2306, 0           	CALL	_set_minutes
002128   f011
00212a   0e05     movlw	0x5                	MOVLW	0x05
00212c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
00212e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002132   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002136   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00213c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002142   ec1f     call	0x223e, 0           	CALL	_set_seconds
002144   f011
002146   0e05     movlw	0x5                	MOVLW	0x05
002148   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00214a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00214c   f008
00214e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002150   f007
002152   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002154   f006
002156   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002158   f005
00215a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00215c   f004
00215e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002160   f003
002162   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002164   f002
002166   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002168   f001
00216a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00216c   f000
00216e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002170   ffd9
002172   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002a96   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a98   ffe5
002a9a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a9c   ffd9
002a9e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002aa0   ffe5
002aa2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002aa4   ffe5
002aa6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002aa8   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002aaa   0e06     movlw	0x6                	MOVLW	0x06
002aac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aae   ec04     call	0x1208, 0           	CALL	_malloc
002ab0   f009
002ab2   6e00     movwf	0, 0               	MOVWF	r0x00
002ab4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002ab6   f001
002ab8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002aba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002abc   6e01     movwf	0x1, 0             	MOVWF	r0x01
002abe   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ac0   6e00     movwf	0, 0               	MOVWF	r0x00
002ac2   0e80     movlw	0x80               	MOVLW	0x80
002ac4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002ac6   0e00     movlw	0                  	MOVLW	0x00
002ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aca   0e00     movlw	0                  	MOVLW	0x00
002acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ace   0e00     movlw	0                  	MOVLW	0x00
002ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad2   0e00     movlw	0                  	MOVLW	0x00
002ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad6   0e00     movlw	0                  	MOVLW	0x00
002ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ada   0e00     movlw	0                  	MOVLW	0x00
002adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ade   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae6   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aea   ec4a     call	0x2094, 0           	CALL	_time_set
002aec   f010
002aee   0e09     movlw	0x9                	MOVLW	0x09
002af0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002af2   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002af4   fff4
002af6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002af8   fff3
002afa   5000     movf	0, 0, 0             	MOVF	r0x00, W
002afc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002afe   f002
002b00   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b02   f001
002b04   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b06   f000
002b08   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b0a   ffd9
002b0c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002b0e   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002b10   6432     cpfsgt	0x32, 0           
002b12   253a     addwf	0x3a, 0, 0x1       
002b14   3230     rrcf	0x30, 0x1, 0        
002b16   3a64     swapf	0x64, 0x1, 0       
002b18   3025     rrcf	0x25, 0, 0          
002b1a   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002b1c   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
