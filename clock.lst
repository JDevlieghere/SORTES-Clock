gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2013  12:12:37
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 12:12:37 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _config_mode_clock
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_config
                                           	global _init_time
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_mode_on
                                           	global _main
                                           	global _alarm_led
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           _config_mode_on	db	0x01, 0x00
                                           _config_mode_clock	db	0x01, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef60     goto	0x12c0              	GOTO	_highPriorityInterruptHandler
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	59; src/clock.c	_time = time_create();
0030d6   ecb6     call	0x2d6c, 0           	CALL	_time_create
0030d8   f016
0030da   010f     movlb	0xf                	BANKSEL	__time
0030dc   6f5d     movwf	0x5d, 0x1          	MOVWF	__time, B
0030de   cff3     movff	0xff3, 0xf5e       	MOVFF	PRODL, (__time + 1)
0030e0   ff5e
0030e2   cff4     movff	0xff4, 0xf5f       	MOVFF	PRODH, (__time + 2)
0030e4   ff5f
                                           ;	.line	60; src/clock.c	_alarm = time_create();
0030e6   ecb6     call	0x2d6c, 0           	CALL	_time_create
0030e8   f016
0030ea   010e     movlb	0xe                	BANKSEL	__alarm
0030ec   6f40     movwf	0x40, 0x1          	MOVWF	__alarm, B
0030ee   cff3     movff	0xff3, 0xe41       	MOVFF	PRODL, (__alarm + 1)
0030f0   fe41
0030f2   cff4     movff	0xff4, 0xe42       	MOVFF	PRODH, (__alarm + 2)
0030f4   fe42
                                           ;	.line	62; src/clock.c	init();
0030f6   ec31     call	0x3062, 0           	CALL	_init
0030f8   f018
                                           ;	.line	63; src/clock.c	init_config();
0030fa   ec8b     call	0xf16, 0            	CALL	_init_config
0030fc   f007
                                           ;	.line	65; src/clock.c	T0CONbits.TMR0ON = 1;
0030fe   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	66; src/clock.c	update_display();
003100   ecad     call	0x1f5a, 0           	CALL	_update_display
003102   f00f
                                           ;	.line	67; src/clock.c	return 0;
003104   6af3     clrf	0xf3, 0             	CLRF	PRODL
003106   6ae8     clrf	0xe8, 0             	CLRF	WREG
003108   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	224; src/clock.c	void init(void){
003062   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003064   ffe5
003066   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003068   ffd9
                                           ;	.line	226; src/clock.c	LCDInit();
00306a   ec56     call	0xaac, 0            	CALL	_LCDInit
00306c   f005
                                           ;	.line	229; src/clock.c	BUTTON0_TRIS = 1;
00306e   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	230; src/clock.c	BUTTON1_TRIS = 1;
003070   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	233; src/clock.c	INTCONbits.GIE = 1;
003072   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	234; src/clock.c	INTCONbits.PEIE = 1;
003074   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	235; src/clock.c	RCONbits.IPEN = 1; 
003076   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	238; src/clock.c	T0CONbits.TMR0ON = 0;
003078   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	241; src/clock.c	TMR0H = 0x00000000;
00307a   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	242; src/clock.c	TMR0L = 0x00000000;
00307c   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	245; src/clock.c	T0CONbits.T08BIT = 0;
00307e   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	248; src/clock.c	T0CONbits.T0CS = 0;
003080   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	251; src/clock.c	T0CONbits.PSA = 1;
003082   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	254; src/clock.c	INTCONbits.TMR0IE = 1;
003084   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	257; src/clock.c	INTCON3bits.INT1IE = 1;
003086   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	258; src/clock.c	INTCON3bits.INT3IE = 1;
003088   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	261; src/clock.c	LED0_TRIS = 0;
00308a   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	262; src/clock.c	LED1_TRIS = 0;   
00308c   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	263; src/clock.c	LED2_TRIS = 0;
00308e   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	264; src/clock.c	LED3_TRIS = 0;
003090   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	267; src/clock.c	LED0_IO = 0; 
003092   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	268; src/clock.c	LED1_IO = 0;
003094   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	269; src/clock.c	LED2_IO = 0;
003096   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	270; src/clock.c	LED3_IO = 1;
003098   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
00309a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00309c   ffd9
00309e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	186; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
0012c0   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0012c2   ffe5
0012c4   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0012c6   ffe5
0012c8   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0012ca   ffe5
0012cc   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0012ce   ffe5
0012d0   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0012d2   ffe5
0012d4   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0012d6   ffe5
0012d8   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0012da   ffe5
0012dc   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0012de   ffe5
0012e0   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0012e2   ffe5
0012e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0012e6   ffe5
0012e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0012ea   ffd9
0012ec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0012ee   ffe5
0012f0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0012f2   ffe5
                                           ;	.line	187; src/clock.c	if(INTCON3bits.INT1F == 1){
0012f4   6a00     clrf	0, 0                	CLRF	r0x00
0012f6   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
0012f8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0012fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012fc   0a01     xorlw	0x1                	XORLW	0x01
0012fe   e109     bnz	0x1312               	BNZ	_00216_DS_
                                           ;	.line	188; src/clock.c	but2_pressed = 1;	
001300   0e01     movlw	0x1                	MOVLW	0x01
001302   010f     movlb	0xf                	BANKSEL	_but2_pressed
001304   6f49     movwf	0x49, 0x1          	MOVWF	_but2_pressed, B
001306   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
001308   6b4a     clrf	0x4a, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	189; src/clock.c	if(BUTTON0_IO);
00130a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00130c   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
00130e   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	190; src/clock.c	INTCON3bits.INT1F = 0; 
001310   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00216_DS_:
                                           ;	.line	193; src/clock.c	if(INTCON3bits.INT3F  == 1){
001312   6a00     clrf	0, 0                	CLRF	r0x00
001314   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
001316   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001318   5000     movf	0, 0, 0             	MOVF	r0x00, W
00131a   0a01     xorlw	0x1                	XORLW	0x01
00131c   e109     bnz	0x1330               	BNZ	_00218_DS_
                                           ;	.line	194; src/clock.c	but1_pressed = 1;	
00131e   0e01     movlw	0x1                	MOVLW	0x01
001320   010f     movlb	0xf                	BANKSEL	_but1_pressed
001322   6f47     movwf	0x47, 0x1          	MOVWF	_but1_pressed, B
001324   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
001326   6b48     clrf	0x48, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	195; src/clock.c	if(BUTTON1_IO);
001328   6ae8     clrf	0xe8, 0             	CLRF	WREG
00132a   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
00132c   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	196; src/clock.c	INTCON3bits.INT3F = 0; 
00132e   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00218_DS_:
                                           ;	.line	198; src/clock.c	if(INTCONbits.TMR0IF == 1) {
001330   6a00     clrf	0, 0                	CLRF	r0x00
001332   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
001334   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001336   5000     movf	0, 0, 0             	MOVF	r0x00, W
001338   0a01     xorlw	0x1                	XORLW	0x01
00133a   e001     bz	0x133e                	BZ	_00247_DS_
00133c   d06b     bra	0x1414               	BRA	_00232_DS_
                                           _00247_DS_:
00133e   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	199; src/clock.c	overflow_counter++;
001340   2b45     incf	0x45, 0x1, 0x1      	INCF	_overflow_counter, F, B
001342   e302     bnc	0x1348               	BNC	_10258_DS_
001344   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001346   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10258_DS_:
001348   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	200; src/clock.c	if(overflow_counter == CYCLES/2){
00134a   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
00134c   0a2e     xorlw	0x2e               	XORLW	0x2e
00134e   e103     bnz	0x1356               	BNZ	_00248_DS_
001350   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001352   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
001354   e001     bz	0x1358                	BZ	_00249_DS_
                                           _00248_DS_:
001356   d003     bra	0x135e               	BRA	_00228_DS_
                                           _00249_DS_:
                                           ;	.line	201; src/clock.c	toggle_led();
001358   ec85     call	0x310a, 0           	CALL	_toggle_led
00135a   f018
00135c   d05a     bra	0x1412               	BRA	_00229_DS_
                                           _00228_DS_:
00135e   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	202; src/clock.c	}else if(overflow_counter == CYCLES){
001360   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
001362   0a5d     xorlw	0x5d               	XORLW	0x5d
001364   e103     bnz	0x136c               	BNZ	_00250_DS_
001366   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001368   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
00136a   e001     bz	0x136e                	BZ	_00251_DS_
                                           _00250_DS_:
00136c   d052     bra	0x1412               	BRA	_00229_DS_
                                           _00251_DS_:
00136e   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	203; src/clock.c	if(time_equals(_alarm,_time)){
001370   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
001372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001374   010f     movlb	0xf                	BANKSEL	(__time + 1)
001376   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
001378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00137a   010f     movlb	0xf                	BANKSEL	__time
00137c   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
00137e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001380   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
001382   5142     movf	0x42, 0, 0x1        	MOVF	(__alarm + 2), W, B
001384   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001386   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
001388   5141     movf	0x41, 0, 0x1        	MOVF	(__alarm + 1), W, B
00138a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00138c   010e     movlb	0xe                	BANKSEL	__alarm
00138e   5140     movf	0x40, 0, 0x1        	MOVF	__alarm, W, B
001390   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001392   ece6     call	0x15cc, 0           	CALL	_time_equals
001394   f00a
001396   6e00     movwf	0, 0               	MOVWF	r0x00
001398   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00139a   f001
00139c   0e06     movlw	0x6                	MOVLW	0x06
00139e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0013a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013a2   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0013a4   e005     bz	0x13b0                	BZ	_00220_DS_
                                           ;	.line	204; src/clock.c	alarm_going_off = 1;
0013a6   0e01     movlw	0x1                	MOVLW	0x01
0013a8   010f     movlb	0xf                	BANKSEL	_alarm_going_off
0013aa   6f41     movwf	0x41, 0x1          	MOVWF	_alarm_going_off, B
0013ac   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0013ae   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00220_DS_:
0013b0   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	206; src/clock.c	if(alarm_going_off){
0013b2   5141     movf	0x41, 0, 0x1        	MOVF	_alarm_going_off, W, B
0013b4   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0013b6   1142     iorwf	0x42, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
0013b8   e017     bz	0x13e8                	BZ	_00224_DS_
0013ba   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	207; src/clock.c	alarm_counter++;
0013bc   2b43     incf	0x43, 0x1, 0x1      	INCF	_alarm_counter, F, B
0013be   e302     bnc	0x13c4               	BNC	_20259_DS_
0013c0   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
0013c2   2b44     incf	0x44, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20259_DS_:
                                           ;	.line	208; src/clock.c	alarm_led();
0013c4   eceb     call	0x2fd6, 0           	CALL	_alarm_led
0013c6   f017
0013c8   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	209; src/clock.c	if(alarm_counter==30){
0013ca   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_counter, W, B
0013cc   0a1e     xorlw	0x1e               	XORLW	0x1e
0013ce   e103     bnz	0x13d6               	BNZ	_00252_DS_
0013d0   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
0013d2   5144     movf	0x44, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
0013d4   e001     bz	0x13d8                	BZ	_00253_DS_
                                           _00252_DS_:
0013d6   d008     bra	0x13e8               	BRA	_00224_DS_
                                           _00253_DS_:
0013d8   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	210; src/clock.c	alarm_going_off =0;
0013da   6b41     clrf	0x41, 0x1           	CLRF	_alarm_going_off, B
0013dc   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0013de   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
0013e0   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	211; src/clock.c	alarm_counter = 0;
0013e2   6b43     clrf	0x43, 0x1           	CLRF	_alarm_counter, B
0013e4   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
0013e6   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00224_DS_:
0013e8   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	214; src/clock.c	overflow_counter = 0;
0013ea   6b45     clrf	0x45, 0x1           	CLRF	_overflow_counter, B
0013ec   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013ee   6b46     clrf	0x46, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	215; src/clock.c	toggle_led();
0013f0   ec85     call	0x310a, 0           	CALL	_toggle_led
0013f2   f018
0013f4   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	216; src/clock.c	add_second(_time);
0013f6   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
0013f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fa   010f     movlb	0xf                	BANKSEL	(__time + 1)
0013fc   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
0013fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001400   010f     movlb	0xf                	BANKSEL	__time
001402   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
001404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001406   ecbf     call	0x297e, 0           	CALL	_add_second
001408   f014
00140a   0e03     movlw	0x3                	MOVLW	0x03
00140c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; src/clock.c	update_display();
00140e   ecad     call	0x1f5a, 0           	CALL	_update_display
001410   f00f
                                           _00229_DS_:
                                           ;	.line	219; src/clock.c	INTCONbits.TMR0IF = 0;
001412   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00232_DS_:
001414   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001416   f001
001418   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00141a   f000
00141c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00141e   ffd9
001420   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001422   fffb
001424   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001426   fffa
001428   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00142a   ffea
00142c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00142e   ffe9
001430   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001432   fff4
001434   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001436   fff3
001438   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00143a   ffe0
00143c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00143e   ffd8
001440   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001442   ffe8
001444   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	180; src/clock.c	char* to_double_digits(int value){
002ce0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002ce2   ffe5
002ce4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002ce6   ffd9
002ce8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002cea   ffe5
002cec   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002cee   ffe5
002cf0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002cf2   ffe5
002cf4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002cf6   ffe5
002cf8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002cfa   ffe5
002cfc   0e02     movlw	0x2                	MOVLW	0x02
002cfe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d00   f000
002d02   0e03     movlw	0x3                	MOVLW	0x03
002d04   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d06   f001
                                           ;	.line	182; src/clock.c	sprintf(buffer, "%02d", value);
002d08   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d0c   0e43     movlw	0x43               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d10   0e80     movlw	0x80               	MOVLW	0x80
002d12   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d14   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d18   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d1c   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
002d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d20   0e20     movlw	0x20               	MOVLW	HIGH(__str_9)
002d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d24   0e4e     movlw	0x4e               	MOVLW	LOW(__str_9)
002d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d2c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d30   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002d32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d34   ec1d     call	0x223a, 0           	CALL	_sprintf
002d36   f011
002d38   0e08     movlw	0x8                	MOVLW	0x08
002d3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	183; src/clock.c	return buffer;
002d3c   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002d40   0e43     movlw	0x43               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d42   6e00     movwf	0, 0               	MOVWF	r0x00
002d44   0e80     movlw	0x80               	MOVLW	0x80
002d46   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d48   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002d4a   fff4
002d4c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002d4e   fff3
002d50   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d52   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002d54   f004
002d56   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002d58   f003
002d5a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002d5c   f002
002d5e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d60   f001
002d62   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d64   f000
002d66   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d68   ffd9
002d6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	169; src/clock.c	void display_string(BYTE pos, char* text){
001d4c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d4e   ffe5
001d50   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d52   ffd9
001d54   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d56   ffe5
001d58   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001d5a   ffe5
001d5c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001d5e   ffe5
001d60   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001d62   ffe5
001d64   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001d66   ffe5
001d68   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001d6a   ffe5
001d6c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001d6e   ffe5
001d70   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001d72   ffe5
001d74   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001d76   ffe5
001d78   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001d7a   ffe5
001d7c   0e02     movlw	0x2                	MOVLW	0x02
001d7e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001d80   f000
001d82   0e03     movlw	0x3                	MOVLW	0x03
001d84   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001d86   f001
001d88   0e04     movlw	0x4                	MOVLW	0x04
001d8a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001d8c   f002
001d8e   0e05     movlw	0x5                	MOVLW	0x05
001d90   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001d92   f003
                                           ;	.line	170; src/clock.c	BYTE        l = strlen(text);
001d94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da0   ec3b     call	0x2e76, 0           	CALL	_strlen
001da2   f017
001da4   6e04     movwf	0x4, 0             	MOVWF	r0x04
001da6   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001da8   f005
001daa   0e03     movlw	0x3                	MOVLW	0x03
001dac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; src/clock.c	BYTE      max = 32-pos;    
001dae   5000     movf	0, 0, 0             	MOVF	r0x00, W
001db0   0820     sublw	0x20               	SUBLW	0x20
001db2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	172; src/clock.c	char       *d = (char*)&LCDText[pos];
001db4   6a06     clrf	0x6, 0              	CLRF	r0x06
001db6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001db8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001dba   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001dbc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001dbe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001dc0   6e06     movwf	0x6, 0             	MOVWF	r0x06
001dc2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dc4   6e00     movwf	0, 0               	MOVWF	r0x00
001dc6   0e80     movlw	0x80               	MOVLW	0x80
001dc8   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	174; src/clock.c	size_t      n = (l<max)?l:max;
001dca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dcc   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001dce   e302     bnc	0x1dd4               	BNC	_00200_DS_
001dd0   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001dd2   f004
                                           _00200_DS_:
001dd4   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	175; src/clock.c	if (n != 0)
001dd6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dd8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001dda   e027     bz	0x1e2a                	BZ	_00196_DS_
                                           _00192_DS_:
                                           ;	.line	176; src/clock.c	while (n-- != 0)*d++ = *s++;
001ddc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001dde   f008
001de0   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001de2   f009
001de4   0eff     movlw	0xff               	MOVLW	0xff
001de6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001de8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001dea   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001dec   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001dee   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001df0   e01c     bz	0x1e2a                	BZ	_00196_DS_
001df2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001df4   ffe9
001df6   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001df8   fff3
001dfa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dfc   ecc9     call	0x3192, 0           	CALL	__gptrget1
001dfe   f018
001e00   6e08     movwf	0x8, 0             	MOVWF	r0x08
001e02   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e04   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e06   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001e08   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e0a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001e0c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e0e   ffe5
001e10   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e12   ffe9
001e14   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001e16   fff3
001e18   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001e1a   ec00     call	0x3200, 0           	CALL	__gptrput1
001e1c   f019
001e1e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001e20   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e22   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001e24   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e26   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001e28   d7d9     bra	0x1ddc               	BRA	_00192_DS_
                                           _00196_DS_:
                                           ;	.line	177; src/clock.c	LCDUpdate();
001e2a   ec21     call	0x842, 0            	CALL	_LCDUpdate
001e2c   f004
001e2e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001e30   f009
001e32   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001e34   f008
001e36   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e38   f007
001e3a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e3c   f006
001e3e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e40   f005
001e42   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e44   f004
001e46   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e48   f003
001e4a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e4c   f002
001e4e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e50   f001
001e52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e54   f000
001e56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e58   ffd9
001e5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	145; src/clock.c	int get_input(int maxvalue, char *text, char *mode){
000d08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d0a   ffe5
000d0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d0e   ffd9
000d10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d12   ffe5
000d14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d16   ffe5
000d18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d1a   ffe5
000d1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d1e   ffe5
000d20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d22   ffe5
000d24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d26   ffe5
000d28   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d2a   ffe5
000d2c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d2e   ffe5
000d30   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d32   ffe5
000d34   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000d36   ffe5
000d38   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000d3a   ffe5
000d3c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000d3e   ffe5
000d40   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000d42   ffe5
000d44   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000d46   ffe5
000d48   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000d4a   ffe5
000d4c   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000d4e   ffe5
000d50   0e02     movlw	0x2                	MOVLW	0x02
000d52   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d54   f000
000d56   0e03     movlw	0x3                	MOVLW	0x03
000d58   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d5a   f001
000d5c   0e04     movlw	0x4                	MOVLW	0x04
000d5e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000d60   f002
000d62   0e05     movlw	0x5                	MOVLW	0x05
000d64   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000d66   f003
000d68   0e06     movlw	0x6                	MOVLW	0x06
000d6a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000d6c   f004
000d6e   0e07     movlw	0x7                	MOVLW	0x07
000d70   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000d72   f005
000d74   0e08     movlw	0x8                	MOVLW	0x08
000d76   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000d78   f006
000d7a   0e09     movlw	0x9                	MOVLW	0x09
000d7c   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000d7e   f007
                                           ;	.line	146; src/clock.c	BYTE length = strlen(text);
000d80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8c   ec3b     call	0x2e76, 0           	CALL	_strlen
000d8e   f017
000d90   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d92   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000d94   f009
000d96   0e03     movlw	0x3                	MOVLW	0x03
000d98   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	147; src/clock.c	int value = 0;
000d9a   6a09     clrf	0x9, 0              	CLRF	r0x09
000d9c   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	148; src/clock.c	display_string(0, text);
000d9e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000daa   0e00     movlw	0                  	MOVLW	0x00
000dac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dae   eca6     call	0x1d4c, 0           	CALL	_display_string
000db0   f00e
000db2   0e04     movlw	0x4                	MOVLW	0x04
000db4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	149; src/clock.c	while(1)
000db6   0e12     movlw	0x12               	MOVLW	0x12
000db8   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
000dba   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00185_DS_:
000dbc   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	152; src/clock.c	if(config_mode_on){
000dbe   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
000dc0   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
000dc2   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
000dc4   e0fb     bz	0xdbc                 	BZ	_00185_DS_
                                           ;	.line	153; src/clock.c	DelayMs(10);
000dc6   0e68     movlw	0x68               	MOVLW	0x68
000dc8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dca   0e42     movlw	0x42               	MOVLW	0x42
000dcc   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dce   6a08     clrf	0x8, 0              	CLRF	r0x08
000dd0   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           _00172_DS_:
000dd2   c003     movff	0x3, 0xc           	MOVFF	r0x03, r0x0c
000dd4   f00c
000dd6   c004     movff	0x4, 0xd           	MOVFF	r0x04, r0x0d
000dd8   f00d
000dda   c008     movff	0x8, 0xe           	MOVFF	r0x08, r0x0e
000ddc   f00e
000dde   c00b     movff	0xb, 0xf           	MOVFF	r0x0b, r0x0f
000de0   f00f
000de2   0eff     movlw	0xff               	MOVLW	0xff
000de4   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000de6   0eff     movlw	0xff               	MOVLW	0xff
000de8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000dea   0eff     movlw	0xff               	MOVLW	0xff
000dec   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000dee   0eff     movlw	0xff               	MOVLW	0xff
000df0   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
000df2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000df4   100d     iorwf	0xd, 0, 0          	IORWF	r0x0d, W
000df6   100e     iorwf	0xe, 0, 0          	IORWF	r0x0e, W
000df8   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
000dfa   e1eb     bnz	0xdd2                	BNZ	_00172_DS_
                                           ;	.line	154; src/clock.c	if(read_and_clear(&but2_pressed)){
000dfc   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000dfe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e00   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
000e02   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e04   0e80     movlw	0x80               	MOVLW	0x80
000e06   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e08   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e0c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e14   ecfa     call	0x2df4, 0           	CALL	_read_and_clear
000e16   f016
000e18   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e1a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e1c   f004
000e1e   0e03     movlw	0x3                	MOVLW	0x03
000e20   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e22   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e24   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000e26   e006     bz	0xe34                 	BZ	_00179_DS_
                                           ;	.line	155; src/clock.c	LCDErase();
000e28   ec77     call	0x2aee, 0           	CALL	_LCDErase
000e2a   f015
                                           ;	.line	156; src/clock.c	return value;
000e2c   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
000e2e   fff3
000e30   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000e32   d04e     bra	0xed0                	BRA	_00187_DS_
                                           _00179_DS_:
                                           ;	.line	158; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000e34   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000e36   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e38   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
000e3a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e3c   0e80     movlw	0x80               	MOVLW	0x80
000e3e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e40   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e44   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e48   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4c   ecfa     call	0x2df4, 0           	CALL	_read_and_clear
000e4e   f016
000e50   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e52   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e54   f004
000e56   0e03     movlw	0x3                	MOVLW	0x03
000e58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e5a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e5c   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000e5e   e012     bz	0xe84                 	BZ	_00181_DS_
                                           ;	.line	159; src/clock.c	value = (++value)%maxvalue;
000e60   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
000e62   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e64   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
000e66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e6e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e72   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e76   ec92     call	0x2324, 0           	CALL	__modsint
000e78   f011
000e7a   6e09     movwf	0x9, 0             	MOVWF	r0x09
000e7c   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
000e7e   f00a
000e80   0e04     movlw	0x4                	MOVLW	0x04
000e82   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00181_DS_:
                                           ;	.line	161; src/clock.c	display_string(START_FIRST_LINE , mode);
000e84   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e90   0e00     movlw	0                  	MOVLW	0x00
000e92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e94   eca6     call	0x1d4c, 0           	CALL	_display_string
000e96   f00e
000e98   0e04     movlw	0x4                	MOVLW	0x04
000e9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	162; src/clock.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
000e9c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000e9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000ea2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea4   ec70     call	0x2ce0, 0           	CALL	_to_double_digits
000ea6   f016
000ea8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000eaa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000eac   f004
000eae   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
000eb0   f008
000eb2   0e02     movlw	0x2                	MOVLW	0x02
000eb4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000eb6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ebc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ebe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ec0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec6   eca6     call	0x1d4c, 0           	CALL	_display_string
000ec8   f00e
000eca   0e04     movlw	0x4                	MOVLW	0x04
000ecc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ece   d776     bra	0xdbc                	BRA	_00185_DS_
                                           _00187_DS_:
000ed0   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000ed2   f00f
000ed4   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000ed6   f00e
000ed8   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000eda   f00d
000edc   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000ede   f00c
000ee0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000ee2   f00b
000ee4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000ee6   f00a
000ee8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000eea   f009
000eec   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000eee   f008
000ef0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ef2   f007
000ef4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ef6   f006
000ef8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000efa   f005
000efc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000efe   f004
000f00   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f02   f003
000f04   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f06   f002
000f08   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f0a   f001
000f0c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f0e   f000
000f10   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f12   ffd9
000f14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	138; src/clock.c	int read_and_clear(int *variable){
002df4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002df6   ffe5
002df8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002dfa   ffd9
002dfc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002dfe   ffe5
002e00   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e02   ffe5
002e04   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e06   ffe5
002e08   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e0a   ffe5
002e0c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e0e   ffe5
002e10   0e02     movlw	0x2                	MOVLW	0x02
002e12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002e14   f000
002e16   0e03     movlw	0x3                	MOVLW	0x03
002e18   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002e1a   f001
002e1c   0e04     movlw	0x4                	MOVLW	0x04
002e1e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002e20   f002
                                           ;	.line	139; src/clock.c	if(*variable){
002e22   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002e24   ffe9
002e26   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e28   fff3
002e2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e2c   ecb3     call	0x3166, 0           	CALL	__gptrget2
002e2e   f018
002e30   6e03     movwf	0x3, 0             	MOVWF	r0x03
002e32   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002e34   f004
002e36   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e38   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002e3a   e00e     bz	0x2e58                	BZ	_00166_DS_
                                           ;	.line	140; src/clock.c	*variable = 0;
002e3c   0e00     movlw	0                  	MOVLW	0x00
002e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e40   0e00     movlw	0                  	MOVLW	0x00
002e42   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002e44   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002e46   ffe9
002e48   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e4a   fff3
002e4c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e4e   ecf4     call	0x31e8, 0           	CALL	__gptrput2
002e50   f018
                                           ;	.line	141; src/clock.c	return 1;
002e52   6af3     clrf	0xf3, 0             	CLRF	PRODL
002e54   0e01     movlw	0x1                	MOVLW	0x01
002e56   d002     bra	0x2e5c               	BRA	_00167_DS_
                                           _00166_DS_:
                                           ;	.line	143; src/clock.c	return 0;
002e58   6af3     clrf	0xf3, 0             	CLRF	PRODL
002e5a   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00167_DS_:
002e5c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002e5e   f004
002e60   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002e62   f003
002e64   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e66   f002
002e68   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e6a   f001
002e6c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e6e   f000
002e70   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e72   ffd9
002e74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	130; src/clock.c	void init_time(time t, char *mode){ 
0018b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0018b6   ffe5
0018b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0018ba   ffd9
0018bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0018be   ffe5
0018c0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0018c2   ffe5
0018c4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0018c6   ffe5
0018c8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0018ca   ffe5
0018cc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0018ce   ffe5
0018d0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0018d2   ffe5
0018d4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0018d6   ffe5
0018d8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0018da   ffe5
0018dc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0018de   ffe5
0018e0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0018e2   ffe5
0018e4   0e02     movlw	0x2                	MOVLW	0x02
0018e6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018e8   f000
0018ea   0e03     movlw	0x3                	MOVLW	0x03
0018ec   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018ee   f001
0018f0   0e04     movlw	0x4                	MOVLW	0x04
0018f2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0018f4   f002
0018f6   0e05     movlw	0x5                	MOVLW	0x05
0018f8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0018fa   f003
0018fc   0e06     movlw	0x6                	MOVLW	0x06
0018fe   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001900   f004
001902   0e07     movlw	0x7                	MOVLW	0x07
001904   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001906   f005
                                           ;	.line	132; src/clock.c	h = get_input(24, "Hours:", mode);
001908   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00190a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00190c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00190e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001910   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001914   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
001916   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001918   0e20     movlw	0x20               	MOVLW	HIGH(__str_6)
00191a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00191c   0e32     movlw	0x32               	MOVLW	LOW(__str_6)
00191e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001920   0e00     movlw	0                  	MOVLW	0x00
001922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001924   0e18     movlw	0x18               	MOVLW	0x18
001926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001928   ec84     call	0xd08, 0            	CALL	_get_input
00192a   f006
00192c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00192e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001930   f007
001932   0e08     movlw	0x8                	MOVLW	0x08
001934   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; src/clock.c	m = get_input(60, "MinuteS:", mode);
001936   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00193a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00193c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00193e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001942   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
001944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001946   0e20     movlw	0x20               	MOVLW	HIGH(__str_7)
001948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194a   0e3a     movlw	0x3a               	MOVLW	LOW(__str_7)
00194c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194e   0e00     movlw	0                  	MOVLW	0x00
001950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001952   0e3c     movlw	0x3c               	MOVLW	0x3c
001954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001956   ec84     call	0xd08, 0            	CALL	_get_input
001958   f006
00195a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00195c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00195e   f009
001960   0e08     movlw	0x8                	MOVLW	0x08
001962   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	134; src/clock.c	s = get_input(60, "SecondS:", mode);
001964   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001968   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00196a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00196c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00196e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001970   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
001972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001974   0e20     movlw	0x20               	MOVLW	HIGH(__str_8)
001976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001978   0e44     movlw	0x44               	MOVLW	LOW(__str_8)
00197a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00197c   0e00     movlw	0                  	MOVLW	0x00
00197e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001980   0e3c     movlw	0x3c               	MOVLW	0x3c
001982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001984   ec84     call	0xd08, 0            	CALL	_get_input
001986   f006
001988   6e03     movwf	0x3, 0             	MOVWF	r0x03
00198a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00198c   f004
00198e   0e08     movlw	0x8                	MOVLW	0x08
001990   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	135; src/clock.c	time_set(t,h,m,s);
001992   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001994   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001996   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001998   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00199c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0019a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0019a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b6   ec04     call	0x2408, 0           	CALL	_time_set
0019b8   f012
0019ba   0e09     movlw	0x9                	MOVLW	0x09
0019bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0019be   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0019c0   f009
0019c2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0019c4   f008
0019c6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0019c8   f007
0019ca   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0019cc   f006
0019ce   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0019d0   f005
0019d2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0019d4   f004
0019d6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0019d8   f003
0019da   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0019dc   f002
0019de   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019e0   f001
0019e2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0019e4   f000
0019e6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019e8   ffd9
0019ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	83; src/clock.c	void init_config(void){
000f16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f18   ffe5
000f1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f1c   ffd9
000f1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f20   ffe5
000f22   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f24   ffe5
000f26   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f28   ffe5
000f2a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f2c   ffe5
000f2e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f30   ffe5
                                           ;	.line	85; src/clock.c	int choice = -1;
000f32   0eff     movlw	0xff               	MOVLW	0xff
000f34   6e00     movwf	0, 0               	MOVWF	r0x00
000f36   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	86; src/clock.c	display_string(START_FIRST_LINE, "Choose a config mode.");
000f38   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000f3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f3c   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_0)
000f3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f40   0ed6     movlw	0xd6               	MOVLW	LOW(__str_0)
000f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f44   0e00     movlw	0                  	MOVLW	0x00
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   eca6     call	0x1d4c, 0           	CALL	_display_string
000f4a   f00e
000f4c   0e04     movlw	0x4                	MOVLW	0x04
000f4e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00138_DS_:
                                           ;	.line	88; src/clock.c	if(read_and_clear(&but2_pressed)){
000f50   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000f52   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f54   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
000f56   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f58   0e80     movlw	0x80               	MOVLW	0x80
000f5a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f5c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f60   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f68   ecfa     call	0x2df4, 0           	CALL	_read_and_clear
000f6a   f016
000f6c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f6e   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000f70   f003
000f72   0e03     movlw	0x3                	MOVLW	0x03
000f74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000f76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f78   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
000f7a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f7c   d039     bra	0xff0                	BRA	_00130_DS_
                                           ;	.line	90; src/clock.c	switch(choice){
000f7e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f80   e102     bnz	0xf86                	BNZ	_00150_DS_
000f82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f84   e006     bz	0xf92                 	BZ	_00125_DS_
                                           _00150_DS_:
000f86   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f88   0a01     xorlw	0x1                	XORLW	0x01
000f8a   e102     bnz	0xf90                	BNZ	_00152_DS_
000f8c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f8e   e017     bz	0xfbe                 	BZ	_00126_DS_
                                           _00152_DS_:
000f90   d02c     bra	0xfea                	BRA	_00127_DS_
                                           _00125_DS_:
                                           ;	.line	93; src/clock.c	LCDErase();
000f92   ec77     call	0x2aee, 0           	CALL	_LCDErase
000f94   f015
                                           ;	.line	94; src/clock.c	init_time(_alarm, "Setting alarm");			
000f96   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000f98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f9a   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_1)
000f9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f9e   0eec     movlw	0xec               	MOVLW	LOW(__str_1)
000fa0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fa2   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
000fa4   5142     movf	0x42, 0, 0x1        	MOVF	(__alarm + 2), W, B
000fa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fa8   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
000faa   5141     movf	0x41, 0, 0x1        	MOVF	(__alarm + 1), W, B
000fac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fae   010e     movlb	0xe                	BANKSEL	__alarm
000fb0   5140     movf	0x40, 0, 0x1        	MOVF	__alarm, W, B
000fb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb4   ec5a     call	0x18b4, 0           	CALL	_init_time
000fb6   f00c
000fb8   0e06     movlw	0x6                	MOVLW	0x06
000fba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	95; src/clock.c	break;
000fbc   d019     bra	0xff0                	BRA	_00130_DS_
                                           _00126_DS_:
                                           ;	.line	98; src/clock.c	LCDErase();
000fbe   ec77     call	0x2aee, 0           	CALL	_LCDErase
000fc0   f015
                                           ;	.line	99; src/clock.c	init_time(_time, "Setting clock");			
000fc2   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000fc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc6   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_2)
000fc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fca   0efa     movlw	0xfa               	MOVLW	LOW(__str_2)
000fcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fce   010f     movlb	0xf                	BANKSEL	(__time + 2)
000fd0   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
000fd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd4   010f     movlb	0xf                	BANKSEL	(__time + 1)
000fd6   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
000fd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fda   010f     movlb	0xf                	BANKSEL	__time
000fdc   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
000fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe0   ec5a     call	0x18b4, 0           	CALL	_init_time
000fe2   f00c
000fe4   0e06     movlw	0x6                	MOVLW	0x06
000fe6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	100; src/clock.c	break;
000fe8   d003     bra	0xff0                	BRA	_00130_DS_
                                           _00127_DS_:
                                           ;	.line	102; src/clock.c	LCDErase();
000fea   ec77     call	0x2aee, 0           	CALL	_LCDErase
000fec   f015
                                           ;	.line	103; src/clock.c	return;
000fee   d07f     bra	0x10ee               	BRA	_00140_DS_
                                           _00130_DS_:
                                           ;	.line	106; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000ff0   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000ff2   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ff4   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
000ff6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ff8   0e80     movlw	0x80               	MOVLW	0x80
000ffa   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ffc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ffe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001000   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001002   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001004   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001008   ecfa     call	0x2df4, 0           	CALL	_read_and_clear
00100a   f016
00100c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00100e   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001010   f003
001012   0e03     movlw	0x3                	MOVLW	0x03
001014   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001016   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001018   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
00101a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00101c   d799     bra	0xf50                	BRA	_00138_DS_
                                           ;	.line	108; src/clock.c	switch(choice){
00101e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001020   0f80     addlw	0x80               	ADDLW	0x80
001022   0f81     addlw	0x81               	ADDLW	0x81
001024   e102     bnz	0x102a               	BNZ	_00153_DS_
001026   0eff     movlw	0xff               	MOVLW	0xff
001028   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00153_DS_:
00102a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00102c   d791     bra	0xf50                	BRA	_00138_DS_
00102e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001030   0f80     addlw	0x80               	ADDLW	0x80
001032   0f80     addlw	0x80               	ADDLW	0x80
001034   e102     bnz	0x103a               	BNZ	_00154_DS_
001036   0e02     movlw	0x2                	MOVLW	0x02
001038   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00154_DS_:
00103a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00103c   d789     bra	0xf50                	BRA	_00138_DS_
00103e   2800     incf	0, 0, 0             	INCF	r0x00, W
001040   6e02     movwf	0x2, 0             	MOVWF	r0x02
001042   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001044   ffe5
001046   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001048   ffe5
00104a   6a06     clrf	0x6, 0              	CLRF	r0x06
00104c   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
00104e   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
001050   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
001052   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
001054   0bfc     andlw	0xfc               	ANDLW	0xfc
001056   6e05     movwf	0x5, 0             	MOVWF	r0x05
001058   0e00     movlw	0                  	MOVLW	UPPER(_00155_DS_)
00105a   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00105c   0e10     movlw	0x10               	MOVLW	HIGH(_00155_DS_)
00105e   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001060   0e78     movlw	0x78               	MOVLW	LOW(_00155_DS_)
001062   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
001064   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001066   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001068   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00106a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00106c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00106e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001070   f006
001072   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001074   f005
001076   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00155_DS_:
001078   ef42     goto	0x1084              	GOTO	_00131_DS_
00107a   f008
00107c   ef53     goto	0x10a6              	GOTO	_00132_DS_
00107e   f008
001080   ef65     goto	0x10ca              	GOTO	_00133_DS_
001082   f008
                                           _00131_DS_:
                                           ;	.line	111; src/clock.c	LCDErase();
001084   ec77     call	0x2aee, 0           	CALL	_LCDErase
001086   f015
                                           ;	.line	112; src/clock.c	choice = CONFIG_MODE_ALARM;
001088   6a00     clrf	0, 0                	CLRF	r0x00
00108a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	113; src/clock.c	display_string(START_FIRST_LINE, "Set alarm?");
00108c   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
00108e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001090   0e20     movlw	0x20               	MOVLW	HIGH(__str_3)
001092   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001094   0e08     movlw	0x8                	MOVLW	LOW(__str_3)
001096   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001098   0e00     movlw	0                  	MOVLW	0x00
00109a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109c   eca6     call	0x1d4c, 0           	CALL	_display_string
00109e   f00e
0010a0   0e04     movlw	0x4                	MOVLW	0x04
0010a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	114; src/clock.c	break;
0010a4   d755     bra	0xf50                	BRA	_00138_DS_
                                           _00132_DS_:
                                           ;	.line	117; src/clock.c	LCDErase();
0010a6   ec77     call	0x2aee, 0           	CALL	_LCDErase
0010a8   f015
                                           ;	.line	118; src/clock.c	choice = CONFIG_MODE_CLOCK;
0010aa   0e01     movlw	0x1                	MOVLW	0x01
0010ac   6e00     movwf	0, 0               	MOVWF	r0x00
0010ae   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	119; src/clock.c	display_string(START_FIRST_LINE, "Set clock?");
0010b0   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
0010b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b4   0e20     movlw	0x20               	MOVLW	HIGH(__str_4)
0010b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b8   0e14     movlw	0x14               	MOVLW	LOW(__str_4)
0010ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010bc   0e00     movlw	0                  	MOVLW	0x00
0010be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c0   eca6     call	0x1d4c, 0           	CALL	_display_string
0010c2   f00e
0010c4   0e04     movlw	0x4                	MOVLW	0x04
0010c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	120; src/clock.c	break;
0010c8   d743     bra	0xf50                	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	122; src/clock.c	LCDErase();
0010ca   ec77     call	0x2aee, 0           	CALL	_LCDErase
0010cc   f015
                                           ;	.line	123; src/clock.c	choice =CONFIG_MODE_NONE;
0010ce   0eff     movlw	0xff               	MOVLW	0xff
0010d0   6e00     movwf	0, 0               	MOVWF	r0x00
0010d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	124; src/clock.c	display_string(START_FIRST_LINE, "Quit config mode?");
0010d4   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
0010d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d8   0e20     movlw	0x20               	MOVLW	HIGH(__str_5)
0010da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010dc   0e20     movlw	0x20               	MOVLW	LOW(__str_5)
0010de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e0   0e00     movlw	0                  	MOVLW	0x00
0010e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e4   eca6     call	0x1d4c, 0           	CALL	_display_string
0010e6   f00e
0010e8   0e04     movlw	0x4                	MOVLW	0x04
0010ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	126; src/clock.c	}
0010ec   d731     bra	0xf50                	BRA	_00138_DS_
                                           _00140_DS_:
0010ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0010f0   f004
0010f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0010f4   f003
0010f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0010f8   f002
0010fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010fc   f001
0010fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001100   f000
001102   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001104   ffd9
001106   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	79; src/clock.c	void alarm_led(void){
002fd6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002fd8   ffe5
002fda   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002fdc   ffd9
002fde   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fe0   ffe5
                                           ;	.line	80; src/clock.c	LED1_IO^=1;
002fe2   6a00     clrf	0, 0                	CLRF	r0x00
002fe4   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
002fe6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002fe8   0e01     movlw	0x1                	MOVLW	0x01
002fea   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002fec   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fee   0b01     andlw	0x1                	ANDLW	0x01
002ff0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002ff2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002ff4   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002ff6   0bfd     andlw	0xfd               	ANDLW	0xfd
002ff8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002ffa   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	81; src/clock.c	LED2_IO^=1;
002ffc   6a00     clrf	0, 0                	CLRF	r0x00
002ffe   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
003000   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003002   0e01     movlw	0x1                	MOVLW	0x01
003004   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003006   5000     movf	0, 0, 0             	MOVF	r0x00, W
003008   0b01     andlw	0x1                	ANDLW	0x01
00300a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00300c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00300e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003010   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003012   0bfb     andlw	0xfb               	ANDLW	0xfb
003014   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003016   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
003018   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00301a   f000
00301c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00301e   ffd9
003020   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	75; src/clock.c	void toggle_led(void){
00310a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00310c   ffe5
00310e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003110   ffd9
003112   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003114   ffe5
                                           ;	.line	76; src/clock.c	LED0_IO^=1;
003116   6a00     clrf	0, 0                	CLRF	r0x00
003118   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
00311a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00311c   0e01     movlw	0x1                	MOVLW	0x01
00311e   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003120   5000     movf	0, 0, 0             	MOVF	r0x00, W
003122   0b01     andlw	0x1                	ANDLW	0x01
003124   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003126   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003128   0bfe     andlw	0xfe               	ANDLW	0xfe
00312a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00312c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00312e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003130   f000
003132   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003134   ffd9
003136   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	70; src/clock.c	void update_display(void){
001f5a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001f5c   ffe5
001f5e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001f60   ffd9
001f62   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f64   ffe5
001f66   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f68   ffe5
001f6a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f6c   ffe5
                                           ;	.line	71; src/clock.c	time_print(_time, display_line);
001f6e   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
001f70   6e01     movwf	0x1, 0             	MOVWF	r0x01
001f72   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
001f74   6e00     movwf	0, 0               	MOVWF	r0x00
001f76   0e80     movlw	0x80               	MOVLW	0x80
001f78   6e02     movwf	0x2, 0             	MOVWF	r0x02
001f7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f7e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f82   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f86   010f     movlb	0xf                	BANKSEL	(__time + 2)
001f88   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
001f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f8c   010f     movlb	0xf                	BANKSEL	(__time + 1)
001f8e   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
001f90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f92   010f     movlb	0xf                	BANKSEL	__time
001f94   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
001f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f98   ec88     call	0x1b10, 0           	CALL	_time_print
001f9a   f00d
001f9c   0e06     movlw	0x6                	MOVLW	0x06
001f9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	72; src/clock.c	display_string(0, display_line);
001fa0   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
001fa2   6e01     movwf	0x1, 0             	MOVWF	r0x01
001fa4   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
001fa6   6e00     movwf	0, 0               	MOVWF	r0x00
001fa8   0e80     movlw	0x80               	MOVLW	0x80
001faa   6e02     movwf	0x2, 0             	MOVWF	r0x02
001fac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001fae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fb0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fb4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001fb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fb8   0e00     movlw	0                  	MOVLW	0x00
001fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fbc   eca6     call	0x1d4c, 0           	CALL	_display_string
001fbe   f00e
001fc0   0e04     movlw	0x4                	MOVLW	0x04
001fc2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001fc4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001fc6   f002
001fc8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001fca   f001
001fcc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001fce   f000
001fd0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001fd2   ffd9
001fd4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001fd6   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e
001fd8   6f6f     movwf	0x6f, 0x1          
001fda   6573     cpfsgt	0x73, 0x1         
001fdc   6120     cpfslt	0x20, 0x1         
001fde   6320     cpfseq	0x20, 0x1         
001fe0   6e6f     movwf	0x6f, 0            
001fe2   6966     setf	0x66, 0x1           	DB	0x66, 0x69, 0x67, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
001fe4   2067     addwfc	0x67, 0, 0        
001fe6   6f6d     movwf	0x6d, 0x1          
001fe8   6564     cpfsgt	0x64, 0x1         
001fea   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_1:
001fec   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72
001fee   7474     btg	0x74, 0x2, 0         
001ff0   6e69     movwf	0x69, 0            
001ff2   2067     addwfc	0x67, 0, 0        
001ff4   6c61     negf	0x61, 0             
001ff6   7261     btg	0x61, 0x1, 0         
001ff8   006d     dw	0x6d  ;unknown opcode 	DB	0x6d, 0x00
                                           ; ; Starting pCode block
                                           __str_2:
001ffa   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x6f, 0x63
001ffc   7474     btg	0x74, 0x2, 0         
001ffe   6e69     movwf	0x69, 0            
002000   2067     addwfc	0x67, 0, 0        
002002   6c63     negf	0x63, 0             
002004   636f     cpfseq	0x6f, 0x1         
002006   006b     dw	0x6b  ;unknown opcode 	DB	0x6b, 0x00
                                           ; ; Starting pCode block
                                           __str_3:
002008   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
00200a   2074     addwfc	0x74, 0, 0        
00200c   6c61     negf	0x61, 0             
00200e   7261     btg	0x61, 0x1, 0         
002010   3f6d     incfsz	0x6d, 0x1, 0x1    
002012   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
002014   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
002016   2074     addwfc	0x74, 0, 0        
002018   6c63     negf	0x63, 0             
00201a   636f     cpfseq	0x6f, 0x1         
00201c   3f6b     incfsz	0x6b, 0x1, 0x1    
00201e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
002020   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
002022   7469     btg	0x69, 0x2, 0         
002024   6320     cpfseq	0x20, 0x1         
002026   6e6f     movwf	0x6f, 0            
002028   6966     setf	0x66, 0x1           
00202a   2067     addwfc	0x67, 0, 0        
00202c   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x3f, 0x00
00202e   6564     cpfsgt	0x64, 0x1         
002030   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_6:
002032   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
002034   7275     btg	0x75, 0x1, 0         
002036   3a73     swapf	0x73, 0x1, 0       
002038   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
00203a   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x3a, 0x00
00203c   756e     btg	0x6e, 0x2, 0x1       
00203e   6574     cpfsgt	0x74, 0x1         
002040   3a53     swapf	0x53, 0x1, 0       
002042   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
002044   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x3a, 0x00
002046   6f63     movwf	0x63, 0x1          
002048   646e     cpfsgt	0x6e, 0           
00204a   3a53     swapf	0x53, 0x1, 0       
00204c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
00204e   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
002050   6432     cpfsgt	0x32, 0           
002052   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2658 (0x0a62) bytes ( 2.03%)
                                           ;           	 1329 (0x0531) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002aee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002af0   ffe5
002af2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002af4   ffd9
002af6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002af8   ffe5
002afa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002afc   ffe5
002afe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b00   ffe5
002b02   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b04   ffe5
002b06   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b08   ffe5
002b0a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b0c   ffe5
002b0e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b10   ffe5
002b12   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b14   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002b16   0e01     movlw	0x1                	MOVLW	0x01
002b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b1a   0e00     movlw	0                  	MOVLW	0x00
002b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b1e   ecba     call	0x2f74, 0           	CALL	_LCDWrite
002b20   f017
002b22   0e02     movlw	0x2                	MOVLW	0x02
002b24   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002b26   0e48     movlw	0x48               	MOVLW	0x48
002b28   6e00     movwf	0, 0               	MOVWF	r0x00
002b2a   0e0d     movlw	0xd                	MOVLW	0x0d
002b2c   6e01     movwf	0x1, 0             	MOVWF	r0x01
002b2e   6a02     clrf	0x2, 0              	CLRF	r0x02
002b30   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002b32   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002b34   f004
002b36   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002b38   f005
002b3a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002b3c   f006
002b3e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002b40   f007
002b42   0eff     movlw	0xff               	MOVLW	0xff
002b44   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002b46   0eff     movlw	0xff               	MOVLW	0xff
002b48   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002b4a   0eff     movlw	0xff               	MOVLW	0xff
002b4c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002b4e   0eff     movlw	0xff               	MOVLW	0xff
002b50   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002b52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b54   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002b56   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002b58   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002b5a   e1eb     bnz	0x2b32               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002b5c   0e00     movlw	0                  	MOVLW	0x00
002b5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b60   0e20     movlw	0x20               	MOVLW	0x20
002b62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b64   0e20     movlw	0x20               	MOVLW	0x20
002b66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b68   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002b6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b6c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002b6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b70   ec74     call	0x24e8, 0           	CALL	_memset
002b72   f012
002b74   0e05     movlw	0x5                	MOVLW	0x05
002b76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002b78   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002b7a   f007
002b7c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002b7e   f006
002b80   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002b82   f005
002b84   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002b86   f004
002b88   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b8a   f003
002b8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b8e   f002
002b90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b92   f001
002b94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b96   f000
002b98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b9a   ffd9
002b9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000878   f017
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ecba     call	0x2f74, 0           	CALL	_LCDWrite
00093a   f017
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000982   f017
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000a44   f017
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ec74     call	0x24e8, 0           	CALL	_memset
000aee   f012
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000bd6   f017
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000c1a   f017
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000c5e   f017
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ecba     call	0x2f74, 0           	CALL	_LCDWrite
000ca2   f017
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002f74   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f76   ffe5
002f78   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f7a   ffd9
002f7c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f7e   ffe5
002f80   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f82   ffe5
002f84   0e02     movlw	0x2                	MOVLW	0x02
002f86   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002f88   f000
002f8a   0e03     movlw	0x3                	MOVLW	0x03
002f8c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002f8e   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002f90   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002f92   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002f94   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002f96   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002f98   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f9a   0b01     andlw	0x1                	ANDLW	0x01
002f9c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002f9e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002fa0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002fa2   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002fa4   0bfb     andlw	0xfb               	ANDLW	0xfb
002fa6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002fa8   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002faa   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002fac   ff8d
002fae   0000     nop                      	nop 
002fb0   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002fb2   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002fb4   0000     nop                      	nop 
002fb6   0000     nop                      	nop 
002fb8   0000     nop                      	nop 
002fba   0000     nop                      	nop 
002fbc   0000     nop                      	nop 
002fbe   0000     nop                      	nop 
002fc0   0000     nop                      	nop 
002fc2   0000     nop                      	nop 
002fc4   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002fc6   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002fc8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002fca   f001
002fcc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002fce   f000
002fd0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002fd2   ffd9
002fd4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
0015cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015ce   ffe5
0015d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015d2   ffd9
0015d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015d6   ffe5
0015d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0015da   ffe5
0015dc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0015de   ffe5
0015e0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0015e2   ffe5
0015e4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0015e6   ffe5
0015e8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0015ea   ffe5
0015ec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0015ee   ffe5
0015f0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0015f2   ffe5
0015f4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0015f6   ffe5
0015f8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0015fa   ffe5
0015fc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0015fe   ffe5
001600   0e02     movlw	0x2                	MOVLW	0x02
001602   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001604   f000
001606   0e03     movlw	0x3                	MOVLW	0x03
001608   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00160a   f001
00160c   0e04     movlw	0x4                	MOVLW	0x04
00160e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001610   f002
001612   0e05     movlw	0x5                	MOVLW	0x05
001614   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001616   f003
001618   0e06     movlw	0x6                	MOVLW	0x06
00161a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00161c   f004
00161e   0e07     movlw	0x7                	MOVLW	0x07
001620   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001622   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
001624   5000     movf	0, 0, 0             	MOVF	r0x00, W
001626   0f04     addlw	0x4                	ADDLW	0x04
001628   6e06     movwf	0x6, 0             	MOVWF	r0x06
00162a   0e00     movlw	0                  	MOVLW	0x00
00162c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00162e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001630   0e00     movlw	0                  	MOVLW	0x00
001632   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001634   6e08     movwf	0x8, 0             	MOVWF	r0x08
001636   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001638   ffe9
00163a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00163c   fff3
00163e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001640   ecb3     call	0x3166, 0           	CALL	__gptrget2
001642   f018
001644   6e06     movwf	0x6, 0             	MOVWF	r0x06
001646   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001648   f007
00164a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00164c   0f04     addlw	0x4                	ADDLW	0x04
00164e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001650   0e00     movlw	0                  	MOVLW	0x00
001652   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001654   6e09     movwf	0x9, 0             	MOVWF	r0x09
001656   0e00     movlw	0                  	MOVLW	0x00
001658   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00165a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00165c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00165e   ffe9
001660   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001662   fff3
001664   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001666   ecb3     call	0x3166, 0           	CALL	__gptrget2
001668   f018
00166a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00166c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00166e   f009
001670   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001672   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001674   e103     bnz	0x167c               	BNZ	_00166_DS_
001676   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001678   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00167a   e003     bz	0x1682                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
00167c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00167e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001680   d04e     bra	0x171e               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
001682   5000     movf	0, 0, 0             	MOVF	r0x00, W
001684   0f02     addlw	0x2                	ADDLW	0x02
001686   6e06     movwf	0x6, 0             	MOVWF	r0x06
001688   0e00     movlw	0                  	MOVLW	0x00
00168a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00168c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00168e   0e00     movlw	0                  	MOVLW	0x00
001690   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001692   6e08     movwf	0x8, 0             	MOVWF	r0x08
001694   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001696   ffe9
001698   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00169a   fff3
00169c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00169e   ecb3     call	0x3166, 0           	CALL	__gptrget2
0016a0   f018
0016a2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016a4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016a6   f007
0016a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016aa   0f02     addlw	0x2                	ADDLW	0x02
0016ac   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016ae   0e00     movlw	0                  	MOVLW	0x00
0016b0   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0016b2   6e09     movwf	0x9, 0             	MOVWF	r0x09
0016b4   0e00     movlw	0                  	MOVLW	0x00
0016b6   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016b8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0016ba   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0016bc   ffe9
0016be   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0016c0   fff3
0016c2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0016c4   ecb3     call	0x3166, 0           	CALL	__gptrget2
0016c6   f018
0016c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016ca   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0016cc   f009
0016ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0016d0   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0016d2   e103     bnz	0x16da               	BNZ	_00168_DS_
0016d4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016d6   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0016d8   e003     bz	0x16e0                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
0016da   6af3     clrf	0xf3, 0             	CLRF	PRODL
0016dc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0016de   d01f     bra	0x171e               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
0016e0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0016e2   ffe9
0016e4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0016e6   fff3
0016e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016ea   ecb3     call	0x3166, 0           	CALL	__gptrget2
0016ec   f018
0016ee   6e00     movwf	0, 0               	MOVWF	r0x00
0016f0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0016f2   f001
0016f4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0016f6   ffe9
0016f8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0016fa   fff3
0016fc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0016fe   ecb3     call	0x3166, 0           	CALL	__gptrget2
001700   f018
001702   6e03     movwf	0x3, 0             	MOVWF	r0x03
001704   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001706   f004
001708   5000     movf	0, 0, 0             	MOVF	r0x00, W
00170a   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
00170c   e103     bnz	0x1714               	BNZ	_00170_DS_
00170e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001710   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
001712   e003     bz	0x171a                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
001714   6af3     clrf	0xf3, 0             	CLRF	PRODL
001716   6ae8     clrf	0xe8, 0             	CLRF	WREG
001718   d002     bra	0x171e               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
00171a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00171c   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
00171e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001720   f00a
001722   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001724   f009
001726   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001728   f008
00172a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00172c   f007
00172e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001730   f006
001732   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001734   f005
001736   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001738   f004
00173a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00173c   f003
00173e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001740   f002
001742   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001744   f001
001746   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001748   f000
00174a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00174c   ffd9
00174e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
001b10   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b12   ffe5
001b14   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b16   ffd9
001b18   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b1a   ffe5
001b1c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001b1e   ffe5
001b20   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001b22   ffe5
001b24   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001b26   ffe5
001b28   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001b2a   ffe5
001b2c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001b2e   ffe5
001b30   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001b32   ffe5
001b34   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001b36   ffe5
001b38   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001b3a   ffe5
001b3c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001b3e   ffe5
001b40   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001b42   ffe5
001b44   0e02     movlw	0x2                	MOVLW	0x02
001b46   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001b48   f000
001b4a   0e03     movlw	0x3                	MOVLW	0x03
001b4c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001b4e   f001
001b50   0e04     movlw	0x4                	MOVLW	0x04
001b52   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001b54   f002
001b56   0e05     movlw	0x5                	MOVLW	0x05
001b58   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001b5a   f003
001b5c   0e06     movlw	0x6                	MOVLW	0x06
001b5e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001b60   f004
001b62   0e07     movlw	0x7                	MOVLW	0x07
001b64   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001b66   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001b68   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b6a   0f04     addlw	0x4                	ADDLW	0x04
001b6c   6e06     movwf	0x6, 0             	MOVWF	r0x06
001b6e   0e00     movlw	0                  	MOVLW	0x00
001b70   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001b72   6e07     movwf	0x7, 0             	MOVWF	r0x07
001b74   0e00     movlw	0                  	MOVLW	0x00
001b76   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001b78   6e08     movwf	0x8, 0             	MOVWF	r0x08
001b7a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001b7c   ffe9
001b7e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001b80   fff3
001b82   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001b84   ecb3     call	0x3166, 0           	CALL	__gptrget2
001b86   f018
001b88   6e06     movwf	0x6, 0             	MOVWF	r0x06
001b8a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001b8c   f007
001b8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b90   0f02     addlw	0x2                	ADDLW	0x02
001b92   6e08     movwf	0x8, 0             	MOVWF	r0x08
001b94   0e00     movlw	0                  	MOVLW	0x00
001b96   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001b98   6e09     movwf	0x9, 0             	MOVWF	r0x09
001b9a   0e00     movlw	0                  	MOVLW	0x00
001b9c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001b9e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001ba0   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001ba2   ffe9
001ba4   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001ba6   fff3
001ba8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001baa   ecb3     call	0x3166, 0           	CALL	__gptrget2
001bac   f018
001bae   6e08     movwf	0x8, 0             	MOVWF	r0x08
001bb0   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001bb2   f009
001bb4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001bb6   ffe9
001bb8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001bba   fff3
001bbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001bbe   ecb3     call	0x3166, 0           	CALL	__gptrget2
001bc0   f018
001bc2   6e00     movwf	0, 0               	MOVWF	r0x00
001bc4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001bc6   f001
001bc8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bcc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bd0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bd4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be0   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be4   0e2d     movlw	0x2d               	MOVLW	HIGH(__str_0)
001be6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be8   0ee4     movlw	0xe4               	MOVLW	LOW(__str_0)
001bea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001bee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001bf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf8   ec1d     call	0x223a, 0           	CALL	_sprintf
001bfa   f011
001bfc   0e0c     movlw	0xc                	MOVLW	0x0c
001bfe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c00   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001c02   f00a
001c04   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001c06   f009
001c08   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c0a   f008
001c0c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c0e   f007
001c10   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c12   f006
001c14   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c16   f005
001c18   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c1a   f004
001c1c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001c1e   f003
001c20   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001c22   f002
001c24   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001c26   f001
001c28   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001c2a   f000
001c2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c2e   ffd9
001c30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002ef6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002ef8   ffe5
002efa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002efc   ffd9
002efe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f00   ffe5
002f02   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f04   ffe5
002f06   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002f08   ffe5
002f0a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002f0c   ffe5
002f0e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002f10   ffe5
002f12   0e02     movlw	0x2                	MOVLW	0x02
002f14   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002f16   f000
002f18   0e03     movlw	0x3                	MOVLW	0x03
002f1a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002f1c   f001
002f1e   0e04     movlw	0x4                	MOVLW	0x04
002f20   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002f22   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002f24   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f26   ffe9
002f28   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002f2a   fff3
002f2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f2e   ecb3     call	0x3166, 0           	CALL	__gptrget2
002f30   f018
002f32   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f34   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002f36   f004
002f38   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002f3a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002f3c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002f3e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f42   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f46   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f4a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f52   ec05     call	0x280a, 0           	CALL	_set_hours
002f54   f014
002f56   0e05     movlw	0x5                	MOVLW	0x05
002f58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002f5a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f5c   f004
002f5e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f60   f003
002f62   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f64   f002
002f66   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002f68   f001
002f6a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002f6c   f000
002f6e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002f70   ffd9
002f72   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
0028c6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028c8   ffe5
0028ca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028cc   ffd9
0028ce   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028d0   ffe5
0028d2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028d4   ffe5
0028d6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028d8   ffe5
0028da   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028dc   ffe5
0028de   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028e0   ffe5
0028e2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0028e4   ffe5
0028e6   0e02     movlw	0x2                	MOVLW	0x02
0028e8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0028ea   f000
0028ec   0e03     movlw	0x3                	MOVLW	0x03
0028ee   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0028f0   f001
0028f2   0e04     movlw	0x4                	MOVLW	0x04
0028f4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0028f6   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
0028f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028fa   0f02     addlw	0x2                	ADDLW	0x02
0028fc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0028fe   0e00     movlw	0                  	MOVLW	0x00
002900   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002902   6e04     movwf	0x4, 0             	MOVWF	r0x04
002904   0e00     movlw	0                  	MOVLW	0x00
002906   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002908   6e05     movwf	0x5, 0             	MOVWF	r0x05
00290a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00290c   ffe9
00290e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002910   fff3
002912   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002914   ecb3     call	0x3166, 0           	CALL	__gptrget2
002916   f018
002918   6e03     movwf	0x3, 0             	MOVWF	r0x03
00291a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00291c   f004
00291e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002920   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002922   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002924   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002928   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00292a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00292e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002934   5000     movf	0, 0, 0             	MOVF	r0x00, W
002936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002938   ec3d     call	0x267a, 0           	CALL	_set_minutes
00293a   f013
00293c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00293e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002940   f004
002942   0e05     movlw	0x5                	MOVLW	0x05
002944   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002946   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002948   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
00294a   e00a     bz	0x2960                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
00294c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00294e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002950   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002952   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002954   5000     movf	0, 0, 0             	MOVF	r0x00, W
002956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002958   ec7b     call	0x2ef6, 0           	CALL	_add_hour
00295a   f017
00295c   0e03     movlw	0x3                	MOVLW	0x03
00295e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
002960   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002962   f005
002964   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002966   f004
002968   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00296a   f003
00296c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00296e   f002
002970   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002972   f001
002974   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002976   f000
002978   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00297a   ffd9
00297c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
00297e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002980   ffe5
002982   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002984   ffd9
002986   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002988   ffe5
00298a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00298c   ffe5
00298e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002990   ffe5
002992   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002994   ffe5
002996   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002998   ffe5
00299a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00299c   ffe5
00299e   0e02     movlw	0x2                	MOVLW	0x02
0029a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0029a2   f000
0029a4   0e03     movlw	0x3                	MOVLW	0x03
0029a6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029a8   f001
0029aa   0e04     movlw	0x4                	MOVLW	0x04
0029ac   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0029ae   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
0029b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029b2   0f04     addlw	0x4                	ADDLW	0x04
0029b4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029b6   0e00     movlw	0                  	MOVLW	0x00
0029b8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0029ba   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029bc   0e00     movlw	0                  	MOVLW	0x00
0029be   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0029c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029c2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0029c4   ffe9
0029c6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0029c8   fff3
0029ca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029cc   ecb3     call	0x3166, 0           	CALL	__gptrget2
0029ce   f018
0029d0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029d2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029d4   f004
0029d6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0029d8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0029da   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0029dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029f0   ecd9     call	0x25b2, 0           	CALL	_set_seconds
0029f2   f012
0029f4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029f6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029f8   f004
0029fa   0e05     movlw	0x5                	MOVLW	0x05
0029fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a00   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002a02   e00a     bz	0x2a18                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002a04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a08   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a10   ec63     call	0x28c6, 0           	CALL	_add_minute
002a12   f014
002a14   0e03     movlw	0x3                	MOVLW	0x03
002a16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002a18   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a1a   f005
002a1c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a1e   f004
002a20   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a22   f003
002a24   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a26   f002
002a28   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a2a   f001
002a2c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a2e   f000
002a30   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a32   ffd9
002a34   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
0025b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0025b4   ffe5
0025b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0025b8   ffd9
0025ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025bc   ffe5
0025be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0025c0   ffe5
0025c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0025c4   ffe5
0025c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0025c8   ffe5
0025ca   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0025cc   ffe5
0025ce   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0025d0   ffe5
0025d2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0025d4   ffe5
0025d6   0e02     movlw	0x2                	MOVLW	0x02
0025d8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025da   f000
0025dc   0e03     movlw	0x3                	MOVLW	0x03
0025de   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025e0   f001
0025e2   0e04     movlw	0x4                	MOVLW	0x04
0025e4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0025e6   f002
0025e8   0e05     movlw	0x5                	MOVLW	0x05
0025ea   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0025ec   f003
0025ee   0e06     movlw	0x6                	MOVLW	0x06
0025f0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0025f2   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
0025f4   0e00     movlw	0                  	MOVLW	0x00
0025f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025f8   0e3c     movlw	0x3c               	MOVLW	0x3c
0025fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002600   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002604   ec2a     call	0x2054, 0           	CALL	__divsint
002606   f010
002608   6e05     movwf	0x5, 0             	MOVWF	r0x05
00260a   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00260c   f006
00260e   0e04     movlw	0x4                	MOVLW	0x04
002610   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
002612   0e04     movlw	0x4                	MOVLW	0x04
002614   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002616   0e00     movlw	0                  	MOVLW	0x00
002618   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00261a   0e00     movlw	0                  	MOVLW	0x00
00261c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00261e   0e00     movlw	0                  	MOVLW	0x00
002620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002622   0e3c     movlw	0x3c               	MOVLW	0x3c
002624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002626   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00262c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262e   ec92     call	0x2324, 0           	CALL	__modsint
002630   f011
002632   6e03     movwf	0x3, 0             	MOVWF	r0x03
002634   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002636   f004
002638   0e04     movlw	0x4                	MOVLW	0x04
00263a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00263c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00263e   ffe5
002640   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002642   fff4
002644   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002646   ffe9
002648   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00264a   fff3
00264c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00264e   ecf4     call	0x31e8, 0           	CALL	__gptrput2
002650   f018
                                           ;	.line	42; src/newtime.c	return overflow;
002652   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002654   fff3
002656   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002658   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00265a   f006
00265c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00265e   f005
002660   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002662   f004
002664   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002666   f003
002668   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00266a   f002
00266c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00266e   f001
002670   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002672   f000
002674   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002676   ffd9
002678   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
00267a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00267c   ffe5
00267e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002680   ffd9
002682   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002684   ffe5
002686   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002688   ffe5
00268a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00268c   ffe5
00268e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002690   ffe5
002692   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002694   ffe5
002696   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002698   ffe5
00269a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00269c   ffe5
00269e   0e02     movlw	0x2                	MOVLW	0x02
0026a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0026a2   f000
0026a4   0e03     movlw	0x3                	MOVLW	0x03
0026a6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0026a8   f001
0026aa   0e04     movlw	0x4                	MOVLW	0x04
0026ac   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0026ae   f002
0026b0   0e05     movlw	0x5                	MOVLW	0x05
0026b2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0026b4   f003
0026b6   0e06     movlw	0x6                	MOVLW	0x06
0026b8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0026ba   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
0026bc   0e00     movlw	0                  	MOVLW	0x00
0026be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026c0   0e3c     movlw	0x3c               	MOVLW	0x3c
0026c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026cc   ec2a     call	0x2054, 0           	CALL	__divsint
0026ce   f010
0026d0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0026d2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0026d4   f006
0026d6   0e04     movlw	0x4                	MOVLW	0x04
0026d8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
0026da   0e02     movlw	0x2                	MOVLW	0x02
0026dc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0026de   0e00     movlw	0                  	MOVLW	0x00
0026e0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0026e2   0e00     movlw	0                  	MOVLW	0x00
0026e4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026e6   0e00     movlw	0                  	MOVLW	0x00
0026e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ea   0e3c     movlw	0x3c               	MOVLW	0x3c
0026ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026f2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026f6   ec92     call	0x2324, 0           	CALL	__modsint
0026f8   f011
0026fa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0026fc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0026fe   f004
002700   0e04     movlw	0x4                	MOVLW	0x04
002702   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002704   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002706   ffe5
002708   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00270a   fff4
00270c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00270e   ffe9
002710   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002712   fff3
002714   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002716   ecf4     call	0x31e8, 0           	CALL	__gptrput2
002718   f018
                                           ;	.line	36; src/newtime.c	return overflow;
00271a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00271c   fff3
00271e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002720   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002722   f006
002724   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002726   f005
002728   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00272a   f004
00272c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00272e   f003
002730   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002732   f002
002734   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002736   f001
002738   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00273a   f000
00273c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00273e   ffd9
002740   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
00280a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00280c   ffe5
00280e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002810   ffd9
002812   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002814   ffe5
002816   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002818   ffe5
00281a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00281c   ffe5
00281e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002820   ffe5
002822   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002824   ffe5
002826   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002828   ffe5
00282a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00282c   ffe5
00282e   0e02     movlw	0x2                	MOVLW	0x02
002830   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002832   f000
002834   0e03     movlw	0x3                	MOVLW	0x03
002836   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002838   f001
00283a   0e04     movlw	0x4                	MOVLW	0x04
00283c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00283e   f002
002840   0e05     movlw	0x5                	MOVLW	0x05
002842   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002844   f003
002846   0e06     movlw	0x6                	MOVLW	0x06
002848   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00284a   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
00284c   0e00     movlw	0                  	MOVLW	0x00
00284e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002850   0e18     movlw	0x18               	MOVLW	0x18
002852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002854   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002858   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00285a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285c   ec2a     call	0x2054, 0           	CALL	__divsint
00285e   f010
002860   6e05     movwf	0x5, 0             	MOVWF	r0x05
002862   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002864   f006
002866   0e04     movlw	0x4                	MOVLW	0x04
002868   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
00286a   0e00     movlw	0                  	MOVLW	0x00
00286c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00286e   0e18     movlw	0x18               	MOVLW	0x18
002870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002872   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002876   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00287a   ec92     call	0x2324, 0           	CALL	__modsint
00287c   f011
00287e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002880   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002882   f004
002884   0e04     movlw	0x4                	MOVLW	0x04
002886   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002888   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00288a   ffe5
00288c   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00288e   fff4
002890   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002892   ffe9
002894   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002896   fff3
002898   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00289a   ecf4     call	0x31e8, 0           	CALL	__gptrput2
00289c   f018
                                           ;	.line	30; src/newtime.c	return overflow;
00289e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028a0   fff3
0028a2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028a4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0028a6   f006
0028a8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0028aa   f005
0028ac   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028ae   f004
0028b0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028b2   f003
0028b4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028b6   f002
0028b8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028ba   f001
0028bc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028be   f000
0028c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028c2   ffd9
0028c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002408   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00240a   ffe5
00240c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00240e   ffd9
002410   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002412   ffe5
002414   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002416   ffe5
002418   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00241a   ffe5
00241c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00241e   ffe5
002420   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002422   ffe5
002424   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002426   ffe5
002428   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00242a   ffe5
00242c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00242e   ffe5
002430   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002432   ffe5
002434   0e02     movlw	0x2                	MOVLW	0x02
002436   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002438   f000
00243a   0e03     movlw	0x3                	MOVLW	0x03
00243c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00243e   f001
002440   0e04     movlw	0x4                	MOVLW	0x04
002442   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002444   f002
002446   0e05     movlw	0x5                	MOVLW	0x05
002448   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00244a   f003
00244c   0e06     movlw	0x6                	MOVLW	0x06
00244e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002450   f004
002452   0e07     movlw	0x7                	MOVLW	0x07
002454   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002456   f005
002458   0e08     movlw	0x8                	MOVLW	0x08
00245a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00245c   f006
00245e   0e09     movlw	0x9                	MOVLW	0x09
002460   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002462   f007
002464   0e0a     movlw	0xa                	MOVLW	0x0a
002466   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
002468   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
00246a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00246c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00246e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002470   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002472   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002476   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002478   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00247c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247e   ec05     call	0x280a, 0           	CALL	_set_hours
002480   f014
002482   0e05     movlw	0x5                	MOVLW	0x05
002484   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002486   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00248c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002490   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002492   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002494   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002496   5000     movf	0, 0, 0             	MOVF	r0x00, W
002498   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00249a   ec3d     call	0x267a, 0           	CALL	_set_minutes
00249c   f013
00249e   0e05     movlw	0x5                	MOVLW	0x05
0024a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
0024a2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0024a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024a6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0024a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b6   ecd9     call	0x25b2, 0           	CALL	_set_seconds
0024b8   f012
0024ba   0e05     movlw	0x5                	MOVLW	0x05
0024bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0024be   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0024c0   f008
0024c2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0024c4   f007
0024c6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0024c8   f006
0024ca   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0024cc   f005
0024ce   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0024d0   f004
0024d2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024d4   f003
0024d6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0024d8   f002
0024da   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0024dc   f001
0024de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0024e0   f000
0024e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024e4   ffd9
0024e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002d6c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d6e   ffe5
002d70   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d72   ffd9
002d74   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d76   ffe5
002d78   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d7a   ffe5
002d7c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d7e   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002d80   0e06     movlw	0x6                	MOVLW	0x06
002d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d84   ec23     call	0x1446, 0           	CALL	_malloc
002d86   f00a
002d88   6e00     movwf	0, 0               	MOVWF	r0x00
002d8a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002d8c   f001
002d8e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d92   6e01     movwf	0x1, 0             	MOVWF	r0x01
002d94   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d96   6e00     movwf	0, 0               	MOVWF	r0x00
002d98   0e80     movlw	0x80               	MOVLW	0x80
002d9a   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002d9c   0e00     movlw	0                  	MOVLW	0x00
002d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da0   0e00     movlw	0                  	MOVLW	0x00
002da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da4   0e00     movlw	0                  	MOVLW	0x00
002da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da8   0e00     movlw	0                  	MOVLW	0x00
002daa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dac   0e00     movlw	0                  	MOVLW	0x00
002dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002db0   0e00     movlw	0                  	MOVLW	0x00
002db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002db4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002db8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dbc   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dc0   ec04     call	0x2408, 0           	CALL	_time_set
002dc2   f012
002dc4   0e09     movlw	0x9                	MOVLW	0x09
002dc6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002dc8   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002dca   fff4
002dcc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002dce   fff3
002dd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dd2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002dd4   f002
002dd6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002dd8   f001
002dda   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ddc   f000
002dde   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002de0   ffd9
002de2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002de4   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002de6   6432     cpfsgt	0x32, 0           
002de8   253a     addwf	0x3a, 0, 0x1       
002dea   3230     rrcf	0x30, 0x1, 0        
002dec   3a64     swapf	0x64, 0x1, 0       
002dee   3025     rrcf	0x25, 0, 0          
002df0   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002df2   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
