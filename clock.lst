gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2013  01:09:26
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 01:09:26 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_clock
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _main
                                           	global _alarm_led
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef40     goto	0x1080              	GOTO	_highPriorityInterruptHandler
00000a   f008
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	47; src/clock.c	_time = time_create();
002c9c   ec4a     call	0x2a94, 0           	CALL	_time_create
002c9e   f015
002ca0   010f     movlb	0xf                	BANKSEL	__time
002ca2   6f59     movwf	0x59, 0x1          	MOVWF	__time, B
002ca4   cff3     movff	0xff3, 0xf5a       	MOVFF	PRODL, (__time + 1)
002ca6   ff5a
002ca8   cff4     movff	0xff4, 0xf5b       	MOVFF	PRODH, (__time + 2)
002caa   ff5b
                                           ;	.line	48; src/clock.c	_alarm = time_create();
002cac   ec4a     call	0x2a94, 0           	CALL	_time_create
002cae   f015
002cb0   010f     movlb	0xf                	BANKSEL	__alarm
002cb2   6f5c     movwf	0x5c, 0x1          	MOVWF	__alarm, B
002cb4   cff3     movff	0xff3, 0xf5d       	MOVFF	PRODL, (__alarm + 1)
002cb6   ff5d
002cb8   cff4     movff	0xff4, 0xf5e       	MOVFF	PRODH, (__alarm + 2)
002cba   ff5e
                                           ;	.line	50; src/clock.c	init();
002cbc   ec02     call	0x2e04, 0           	CALL	_init
002cbe   f017
002cc0   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	51; src/clock.c	init_clock(_time);
002cc2   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
002cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cc6   010f     movlb	0xf                	BANKSEL	(__time + 1)
002cc8   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
002cca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ccc   010f     movlb	0xf                	BANKSEL	__time
002cce   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
002cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cd2   ecf1     call	0x1be2, 0           	CALL	_init_clock
002cd4   f00d
002cd6   0e03     movlw	0x3                	MOVLW	0x03
002cd8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	52; src/clock.c	time_set(_alarm,0,0,5);
002cda   0e00     movlw	0                  	MOVLW	0x00
002cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cde   0e05     movlw	0x5                	MOVLW	0x05
002ce0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce2   0e00     movlw	0                  	MOVLW	0x00
002ce4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce6   0e00     movlw	0                  	MOVLW	0x00
002ce8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cea   0e00     movlw	0                  	MOVLW	0x00
002cec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cee   0e00     movlw	0                  	MOVLW	0x00
002cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf2   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
002cf4   515e     movf	0x5e, 0, 0x1        	MOVF	(__alarm + 2), W, B
002cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf8   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
002cfa   515d     movf	0x5d, 0, 0x1        	MOVF	(__alarm + 1), W, B
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   010f     movlb	0xf                	BANKSEL	__alarm
002d00   515c     movf	0x5c, 0, 0x1        	MOVF	__alarm, W, B
002d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d04   ec49     call	0x2092, 0           	CALL	_time_set
002d06   f010
002d08   0e09     movlw	0x9                	MOVLW	0x09
002d0a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	53; src/clock.c	update_display();
002d0c   ec69     call	0x28d2, 0           	CALL	_update_display
002d0e   f014
                                           ;	.line	54; src/clock.c	return 0;
002d10   6af3     clrf	0xf3, 0             	CLRF	PRODL
002d12   6ae8     clrf	0xe8, 0             	CLRF	WREG
002d14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	161; src/clock.c	void init(void){
002e04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e06   ffe5
002e08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e0a   ffd9
                                           ;	.line	163; src/clock.c	LCDInit();
002e0c   ec56     call	0xaac, 0            	CALL	_LCDInit
002e0e   f005
                                           ;	.line	166; src/clock.c	BUTTON0_TRIS = 1;
002e10   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	167; src/clock.c	BUTTON1_TRIS = 1;
002e12   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	170; src/clock.c	INTCONbits.GIE = 1;
002e14   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	171; src/clock.c	INTCONbits.PEIE = 1;
002e16   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	172; src/clock.c	RCONbits.IPEN = 1; 
002e18   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	175; src/clock.c	T0CONbits.TMR0ON = 0;
002e1a   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	178; src/clock.c	TMR0H = 0x00000000;
002e1c   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	179; src/clock.c	TMR0L = 0x00000000;
002e1e   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	182; src/clock.c	T0CONbits.T08BIT = 0;
002e20   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	185; src/clock.c	T0CONbits.T0CS = 0;
002e22   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	188; src/clock.c	T0CONbits.PSA = 1;
002e24   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	191; src/clock.c	INTCONbits.TMR0IE = 1;
002e26   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	194; src/clock.c	INTCON3bits.INT1IE = 1;
002e28   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	195; src/clock.c	INTCON3bits.INT3IE = 1;
002e2a   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	198; src/clock.c	LED0_TRIS = 0;
002e2c   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	199; src/clock.c	LED1_TRIS = 0;   
002e2e   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	200; src/clock.c	LED2_TRIS = 0;
002e30   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	201; src/clock.c	LED3_TRIS = 0;
002e32   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	204; src/clock.c	LED0_IO = 0; 
002e34   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	205; src/clock.c	LED1_IO = 0;
002e36   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	206; src/clock.c	LED2_IO = 0;
002e38   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	207; src/clock.c	LED3_IO = 1;
002e3a   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
002e3c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e3e   ffd9
002e40   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	123; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
001080   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001082   ffe5
001084   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001086   ffe5
001088   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00108a   ffe5
00108c   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00108e   ffe5
001090   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001092   ffe5
001094   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001096   ffe5
001098   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00109a   ffe5
00109c   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00109e   ffe5
0010a0   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0010a2   ffe5
0010a4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0010a6   ffe5
0010a8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0010aa   ffd9
0010ac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0010ae   ffe5
0010b0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010b2   ffe5
                                           ;	.line	124; src/clock.c	if(INTCON3bits.INT1F == 1){
0010b4   6a00     clrf	0, 0                	CLRF	r0x00
0010b6   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
0010b8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010bc   0a01     xorlw	0x1                	XORLW	0x01
0010be   e109     bnz	0x10d2               	BNZ	_00181_DS_
                                           ;	.line	125; src/clock.c	but2_pressed = 1;	
0010c0   0e01     movlw	0x1                	MOVLW	0x01
0010c2   010f     movlb	0xf                	BANKSEL	_but2_pressed
0010c4   6f56     movwf	0x56, 0x1          	MOVWF	_but2_pressed, B
0010c6   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
0010c8   6b57     clrf	0x57, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	126; src/clock.c	if(BUTTON0_IO);
0010ca   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010cc   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0010ce   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	127; src/clock.c	INTCON3bits.INT1F = 0; 
0010d0   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00181_DS_:
                                           ;	.line	130; src/clock.c	if(INTCON3bits.INT3F  == 1){
0010d2   6a00     clrf	0, 0                	CLRF	r0x00
0010d4   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
0010d6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010da   0a01     xorlw	0x1                	XORLW	0x01
0010dc   e109     bnz	0x10f0               	BNZ	_00183_DS_
                                           ;	.line	131; src/clock.c	but1_pressed = 1;	
0010de   0e01     movlw	0x1                	MOVLW	0x01
0010e0   010f     movlb	0xf                	BANKSEL	_but1_pressed
0010e2   6f54     movwf	0x54, 0x1          	MOVWF	_but1_pressed, B
0010e4   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
0010e6   6b55     clrf	0x55, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	132; src/clock.c	if(BUTTON1_IO);
0010e8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010ea   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0010ec   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	133; src/clock.c	INTCON3bits.INT3F = 0; 
0010ee   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00183_DS_:
                                           ;	.line	135; src/clock.c	if(INTCONbits.TMR0IF == 1) {
0010f0   6a00     clrf	0, 0                	CLRF	r0x00
0010f2   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0010f4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0010f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010f8   0a01     xorlw	0x1                	XORLW	0x01
0010fa   e001     bz	0x10fe                	BZ	_00212_DS_
0010fc   d06b     bra	0x11d4               	BRA	_00197_DS_
                                           _00212_DS_:
0010fe   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	136; src/clock.c	overflow_counter++;
001100   2b52     incf	0x52, 0x1, 0x1      	INCF	_overflow_counter, F, B
001102   e302     bnc	0x1108               	BNC	_10223_DS_
001104   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001106   2b53     incf	0x53, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10223_DS_:
001108   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	137; src/clock.c	if(overflow_counter == CYCLES/2){
00110a   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
00110c   0a2f     xorlw	0x2f               	XORLW	0x2f
00110e   e103     bnz	0x1116               	BNZ	_00213_DS_
001110   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001112   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
001114   e001     bz	0x1118                	BZ	_00214_DS_
                                           _00213_DS_:
001116   d003     bra	0x111e               	BRA	_00193_DS_
                                           _00214_DS_:
                                           ;	.line	138; src/clock.c	toggle_led();
001118   ec3c     call	0x2e78, 0           	CALL	_toggle_led
00111a   f017
00111c   d05a     bra	0x11d2               	BRA	_00194_DS_
                                           _00193_DS_:
00111e   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	139; src/clock.c	}else if(overflow_counter == CYCLES){
001120   5152     movf	0x52, 0, 0x1        	MOVF	_overflow_counter, W, B
001122   0a5e     xorlw	0x5e               	XORLW	0x5e
001124   e103     bnz	0x112c               	BNZ	_00215_DS_
001126   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001128   5153     movf	0x53, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
00112a   e001     bz	0x112e                	BZ	_00216_DS_
                                           _00215_DS_:
00112c   d052     bra	0x11d2               	BRA	_00194_DS_
                                           _00216_DS_:
00112e   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	140; src/clock.c	if(time_equals(_alarm,_time)){
001130   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
001132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001134   010f     movlb	0xf                	BANKSEL	(__time + 1)
001136   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
001138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113a   010f     movlb	0xf                	BANKSEL	__time
00113c   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
00113e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001140   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001142   515e     movf	0x5e, 0, 0x1        	MOVF	(__alarm + 2), W, B
001144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001146   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
001148   515d     movf	0x5d, 0, 0x1        	MOVF	(__alarm + 1), W, B
00114a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114c   010f     movlb	0xf                	BANKSEL	__alarm
00114e   515c     movf	0x5c, 0, 0x1        	MOVF	__alarm, W, B
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   ecc6     call	0x138c, 0           	CALL	_time_equals
001154   f009
001156   6e00     movwf	0, 0               	MOVWF	r0x00
001158   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00115a   f001
00115c   0e06     movlw	0x6                	MOVLW	0x06
00115e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001160   5000     movf	0, 0, 0             	MOVF	r0x00, W
001162   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001164   e005     bz	0x1170                	BZ	_00185_DS_
                                           ;	.line	141; src/clock.c	alarm_going_off = 1;
001166   0e01     movlw	0x1                	MOVLW	0x01
001168   010f     movlb	0xf                	BANKSEL	_alarm_going_off
00116a   6f4e     movwf	0x4e, 0x1          	MOVWF	_alarm_going_off, B
00116c   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
00116e   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00185_DS_:
001170   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	143; src/clock.c	if(alarm_going_off){
001172   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_going_off, W, B
001174   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001176   114f     iorwf	0x4f, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
001178   e017     bz	0x11a8                	BZ	_00189_DS_
00117a   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	144; src/clock.c	alarm_counter++;
00117c   2b50     incf	0x50, 0x1, 0x1      	INCF	_alarm_counter, F, B
00117e   e302     bnc	0x1184               	BNC	_20224_DS_
001180   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001182   2b51     incf	0x51, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20224_DS_:
                                           ;	.line	145; src/clock.c	alarm_led();
001184   ecbc     call	0x2d78, 0           	CALL	_alarm_led
001186   f016
001188   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	146; src/clock.c	if(alarm_counter==30){
00118a   5150     movf	0x50, 0, 0x1        	MOVF	_alarm_counter, W, B
00118c   0a1e     xorlw	0x1e               	XORLW	0x1e
00118e   e103     bnz	0x1196               	BNZ	_00217_DS_
001190   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001192   5151     movf	0x51, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001194   e001     bz	0x1198                	BZ	_00218_DS_
                                           _00217_DS_:
001196   d008     bra	0x11a8               	BRA	_00189_DS_
                                           _00218_DS_:
001198   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	147; src/clock.c	alarm_going_off =0;
00119a   6b4e     clrf	0x4e, 0x1           	CLRF	_alarm_going_off, B
00119c   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
00119e   6b4f     clrf	0x4f, 0x1           	CLRF	(_alarm_going_off + 1), B
0011a0   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	148; src/clock.c	alarm_counter = 0;
0011a2   6b50     clrf	0x50, 0x1           	CLRF	_alarm_counter, B
0011a4   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
0011a6   6b51     clrf	0x51, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00189_DS_:
0011a8   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	151; src/clock.c	overflow_counter = 0;
0011aa   6b52     clrf	0x52, 0x1           	CLRF	_overflow_counter, B
0011ac   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0011ae   6b53     clrf	0x53, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	152; src/clock.c	toggle_led();
0011b0   ec3c     call	0x2e78, 0           	CALL	_toggle_led
0011b2   f017
0011b4   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	153; src/clock.c	add_second(_time);
0011b6   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
0011b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ba   010f     movlb	0xf                	BANKSEL	(__time + 1)
0011bc   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
0011be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c0   010f     movlb	0xf                	BANKSEL	__time
0011c2   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
0011c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c6   ec04     call	0x2608, 0           	CALL	_add_second
0011c8   f013
0011ca   0e03     movlw	0x3                	MOVLW	0x03
0011cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	154; src/clock.c	update_display();
0011ce   ec69     call	0x28d2, 0           	CALL	_update_display
0011d0   f014
                                           _00194_DS_:
                                           ;	.line	156; src/clock.c	INTCONbits.TMR0IF = 0;
0011d2   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00197_DS_:
0011d4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011d6   f001
0011d8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011da   f000
0011dc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011de   ffd9
0011e0   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0011e2   fffb
0011e4   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0011e6   fffa
0011e8   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0011ea   ffea
0011ec   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0011ee   ffe9
0011f0   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0011f2   fff4
0011f4   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0011f6   fff3
0011f8   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0011fa   ffe0
0011fc   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0011fe   ffd8
001200   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001202   ffe8
001204   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	117; src/clock.c	char* to_double_digits(int value){
002a08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a0a   ffe5
002a0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a0e   ffd9
002a10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a12   ffe5
002a14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a16   ffe5
002a18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a1a   ffe5
002a1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a1e   ffe5
002a20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a22   ffe5
002a24   0e02     movlw	0x2                	MOVLW	0x02
002a26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a28   f000
002a2a   0e03     movlw	0x3                	MOVLW	0x03
002a2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a2e   f001
                                           ;	.line	119; src/clock.c	sprintf(buffer, "%02d", value);
002a30   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002a32   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a34   0e40     movlw	0x40               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002a36   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a38   0e80     movlw	0x80               	MOVLW	0x80
002a3a   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a40   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a44   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
002a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a48   0e29     movlw	0x29               	MOVLW	HIGH(__str_3)
002a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4c   0e6a     movlw	0x6a               	MOVLW	LOW(__str_3)
002a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a50   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a54   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a58   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5c   ec62     call	0x1ec4, 0           	CALL	_sprintf
002a5e   f00f
002a60   0e08     movlw	0x8                	MOVLW	0x08
002a62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	120; src/clock.c	return buffer;
002a64   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002a66   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a68   0e40     movlw	0x40               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002a6a   6e00     movwf	0, 0               	MOVWF	r0x00
002a6c   0e80     movlw	0x80               	MOVLW	0x80
002a6e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a70   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002a72   fff4
002a74   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002a76   fff3
002a78   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a7a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a7c   f004
002a7e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a80   f003
002a82   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a84   f002
002a86   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a88   f001
002a8a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a8c   f000
002a8e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a90   ffd9
002a92   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	106; src/clock.c	void display_string(BYTE pos, char* text){
0019d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0019d6   ffe5
0019d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0019da   ffd9
0019dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0019de   ffe5
0019e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0019e2   ffe5
0019e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0019e6   ffe5
0019e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0019ea   ffe5
0019ec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0019ee   ffe5
0019f0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0019f2   ffe5
0019f4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0019f6   ffe5
0019f8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0019fa   ffe5
0019fc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0019fe   ffe5
001a00   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001a02   ffe5
001a04   0e02     movlw	0x2                	MOVLW	0x02
001a06   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001a08   f000
001a0a   0e03     movlw	0x3                	MOVLW	0x03
001a0c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001a0e   f001
001a10   0e04     movlw	0x4                	MOVLW	0x04
001a12   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001a14   f002
001a16   0e05     movlw	0x5                	MOVLW	0x05
001a18   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001a1a   f003
                                           ;	.line	107; src/clock.c	BYTE        l = strlen(text);
001a1c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a28   eccf     call	0x2b9e, 0           	CALL	_strlen
001a2a   f015
001a2c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a2e   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001a30   f005
001a32   0e03     movlw	0x3                	MOVLW	0x03
001a34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	108; src/clock.c	BYTE      max = 32-pos;    
001a36   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a38   0820     sublw	0x20               	SUBLW	0x20
001a3a   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	109; src/clock.c	char       *d = (char*)&LCDText[pos];
001a3c   6a06     clrf	0x6, 0              	CLRF	r0x06
001a3e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001a40   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a42   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001a44   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001a46   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a48   6e06     movwf	0x6, 0             	MOVWF	r0x06
001a4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a4c   6e00     movwf	0, 0               	MOVWF	r0x00
001a4e   0e80     movlw	0x80               	MOVLW	0x80
001a50   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	111; src/clock.c	size_t      n = (l<max)?l:max;
001a52   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a54   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001a56   e302     bnc	0x1a5c               	BNC	_00165_DS_
001a58   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001a5a   f004
                                           _00165_DS_:
001a5c   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	112; src/clock.c	if (n != 0)
001a5e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a60   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001a62   e027     bz	0x1ab2                	BZ	_00161_DS_
                                           _00157_DS_:
                                           ;	.line	113; src/clock.c	while (n-- != 0)*d++ = *s++;
001a64   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001a66   f008
001a68   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001a6a   f009
001a6c   0eff     movlw	0xff               	MOVLW	0xff
001a6e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a70   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001a72   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001a74   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a76   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001a78   e01c     bz	0x1ab2                	BZ	_00161_DS_
001a7a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001a7c   ffe9
001a7e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001a80   fff3
001a82   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a84   ec80     call	0x2f00, 0           	CALL	__gptrget1
001a86   f017
001a88   6e08     movwf	0x8, 0             	MOVWF	r0x08
001a8a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001a8c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a8e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001a90   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a92   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001a94   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a96   ffe5
001a98   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a9a   ffe9
001a9c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001a9e   fff3
001aa0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001aa2   ecb7     call	0x2f6e, 0           	CALL	__gptrput1
001aa4   f017
001aa6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001aa8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aaa   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001aac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aae   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001ab0   d7d9     bra	0x1a64               	BRA	_00157_DS_
                                           _00161_DS_:
                                           ;	.line	114; src/clock.c	LCDUpdate();
001ab2   ec21     call	0x842, 0            	CALL	_LCDUpdate
001ab4   f004
001ab6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ab8   f009
001aba   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001abc   f008
001abe   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ac0   f007
001ac2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ac4   f006
001ac6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ac8   f005
001aca   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001acc   f004
001ace   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ad0   f003
001ad2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ad4   f002
001ad6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ad8   f001
001ada   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001adc   f000
001ade   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ae0   ffd9
001ae2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	88; src/clock.c	int get_input(int maxvalue, char *text){
000d08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d0a   ffe5
000d0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d0e   ffd9
000d10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d12   ffe5
000d14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d16   ffe5
000d18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d1a   ffe5
000d1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d1e   ffe5
000d20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d22   ffe5
000d24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d26   ffe5
000d28   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d2a   ffe5
000d2c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d2e   ffe5
000d30   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d32   ffe5
000d34   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000d36   ffe5
000d38   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000d3a   ffe5
000d3c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000d3e   ffe5
000d40   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000d42   ffe5
000d44   0e02     movlw	0x2                	MOVLW	0x02
000d46   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d48   f000
000d4a   0e03     movlw	0x3                	MOVLW	0x03
000d4c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d4e   f001
000d50   0e04     movlw	0x4                	MOVLW	0x04
000d52   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000d54   f002
000d56   0e05     movlw	0x5                	MOVLW	0x05
000d58   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000d5a   f003
000d5c   0e06     movlw	0x6                	MOVLW	0x06
000d5e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000d60   f004
                                           ;	.line	89; src/clock.c	BYTE length = strlen(text);
000d62   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   eccf     call	0x2b9e, 0           	CALL	_strlen
000d70   f015
000d72   6e05     movwf	0x5, 0             	MOVWF	r0x05
000d74   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000d76   f006
000d78   0e03     movlw	0x3                	MOVLW	0x03
000d7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	90; src/clock.c	int value = 0;
000d7c   6a06     clrf	0x6, 0              	CLRF	r0x06
000d7e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	91; src/clock.c	display_string(0, text);
000d80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8c   0e00     movlw	0                  	MOVLW	0x00
000d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d90   ecea     call	0x19d4, 0           	CALL	_display_string
000d92   f00c
000d94   0e04     movlw	0x4                	MOVLW	0x04
000d96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	92; src/clock.c	while(1)
000d98   2805     incf	0x5, 0, 0           	INCF	r0x05, W
000d9a   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00152_DS_:
                                           ;	.line	94; src/clock.c	DelayMs(10);
000d9c   0e68     movlw	0x68               	MOVLW	0x68
000d9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000da0   0e42     movlw	0x42               	MOVLW	0x42
000da2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000da4   6a05     clrf	0x5, 0              	CLRF	r0x05
000da6   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00137_DS_:
000da8   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
000daa   f009
000dac   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
000dae   f00a
000db0   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
000db2   f00b
000db4   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
000db6   f00c
000db8   0eff     movlw	0xff               	MOVLW	0xff
000dba   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000dbc   0eff     movlw	0xff               	MOVLW	0xff
000dbe   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000dc0   0eff     movlw	0xff               	MOVLW	0xff
000dc2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000dc4   0eff     movlw	0xff               	MOVLW	0xff
000dc6   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000dc8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000dca   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
000dcc   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
000dce   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
000dd0   e1eb     bnz	0xda8                	BNZ	_00137_DS_
                                           ;	.line	95; src/clock.c	if(read_and_clear(&but2_pressed)){
000dd2   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000dd4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dd6   0e56     movlw	0x56               	MOVLW	LOW(_but2_pressed)
000dd8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dda   0e80     movlw	0x80               	MOVLW	0x80
000ddc   6e05     movwf	0x5, 0             	MOVWF	r0x05
000dde   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dea   ec8e     call	0x2b1c, 0           	CALL	_read_and_clear
000dec   f015
000dee   6e03     movwf	0x3, 0             	MOVWF	r0x03
000df0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000df2   f004
000df4   0e03     movlw	0x3                	MOVLW	0x03
000df6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000df8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dfa   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000dfc   e006     bz	0xe0a                 	BZ	_00144_DS_
                                           ;	.line	96; src/clock.c	LCDErase();
000dfe   ecbc     call	0x2778, 0           	CALL	_LCDErase
000e00   f013
                                           ;	.line	97; src/clock.c	return value;
000e02   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
000e04   fff3
000e06   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e08   d042     bra	0xe8e                	BRA	_00150_DS_
                                           _00144_DS_:
                                           ;	.line	99; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000e0a   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000e0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e0e   0e54     movlw	0x54               	MOVLW	LOW(_but1_pressed)
000e10   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e12   0e80     movlw	0x80               	MOVLW	0x80
000e14   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e22   ec8e     call	0x2b1c, 0           	CALL	_read_and_clear
000e24   f015
000e26   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e28   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e2a   f004
000e2c   0e03     movlw	0x3                	MOVLW	0x03
000e2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e30   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e32   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000e34   e012     bz	0xe5a                 	BZ	_00146_DS_
                                           ;	.line	100; src/clock.c	value = (++value)%maxvalue;
000e36   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000e38   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e3a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
000e3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e40   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e44   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e48   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4c   ecd7     call	0x1fae, 0           	CALL	__modsint
000e4e   f00f
000e50   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e52   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
000e54   f007
000e56   0e04     movlw	0x4                	MOVLW	0x04
000e58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00146_DS_:
                                           ;	.line	102; src/clock.c	display_string(length + 1, to_double_digits(value));
000e5a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e62   ec04     call	0x2a08, 0           	CALL	_to_double_digits
000e64   f015
000e66   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e68   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000e6a   f004
000e6c   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
000e6e   f005
000e70   0e02     movlw	0x2                	MOVLW	0x02
000e72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e80   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e84   ecea     call	0x19d4, 0           	CALL	_display_string
000e86   f00c
000e88   0e04     movlw	0x4                	MOVLW	0x04
000e8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e8c   d787     bra	0xd9c                	BRA	_00152_DS_
                                           _00150_DS_:
000e8e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000e90   f00c
000e92   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000e94   f00b
000e96   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e98   f00a
000e9a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e9c   f009
000e9e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ea0   f008
000ea2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ea4   f007
000ea6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ea8   f006
000eaa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000eac   f005
000eae   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000eb0   f004
000eb2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000eb4   f003
000eb6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000eb8   f002
000eba   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ebc   f001
000ebe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ec0   f000
000ec2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ec4   ffd9
000ec6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	81; src/clock.c	int read_and_clear(int *variable){
002b1c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b1e   ffe5
002b20   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b22   ffd9
002b24   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b26   ffe5
002b28   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b2a   ffe5
002b2c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b2e   ffe5
002b30   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b32   ffe5
002b34   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b36   ffe5
002b38   0e02     movlw	0x2                	MOVLW	0x02
002b3a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b3c   f000
002b3e   0e03     movlw	0x3                	MOVLW	0x03
002b40   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b42   f001
002b44   0e04     movlw	0x4                	MOVLW	0x04
002b46   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002b48   f002
                                           ;	.line	82; src/clock.c	if(*variable){
002b4a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002b4c   ffe9
002b4e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002b50   fff3
002b52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b54   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
002b56   f017
002b58   6e03     movwf	0x3, 0             	MOVWF	r0x03
002b5a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002b5c   f004
002b5e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b60   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002b62   e00e     bz	0x2b80                	BZ	_00131_DS_
                                           ;	.line	83; src/clock.c	*variable = 0;
002b64   0e00     movlw	0                  	MOVLW	0x00
002b66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b68   0e00     movlw	0                  	MOVLW	0x00
002b6a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002b6c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002b6e   ffe9
002b70   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002b72   fff3
002b74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b76   ecab     call	0x2f56, 0           	CALL	__gptrput2
002b78   f017
                                           ;	.line	84; src/clock.c	return 1;
002b7a   6af3     clrf	0xf3, 0             	CLRF	PRODL
002b7c   0e01     movlw	0x1                	MOVLW	0x01
002b7e   d002     bra	0x2b84               	BRA	_00132_DS_
                                           _00131_DS_:
                                           ;	.line	86; src/clock.c	return 0;
002b80   6af3     clrf	0xf3, 0             	CLRF	PRODL
002b82   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00132_DS_:
002b84   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002b86   f004
002b88   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b8a   f003
002b8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b8e   f002
002b90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b92   f001
002b94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b96   f000
002b98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b9a   ffd9
002b9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_clock	code
                                           _init_clock:
                                           ;	.line	71; src/clock.c	void init_clock(time t){
001be2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001be4   ffe5
001be6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001be8   ffd9
001bea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bec   ffe5
001bee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bf0   ffe5
001bf2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bf4   ffe5
001bf6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bf8   ffe5
001bfa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bfc   ffe5
001bfe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001c00   ffe5
001c02   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001c04   ffe5
001c06   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001c08   ffe5
001c0a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001c0c   ffe5
001c0e   0e02     movlw	0x2                	MOVLW	0x02
001c10   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001c12   f000
001c14   0e03     movlw	0x3                	MOVLW	0x03
001c16   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001c18   f001
001c1a   0e04     movlw	0x4                	MOVLW	0x04
001c1c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001c1e   f002
                                           ;	.line	73; src/clock.c	h = get_input(24, "HOURS:");
001c20   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c24   0e29     movlw	0x29               	MOVLW	HIGH(__str_0)
001c26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c28   0e4e     movlw	0x4e               	MOVLW	LOW(__str_0)
001c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2c   0e00     movlw	0                  	MOVLW	0x00
001c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c30   0e18     movlw	0x18               	MOVLW	0x18
001c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c34   ec84     call	0xd08, 0            	CALL	_get_input
001c36   f006
001c38   6e03     movwf	0x3, 0             	MOVWF	r0x03
001c3a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001c3c   f004
001c3e   0e05     movlw	0x5                	MOVLW	0x05
001c40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	74; src/clock.c	m = get_input(60, "MINUTES:");
001c42   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001c44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c46   0e29     movlw	0x29               	MOVLW	HIGH(__str_1)
001c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4a   0e56     movlw	0x56               	MOVLW	LOW(__str_1)
001c4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4e   0e00     movlw	0                  	MOVLW	0x00
001c50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c52   0e3c     movlw	0x3c               	MOVLW	0x3c
001c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c56   ec84     call	0xd08, 0            	CALL	_get_input
001c58   f006
001c5a   6e05     movwf	0x5, 0             	MOVWF	r0x05
001c5c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001c5e   f006
001c60   0e05     movlw	0x5                	MOVLW	0x05
001c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	75; src/clock.c	s = get_input(60, "SECONDS:");
001c64   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c68   0e29     movlw	0x29               	MOVLW	HIGH(__str_2)
001c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6c   0e60     movlw	0x60               	MOVLW	LOW(__str_2)
001c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c70   0e00     movlw	0                  	MOVLW	0x00
001c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c74   0e3c     movlw	0x3c               	MOVLW	0x3c
001c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c78   ec84     call	0xd08, 0            	CALL	_get_input
001c7a   f006
001c7c   6e07     movwf	0x7, 0             	MOVWF	r0x07
001c7e   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
001c80   f008
001c82   0e05     movlw	0x5                	MOVLW	0x05
001c84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	76; src/clock.c	time_set(t,h,m,s);
001c86   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c92   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c96   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c9a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ca0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ca4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ca8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001caa   ec49     call	0x2092, 0           	CALL	_time_set
001cac   f010
001cae   0e09     movlw	0x9                	MOVLW	0x09
001cb0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	78; src/clock.c	T0CONbits.TMR0ON = 1;
001cb2   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001cb4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001cb6   f008
001cb8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001cba   f007
001cbc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001cbe   f006
001cc0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001cc2   f005
001cc4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001cc6   f004
001cc8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001cca   f003
001ccc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001cce   f002
001cd0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001cd2   f001
001cd4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cd6   f000
001cd8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cda   ffd9
001cdc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	66; src/clock.c	void alarm_led(void){
002d78   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d7a   ffe5
002d7c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d7e   ffd9
002d80   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d82   ffe5
                                           ;	.line	67; src/clock.c	LED1_IO^=1;
002d84   6a00     clrf	0, 0                	CLRF	r0x00
002d86   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
002d88   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002d8a   0e01     movlw	0x1                	MOVLW	0x01
002d8c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002d8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d90   0b01     andlw	0x1                	ANDLW	0x01
002d92   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d94   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002d96   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002d98   0bfd     andlw	0xfd               	ANDLW	0xfd
002d9a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002d9c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	68; src/clock.c	LED2_IO^=1;
002d9e   6a00     clrf	0, 0                	CLRF	r0x00
002da0   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
002da2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002da4   0e01     movlw	0x1                	MOVLW	0x01
002da6   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002da8   5000     movf	0, 0, 0             	MOVF	r0x00, W
002daa   0b01     andlw	0x1                	ANDLW	0x01
002dac   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002dae   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002db0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002db2   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002db4   0bfb     andlw	0xfb               	ANDLW	0xfb
002db6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002db8   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002dba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dbc   f000
002dbe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dc0   ffd9
002dc2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	62; src/clock.c	void toggle_led(void){
002e78   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e7a   ffe5
002e7c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e7e   ffd9
002e80   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e82   ffe5
                                           ;	.line	63; src/clock.c	LED0_IO^=1;
002e84   6a00     clrf	0, 0                	CLRF	r0x00
002e86   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
002e88   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002e8a   0e01     movlw	0x1                	MOVLW	0x01
002e8c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002e8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e90   0b01     andlw	0x1                	ANDLW	0x01
002e92   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002e94   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002e96   0bfe     andlw	0xfe               	ANDLW	0xfe
002e98   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002e9a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002e9c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e9e   f000
002ea0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ea2   ffd9
002ea4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	57; src/clock.c	void update_display(void){
0028d2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028d4   ffe5
0028d6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028d8   ffd9
0028da   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028dc   ffe5
0028de   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028e0   ffe5
0028e2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028e4   ffe5
                                           ;	.line	58; src/clock.c	time_print(_time, display_line);
0028e6   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
0028e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0028ea   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
0028ec   6e00     movwf	0, 0               	MOVWF	r0x00
0028ee   0e80     movlw	0x80               	MOVLW	0x80
0028f0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0028f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0028f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fe   010f     movlb	0xf                	BANKSEL	(__time + 2)
002900   515b     movf	0x5b, 0, 0x1        	MOVF	(__time + 2), W, B
002902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002904   010f     movlb	0xf                	BANKSEL	(__time + 1)
002906   515a     movf	0x5a, 0, 0x1        	MOVF	(__time + 1), W, B
002908   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00290a   010f     movlb	0xf                	BANKSEL	__time
00290c   5159     movf	0x59, 0, 0x1        	MOVF	__time, W, B
00290e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002910   eccc     call	0x1798, 0           	CALL	_time_print
002912   f00b
002914   0e06     movlw	0x6                	MOVLW	0x06
002916   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	59; src/clock.c	display_string(0, display_line);
002918   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00291a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00291c   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
00291e   6e00     movwf	0, 0               	MOVWF	r0x00
002920   0e80     movlw	0x80               	MOVLW	0x80
002922   6e02     movwf	0x2, 0             	MOVWF	r0x02
002924   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002928   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00292a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00292e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002930   0e00     movlw	0                  	MOVLW	0x00
002932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002934   ecea     call	0x19d4, 0           	CALL	_display_string
002936   f00c
002938   0e04     movlw	0x4                	MOVLW	0x04
00293a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00293c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00293e   f002
002940   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002942   f001
002944   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002946   f000
002948   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00294a   ffd9
00294c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00294e   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
002950   5255     movf	0x55, 0x1, 0        
002952   3a53     swapf	0x53, 0x1, 0       
002954   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
002956   494d     infsnz	0x4d, 0, 0x1      	DB	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x3a, 0x00
002958   554e     subfwb	0x4e, 0, 0x1      
00295a   4554     rlncf	0x54, 0, 0x1       
00295c   3a53     swapf	0x53, 0x1, 0       
00295e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
002960   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x3a, 0x00
002962   4f43     dcfsnz	0x43, 0x1, 0x1    
002964   444e     rlncf	0x4e, 0, 0         
002966   3a53     swapf	0x53, 0x1, 0       
002968   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
00296a   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
00296c   6432     cpfsgt	0x32, 0           
00296e   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2072 (0x0818) bytes ( 1.58%)
                                           ;           	 1036 (0x040c) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002778   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00277a   ffe5
00277c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00277e   ffd9
002780   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002782   ffe5
002784   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002786   ffe5
002788   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00278a   ffe5
00278c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00278e   ffe5
002790   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002792   ffe5
002794   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002796   ffe5
002798   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00279a   ffe5
00279c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00279e   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
0027a0   0e01     movlw	0x1                	MOVLW	0x01
0027a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a4   0e00     movlw	0                  	MOVLW	0x00
0027a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a8   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
0027aa   f016
0027ac   0e02     movlw	0x2                	MOVLW	0x02
0027ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0027b0   0e48     movlw	0x48               	MOVLW	0x48
0027b2   6e00     movwf	0, 0               	MOVWF	r0x00
0027b4   0e0d     movlw	0xd                	MOVLW	0x0d
0027b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0027ba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0027bc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0027be   f004
0027c0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027c2   f005
0027c4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027c6   f006
0027c8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027ca   f007
0027cc   0eff     movlw	0xff               	MOVLW	0xff
0027ce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027d0   0eff     movlw	0xff               	MOVLW	0xff
0027d2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0027d4   0eff     movlw	0xff               	MOVLW	0xff
0027d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027d8   0eff     movlw	0xff               	MOVLW	0xff
0027da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0027dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027de   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0027e0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0027e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0027e4   e1eb     bnz	0x27bc               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0027e6   0e00     movlw	0                  	MOVLW	0x00
0027e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ea   0e20     movlw	0x20               	MOVLW	0x20
0027ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ee   0e20     movlw	0x20               	MOVLW	0x20
0027f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0027f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027f6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0027f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027fa   ecb9     call	0x2172, 0           	CALL	_memset
0027fc   f010
0027fe   0e05     movlw	0x5                	MOVLW	0x05
002800   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002802   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002804   f007
002806   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002808   f006
00280a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280c   f005
00280e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002810   f004
002812   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002814   f003
002816   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002818   f002
00281a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281c   f001
00281e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002820   f000
002822   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002824   ffd9
002826   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000878   f016
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
00093a   f016
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000982   f016
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000a44   f016
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ecb9     call	0x2172, 0           	CALL	_memset
000aee   f010
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000bd6   f016
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000c1a   f016
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000c5e   f016
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ec8b     call	0x2d16, 0           	CALL	_LCDWrite
000ca2   f016
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002d16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d18   ffe5
002d1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d1c   ffd9
002d1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d20   ffe5
002d22   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d24   ffe5
002d26   0e02     movlw	0x2                	MOVLW	0x02
002d28   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d2a   f000
002d2c   0e03     movlw	0x3                	MOVLW	0x03
002d2e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d30   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002d32   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002d34   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002d36   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002d38   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002d3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d3c   0b01     andlw	0x1                	ANDLW	0x01
002d3e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d40   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002d42   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002d44   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002d46   0bfb     andlw	0xfb               	ANDLW	0xfb
002d48   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002d4a   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002d4c   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002d4e   ff8d
002d50   0000     nop                      	nop 
002d52   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002d54   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002d56   0000     nop                      	nop 
002d58   0000     nop                      	nop 
002d5a   0000     nop                      	nop 
002d5c   0000     nop                      	nop 
002d5e   0000     nop                      	nop 
002d60   0000     nop                      	nop 
002d62   0000     nop                      	nop 
002d64   0000     nop                      	nop 
002d66   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002d68   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002d6a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d6c   f001
002d6e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d70   f000
002d72   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d74   ffd9
002d76   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
00138c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00138e   ffe5
001390   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001392   ffd9
001394   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001396   ffe5
001398   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00139a   ffe5
00139c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00139e   ffe5
0013a0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0013a2   ffe5
0013a4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0013a6   ffe5
0013a8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0013aa   ffe5
0013ac   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0013ae   ffe5
0013b0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0013b2   ffe5
0013b4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0013b6   ffe5
0013b8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0013ba   ffe5
0013bc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0013be   ffe5
0013c0   0e02     movlw	0x2                	MOVLW	0x02
0013c2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0013c4   f000
0013c6   0e03     movlw	0x3                	MOVLW	0x03
0013c8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0013ca   f001
0013cc   0e04     movlw	0x4                	MOVLW	0x04
0013ce   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0013d0   f002
0013d2   0e05     movlw	0x5                	MOVLW	0x05
0013d4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0013d6   f003
0013d8   0e06     movlw	0x6                	MOVLW	0x06
0013da   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0013dc   f004
0013de   0e07     movlw	0x7                	MOVLW	0x07
0013e0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0013e2   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
0013e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013e6   0f04     addlw	0x4                	ADDLW	0x04
0013e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0013ea   0e00     movlw	0                  	MOVLW	0x00
0013ec   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0013ee   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013f0   0e00     movlw	0                  	MOVLW	0x00
0013f2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0013f4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0013f6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0013f8   ffe9
0013fa   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0013fc   fff3
0013fe   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001400   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001402   f017
001404   6e06     movwf	0x6, 0             	MOVWF	r0x06
001406   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001408   f007
00140a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00140c   0f04     addlw	0x4                	ADDLW	0x04
00140e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001410   0e00     movlw	0                  	MOVLW	0x00
001412   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001414   6e09     movwf	0x9, 0             	MOVWF	r0x09
001416   0e00     movlw	0                  	MOVLW	0x00
001418   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00141a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00141c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00141e   ffe9
001420   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001422   fff3
001424   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001426   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001428   f017
00142a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00142c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00142e   f009
001430   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001432   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001434   e103     bnz	0x143c               	BNZ	_00166_DS_
001436   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001438   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00143a   e003     bz	0x1442                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
00143c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00143e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001440   d04e     bra	0x14de               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
001442   5000     movf	0, 0, 0             	MOVF	r0x00, W
001444   0f02     addlw	0x2                	ADDLW	0x02
001446   6e06     movwf	0x6, 0             	MOVWF	r0x06
001448   0e00     movlw	0                  	MOVLW	0x00
00144a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00144c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00144e   0e00     movlw	0                  	MOVLW	0x00
001450   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001452   6e08     movwf	0x8, 0             	MOVWF	r0x08
001454   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001456   ffe9
001458   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00145a   fff3
00145c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00145e   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001460   f017
001462   6e06     movwf	0x6, 0             	MOVWF	r0x06
001464   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001466   f007
001468   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00146a   0f02     addlw	0x2                	ADDLW	0x02
00146c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00146e   0e00     movlw	0                  	MOVLW	0x00
001470   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001472   6e09     movwf	0x9, 0             	MOVWF	r0x09
001474   0e00     movlw	0                  	MOVLW	0x00
001476   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001478   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00147a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00147c   ffe9
00147e   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001480   fff3
001482   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001484   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001486   f017
001488   6e08     movwf	0x8, 0             	MOVWF	r0x08
00148a   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00148c   f009
00148e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001490   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001492   e103     bnz	0x149a               	BNZ	_00168_DS_
001494   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001496   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001498   e003     bz	0x14a0                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
00149a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00149c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00149e   d01f     bra	0x14de               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
0014a0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0014a2   ffe9
0014a4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0014a6   fff3
0014a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0014aa   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
0014ac   f017
0014ae   6e00     movwf	0, 0               	MOVWF	r0x00
0014b0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0014b2   f001
0014b4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0014b6   ffe9
0014b8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0014ba   fff3
0014bc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0014be   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
0014c0   f017
0014c2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0014c4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0014c6   f004
0014c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014ca   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0014cc   e103     bnz	0x14d4               	BNZ	_00170_DS_
0014ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014d0   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
0014d2   e003     bz	0x14da                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
0014d4   6af3     clrf	0xf3, 0             	CLRF	PRODL
0014d6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0014d8   d002     bra	0x14de               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
0014da   6af3     clrf	0xf3, 0             	CLRF	PRODL
0014dc   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0014de   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0014e0   f00a
0014e2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0014e4   f009
0014e6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0014e8   f008
0014ea   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0014ec   f007
0014ee   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0014f0   f006
0014f2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0014f4   f005
0014f6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0014f8   f004
0014fa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0014fc   f003
0014fe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001500   f002
001502   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001504   f001
001506   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001508   f000
00150a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00150c   ffd9
00150e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
001798   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00179a   ffe5
00179c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00179e   ffd9
0017a0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0017a2   ffe5
0017a4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0017a6   ffe5
0017a8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0017aa   ffe5
0017ac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0017ae   ffe5
0017b0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0017b2   ffe5
0017b4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0017b6   ffe5
0017b8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0017ba   ffe5
0017bc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017be   ffe5
0017c0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0017c2   ffe5
0017c4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0017c6   ffe5
0017c8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0017ca   ffe5
0017cc   0e02     movlw	0x2                	MOVLW	0x02
0017ce   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017d0   f000
0017d2   0e03     movlw	0x3                	MOVLW	0x03
0017d4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017d6   f001
0017d8   0e04     movlw	0x4                	MOVLW	0x04
0017da   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017dc   f002
0017de   0e05     movlw	0x5                	MOVLW	0x05
0017e0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0017e2   f003
0017e4   0e06     movlw	0x6                	MOVLW	0x06
0017e6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0017e8   f004
0017ea   0e07     movlw	0x7                	MOVLW	0x07
0017ec   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0017ee   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
0017f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017f2   0f04     addlw	0x4                	ADDLW	0x04
0017f4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0017f6   0e00     movlw	0                  	MOVLW	0x00
0017f8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0017fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0017fc   0e00     movlw	0                  	MOVLW	0x00
0017fe   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001800   6e08     movwf	0x8, 0             	MOVWF	r0x08
001802   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001804   ffe9
001806   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001808   fff3
00180a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00180c   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
00180e   f017
001810   6e06     movwf	0x6, 0             	MOVWF	r0x06
001812   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001814   f007
001816   5000     movf	0, 0, 0             	MOVF	r0x00, W
001818   0f02     addlw	0x2                	ADDLW	0x02
00181a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00181c   0e00     movlw	0                  	MOVLW	0x00
00181e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001820   6e09     movwf	0x9, 0             	MOVWF	r0x09
001822   0e00     movlw	0                  	MOVLW	0x00
001824   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001826   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001828   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00182a   ffe9
00182c   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00182e   fff3
001830   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001832   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001834   f017
001836   6e08     movwf	0x8, 0             	MOVWF	r0x08
001838   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00183a   f009
00183c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00183e   ffe9
001840   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001842   fff3
001844   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001846   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
001848   f017
00184a   6e00     movwf	0, 0               	MOVWF	r0x00
00184c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00184e   f001
001850   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001854   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001858   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00185a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00185e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001860   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001864   5000     movf	0, 0, 0             	MOVF	r0x00, W
001866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001868   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
00186a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00186c   0e2b     movlw	0x2b               	MOVLW	HIGH(__str_0)
00186e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001870   0e0c     movlw	0xc                	MOVLW	LOW(__str_0)
001872   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001874   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001878   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00187a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00187c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00187e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001880   ec62     call	0x1ec4, 0           	CALL	_sprintf
001882   f00f
001884   0e0c     movlw	0xc                	MOVLW	0x0c
001886   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001888   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00188a   f00a
00188c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00188e   f009
001890   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001892   f008
001894   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001896   f007
001898   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00189a   f006
00189c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00189e   f005
0018a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0018a2   f004
0018a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0018a6   f003
0018a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018aa   f002
0018ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018ae   f001
0018b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018b2   f000
0018b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018b6   ffd9
0018b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002c1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c20   ffe5
002c22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c24   ffd9
002c26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c28   ffe5
002c2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c2c   ffe5
002c2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002c30   ffe5
002c32   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002c34   ffe5
002c36   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002c38   ffe5
002c3a   0e02     movlw	0x2                	MOVLW	0x02
002c3c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c3e   f000
002c40   0e03     movlw	0x3                	MOVLW	0x03
002c42   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c44   f001
002c46   0e04     movlw	0x4                	MOVLW	0x04
002c48   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002c4a   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002c4c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002c4e   ffe9
002c50   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002c52   fff3
002c54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c56   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
002c58   f017
002c5a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002c5c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002c5e   f004
002c60   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002c62   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c64   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002c66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c6a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c72   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002c74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c76   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c7a   ec4a     call	0x2494, 0           	CALL	_set_hours
002c7c   f012
002c7e   0e05     movlw	0x5                	MOVLW	0x05
002c80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c82   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c84   f004
002c86   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c88   f003
002c8a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c8c   f002
002c8e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c90   f001
002c92   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c94   f000
002c96   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c98   ffd9
002c9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
002550   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002552   ffe5
002554   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002556   ffd9
002558   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00255a   ffe5
00255c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00255e   ffe5
002560   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002562   ffe5
002564   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002566   ffe5
002568   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00256a   ffe5
00256c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00256e   ffe5
002570   0e02     movlw	0x2                	MOVLW	0x02
002572   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002574   f000
002576   0e03     movlw	0x3                	MOVLW	0x03
002578   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00257a   f001
00257c   0e04     movlw	0x4                	MOVLW	0x04
00257e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002580   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002582   5000     movf	0, 0, 0             	MOVF	r0x00, W
002584   0f02     addlw	0x2                	ADDLW	0x02
002586   6e03     movwf	0x3, 0             	MOVWF	r0x03
002588   0e00     movlw	0                  	MOVLW	0x00
00258a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00258c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00258e   0e00     movlw	0                  	MOVLW	0x00
002590   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002592   6e05     movwf	0x5, 0             	MOVWF	r0x05
002594   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002596   ffe9
002598   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00259a   fff3
00259c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00259e   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
0025a0   f017
0025a2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025a4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025a6   f004
0025a8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0025aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0025ac   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0025ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c2   ec82     call	0x2304, 0           	CALL	_set_minutes
0025c4   f011
0025c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025c8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0025ca   f004
0025cc   0e05     movlw	0x5                	MOVLW	0x05
0025ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025d2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0025d4   e00a     bz	0x25ea                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0025d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e2   ec0f     call	0x2c1e, 0           	CALL	_add_hour
0025e4   f016
0025e6   0e03     movlw	0x3                	MOVLW	0x03
0025e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0025ea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0025ec   f005
0025ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0025f0   f004
0025f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0025f4   f003
0025f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0025f8   f002
0025fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025fc   f001
0025fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002600   f000
002602   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002604   ffd9
002606   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
002608   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00260a   ffe5
00260c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00260e   ffd9
002610   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002612   ffe5
002614   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002616   ffe5
002618   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00261a   ffe5
00261c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00261e   ffe5
002620   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002622   ffe5
002624   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002626   ffe5
002628   0e02     movlw	0x2                	MOVLW	0x02
00262a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00262c   f000
00262e   0e03     movlw	0x3                	MOVLW	0x03
002630   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002632   f001
002634   0e04     movlw	0x4                	MOVLW	0x04
002636   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002638   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
00263a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00263c   0f04     addlw	0x4                	ADDLW	0x04
00263e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002640   0e00     movlw	0                  	MOVLW	0x00
002642   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002644   6e04     movwf	0x4, 0             	MOVWF	r0x04
002646   0e00     movlw	0                  	MOVLW	0x00
002648   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00264a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00264c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00264e   ffe9
002650   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002652   fff3
002654   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002656   ec6a     call	0x2ed4, 0           	CALL	__gptrget2
002658   f017
00265a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00265c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00265e   f004
002660   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002662   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002664   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002666   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00266c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002672   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002676   5000     movf	0, 0, 0             	MOVF	r0x00, W
002678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267a   ec1e     call	0x223c, 0           	CALL	_set_seconds
00267c   f011
00267e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002680   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002682   f004
002684   0e05     movlw	0x5                	MOVLW	0x05
002686   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002688   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00268a   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
00268c   e00a     bz	0x26a2                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
00268e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002692   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002696   5000     movf	0, 0, 0             	MOVF	r0x00, W
002698   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00269a   eca8     call	0x2550, 0           	CALL	_add_minute
00269c   f012
00269e   0e03     movlw	0x3                	MOVLW	0x03
0026a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
0026a2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026a4   f005
0026a6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026a8   f004
0026aa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026ac   f003
0026ae   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026b0   f002
0026b2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026b4   f001
0026b6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026b8   f000
0026ba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026bc   ffd9
0026be   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
00223c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00223e   ffe5
002240   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002242   ffd9
002244   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002246   ffe5
002248   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00224a   ffe5
00224c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00224e   ffe5
002250   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002252   ffe5
002254   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002256   ffe5
002258   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00225a   ffe5
00225c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00225e   ffe5
002260   0e02     movlw	0x2                	MOVLW	0x02
002262   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002264   f000
002266   0e03     movlw	0x3                	MOVLW	0x03
002268   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226a   f001
00226c   0e04     movlw	0x4                	MOVLW	0x04
00226e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002270   f002
002272   0e05     movlw	0x5                	MOVLW	0x05
002274   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002276   f003
002278   0e06     movlw	0x6                	MOVLW	0x06
00227a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00227c   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
00227e   0e00     movlw	0                  	MOVLW	0x00
002280   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002282   0e3c     movlw	0x3c               	MOVLW	0x3c
002284   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002286   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002288   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00228a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00228c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00228e   ec6f     call	0x1cde, 0           	CALL	__divsint
002290   f00e
002292   6e05     movwf	0x5, 0             	MOVWF	r0x05
002294   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002296   f006
002298   0e04     movlw	0x4                	MOVLW	0x04
00229a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
00229c   0e04     movlw	0x4                	MOVLW	0x04
00229e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0022a0   0e00     movlw	0                  	MOVLW	0x00
0022a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022a4   0e00     movlw	0                  	MOVLW	0x00
0022a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022a8   0e00     movlw	0                  	MOVLW	0x00
0022aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ac   0e3c     movlw	0x3c               	MOVLW	0x3c
0022ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022b8   ecd7     call	0x1fae, 0           	CALL	__modsint
0022ba   f00f
0022bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022be   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0022c0   f004
0022c2   0e04     movlw	0x4                	MOVLW	0x04
0022c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0022c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0022c8   ffe5
0022ca   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0022cc   fff4
0022ce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0022d0   ffe9
0022d2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022d4   fff3
0022d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022d8   ecab     call	0x2f56, 0           	CALL	__gptrput2
0022da   f017
                                           ;	.line	42; src/newtime.c	return overflow;
0022dc   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0022de   fff3
0022e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0022e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0022e4   f006
0022e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0022e8   f005
0022ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0022ec   f004
0022ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0022f0   f003
0022f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0022f4   f002
0022f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0022f8   f001
0022fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0022fc   f000
0022fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002300   ffd9
002302   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
002304   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002306   ffe5
002308   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00230a   ffd9
00230c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00230e   ffe5
002310   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002312   ffe5
002314   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002316   ffe5
002318   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00231a   ffe5
00231c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00231e   ffe5
002320   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002322   ffe5
002324   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002326   ffe5
002328   0e02     movlw	0x2                	MOVLW	0x02
00232a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00232c   f000
00232e   0e03     movlw	0x3                	MOVLW	0x03
002330   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002332   f001
002334   0e04     movlw	0x4                	MOVLW	0x04
002336   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002338   f002
00233a   0e05     movlw	0x5                	MOVLW	0x05
00233c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00233e   f003
002340   0e06     movlw	0x6                	MOVLW	0x06
002342   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002344   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
002346   0e00     movlw	0                  	MOVLW	0x00
002348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234a   0e3c     movlw	0x3c               	MOVLW	0x3c
00234c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00234e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002352   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002356   ec6f     call	0x1cde, 0           	CALL	__divsint
002358   f00e
00235a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00235c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00235e   f006
002360   0e04     movlw	0x4                	MOVLW	0x04
002362   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002364   0e02     movlw	0x2                	MOVLW	0x02
002366   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002368   0e00     movlw	0                  	MOVLW	0x00
00236a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00236c   0e00     movlw	0                  	MOVLW	0x00
00236e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002370   0e00     movlw	0                  	MOVLW	0x00
002372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002374   0e3c     movlw	0x3c               	MOVLW	0x3c
002376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00237a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00237c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00237e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002380   ecd7     call	0x1fae, 0           	CALL	__modsint
002382   f00f
002384   6e03     movwf	0x3, 0             	MOVWF	r0x03
002386   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002388   f004
00238a   0e04     movlw	0x4                	MOVLW	0x04
00238c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00238e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002390   ffe5
002392   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002394   fff4
002396   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002398   ffe9
00239a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00239c   fff3
00239e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023a0   ecab     call	0x2f56, 0           	CALL	__gptrput2
0023a2   f017
                                           ;	.line	36; src/newtime.c	return overflow;
0023a4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0023a6   fff3
0023a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023aa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0023ac   f006
0023ae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0023b0   f005
0023b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023b4   f004
0023b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023b8   f003
0023ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023bc   f002
0023be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023c0   f001
0023c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0023c4   f000
0023c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0023c8   ffd9
0023ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002494   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002496   ffe5
002498   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00249a   ffd9
00249c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00249e   ffe5
0024a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024a2   ffe5
0024a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024a6   ffe5
0024a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024aa   ffe5
0024ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024ae   ffe5
0024b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024b2   ffe5
0024b4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024b6   ffe5
0024b8   0e02     movlw	0x2                	MOVLW	0x02
0024ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024bc   f000
0024be   0e03     movlw	0x3                	MOVLW	0x03
0024c0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024c2   f001
0024c4   0e04     movlw	0x4                	MOVLW	0x04
0024c6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024c8   f002
0024ca   0e05     movlw	0x5                	MOVLW	0x05
0024cc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024ce   f003
0024d0   0e06     movlw	0x6                	MOVLW	0x06
0024d2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024d4   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0024d6   0e00     movlw	0                  	MOVLW	0x00
0024d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024da   0e18     movlw	0x18               	MOVLW	0x18
0024dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e6   ec6f     call	0x1cde, 0           	CALL	__divsint
0024e8   f00e
0024ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
0024ec   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0024ee   f006
0024f0   0e04     movlw	0x4                	MOVLW	0x04
0024f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0024f4   0e00     movlw	0                  	MOVLW	0x00
0024f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f8   0e18     movlw	0x18               	MOVLW	0x18
0024fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002500   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002502   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002504   ecd7     call	0x1fae, 0           	CALL	__modsint
002506   f00f
002508   6e03     movwf	0x3, 0             	MOVWF	r0x03
00250a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00250c   f004
00250e   0e04     movlw	0x4                	MOVLW	0x04
002510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002512   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002514   ffe5
002516   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002518   fff4
00251a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00251c   ffe9
00251e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002520   fff3
002522   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002524   ecab     call	0x2f56, 0           	CALL	__gptrput2
002526   f017
                                           ;	.line	30; src/newtime.c	return overflow;
002528   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00252a   fff3
00252c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00252e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002530   f006
002532   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002534   f005
002536   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002538   f004
00253a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00253c   f003
00253e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002540   f002
002542   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002544   f001
002546   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002548   f000
00254a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00254c   ffd9
00254e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002092   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002094   ffe5
002096   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002098   ffd9
00209a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00209c   ffe5
00209e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020a0   ffe5
0020a2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0020a4   ffe5
0020a6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020a8   ffe5
0020aa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0020ac   ffe5
0020ae   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0020b0   ffe5
0020b2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0020b4   ffe5
0020b6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0020b8   ffe5
0020ba   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0020bc   ffe5
0020be   0e02     movlw	0x2                	MOVLW	0x02
0020c0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0020c2   f000
0020c4   0e03     movlw	0x3                	MOVLW	0x03
0020c6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0020c8   f001
0020ca   0e04     movlw	0x4                	MOVLW	0x04
0020cc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0020ce   f002
0020d0   0e05     movlw	0x5                	MOVLW	0x05
0020d2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0020d4   f003
0020d6   0e06     movlw	0x6                	MOVLW	0x06
0020d8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0020da   f004
0020dc   0e07     movlw	0x7                	MOVLW	0x07
0020de   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0020e0   f005
0020e2   0e08     movlw	0x8                	MOVLW	0x08
0020e4   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0020e6   f006
0020e8   0e09     movlw	0x9                	MOVLW	0x09
0020ea   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0020ec   f007
0020ee   0e0a     movlw	0xa                	MOVLW	0x0a
0020f0   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0020f2   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0020f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002100   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002104   5000     movf	0, 0, 0             	MOVF	r0x00, W
002106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002108   ec4a     call	0x2494, 0           	CALL	_set_hours
00210a   f012
00210c   0e05     movlw	0x5                	MOVLW	0x05
00210e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002110   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002114   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002118   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00211a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00211e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002120   5000     movf	0, 0, 0             	MOVF	r0x00, W
002122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002124   ec82     call	0x2304, 0           	CALL	_set_minutes
002126   f011
002128   0e05     movlw	0x5                	MOVLW	0x05
00212a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
00212c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00212e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002130   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002134   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002136   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002138   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00213a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00213e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002140   ec1e     call	0x223c, 0           	CALL	_set_seconds
002142   f011
002144   0e05     movlw	0x5                	MOVLW	0x05
002146   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002148   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00214a   f008
00214c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00214e   f007
002150   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002152   f006
002154   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002156   f005
002158   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00215a   f004
00215c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00215e   f003
002160   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002162   f002
002164   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002166   f001
002168   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00216a   f000
00216c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00216e   ffd9
002170   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002a94   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a96   ffe5
002a98   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a9a   ffd9
002a9c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a9e   ffe5
002aa0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002aa2   ffe5
002aa4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002aa6   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002aa8   0e06     movlw	0x6                	MOVLW	0x06
002aaa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aac   ec03     call	0x1206, 0           	CALL	_malloc
002aae   f009
002ab0   6e00     movwf	0, 0               	MOVWF	r0x00
002ab2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002ab4   f001
002ab6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002ab8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002aba   6e01     movwf	0x1, 0             	MOVWF	r0x01
002abc   5000     movf	0, 0, 0             	MOVF	r0x00, W
002abe   6e00     movwf	0, 0               	MOVWF	r0x00
002ac0   0e80     movlw	0x80               	MOVLW	0x80
002ac2   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002ac4   0e00     movlw	0                  	MOVLW	0x00
002ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac8   0e00     movlw	0                  	MOVLW	0x00
002aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002acc   0e00     movlw	0                  	MOVLW	0x00
002ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad0   0e00     movlw	0                  	MOVLW	0x00
002ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad4   0e00     movlw	0                  	MOVLW	0x00
002ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad8   0e00     movlw	0                  	MOVLW	0x00
002ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002adc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae8   ec49     call	0x2092, 0           	CALL	_time_set
002aea   f010
002aec   0e09     movlw	0x9                	MOVLW	0x09
002aee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002af0   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002af2   fff4
002af4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002af6   fff3
002af8   5000     movf	0, 0, 0             	MOVF	r0x00, W
002afa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002afc   f002
002afe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b00   f001
002b02   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b04   f000
002b06   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b08   ffd9
002b0a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002b0c   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002b0e   6432     cpfsgt	0x32, 0           
002b10   253a     addwf	0x3a, 0, 0x1       
002b12   3230     rrcf	0x30, 0x1, 0        
002b14   3a64     swapf	0x64, 0x1, 0       
002b16   3025     rrcf	0x25, 0, 0          
002b18   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002b1a   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
