gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2013  13:27:58
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 13:27:58 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _config_mode_clock
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_config
                                           	global _display_config_mode
                                           	global _init_time
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_mode_on
                                           	global _main
                                           	global _alarm_led
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           _config_mode_on	db	0x01, 0x00
                                           _config_mode_clock	db	0x01, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef83     goto	0x1306              	GOTO	_highPriorityInterruptHandler
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	71; src/clock.c	_time = time_create();
003178   ecd3     call	0x2da6, 0           	CALL	_time_create
00317a   f016
00317c   010f     movlb	0xf                	BANKSEL	__time
00317e   6f5d     movwf	0x5d, 0x1          	MOVWF	__time, B
003180   cff3     movff	0xff3, 0xf5e       	MOVFF	PRODL, (__time + 1)
003182   ff5e
003184   cff4     movff	0xff4, 0xf5f       	MOVFF	PRODH, (__time + 2)
003186   ff5f
                                           ;	.line	72; src/clock.c	_alarm = time_create();
003188   ecd3     call	0x2da6, 0           	CALL	_time_create
00318a   f016
00318c   010e     movlb	0xe                	BANKSEL	__alarm
00318e   6f40     movwf	0x40, 0x1          	MOVWF	__alarm, B
003190   cff3     movff	0xff3, 0xe41       	MOVFF	PRODL, (__alarm + 1)
003192   fe41
003194   cff4     movff	0xff4, 0xe42       	MOVFF	PRODH, (__alarm + 2)
003196   fe42
                                           ;	.line	74; src/clock.c	init();
003198   ec82     call	0x3104, 0           	CALL	_init
00319a   f018
                                           ;	.line	75; src/clock.c	init_config();
00319c   ec84     call	0xd08, 0            	CALL	_init_config
00319e   f006
                                           ;	.line	77; src/clock.c	T0CONbits.TMR0ON = 1;
0031a0   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	78; src/clock.c	update_display();
0031a2   ecc3     call	0x2186, 0           	CALL	_update_display
0031a4   f010
                                           ;	.line	79; src/clock.c	return 0;
0031a6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0031a8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0031aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	249; src/clock.c	void init(void){
003104   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003106   ffe5
003108   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00310a   ffd9
                                           ;	.line	251; src/clock.c	LCDInit();
00310c   ec56     call	0xaac, 0            	CALL	_LCDInit
00310e   f005
                                           ;	.line	254; src/clock.c	BUTTON0_TRIS = 1;
003110   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	255; src/clock.c	BUTTON1_TRIS = 1;
003112   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	258; src/clock.c	INTCONbits.GIE = 1;
003114   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	259; src/clock.c	INTCONbits.PEIE = 1;
003116   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	260; src/clock.c	RCONbits.IPEN = 1; 
003118   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	263; src/clock.c	T0CONbits.TMR0ON = 0;
00311a   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	266; src/clock.c	TMR0H = 0x00000000;
00311c   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	267; src/clock.c	TMR0L = 0x00000000;
00311e   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	270; src/clock.c	T0CONbits.T08BIT = 0;
003120   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	273; src/clock.c	T0CONbits.T0CS = 0;
003122   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	276; src/clock.c	T0CONbits.PSA = 1;
003124   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	279; src/clock.c	INTCONbits.TMR0IE = 1;
003126   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	282; src/clock.c	INTCON3bits.INT1IE = 1;
003128   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	283; src/clock.c	INTCON3bits.INT3IE = 1;
00312a   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	286; src/clock.c	LED0_TRIS = 0;
00312c   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	287; src/clock.c	LED1_TRIS = 0;   
00312e   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	288; src/clock.c	LED2_TRIS = 0;
003130   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	289; src/clock.c	LED3_TRIS = 0;
003132   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	292; src/clock.c	LED0_IO = 0; 
003134   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	293; src/clock.c	LED1_IO = 0;
003136   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	294; src/clock.c	LED2_IO = 0;
003138   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	295; src/clock.c	LED3_IO = 1;
00313a   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
00313c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00313e   ffd9
003140   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	211; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
001306   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001308   ffe5
00130a   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00130c   ffe5
00130e   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001310   ffe5
001312   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001314   ffe5
001316   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001318   ffe5
00131a   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00131c   ffe5
00131e   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001320   ffe5
001322   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001324   ffe5
001326   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
001328   ffe5
00132a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00132c   ffe5
00132e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001330   ffd9
001332   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001334   ffe5
001336   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001338   ffe5
                                           ;	.line	212; src/clock.c	if(INTCON3bits.INT1F == 1){
00133a   6a00     clrf	0, 0                	CLRF	r0x00
00133c   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
00133e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001340   5000     movf	0, 0, 0             	MOVF	r0x00, W
001342   0a01     xorlw	0x1                	XORLW	0x01
001344   e109     bnz	0x1358               	BNZ	_00221_DS_
                                           ;	.line	213; src/clock.c	but2_pressed = 1;	
001346   0e01     movlw	0x1                	MOVLW	0x01
001348   010f     movlb	0xf                	BANKSEL	_but2_pressed
00134a   6f49     movwf	0x49, 0x1          	MOVWF	_but2_pressed, B
00134c   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
00134e   6b4a     clrf	0x4a, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	214; src/clock.c	if(BUTTON0_IO);
001350   6ae8     clrf	0xe8, 0             	CLRF	WREG
001352   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
001354   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	215; src/clock.c	INTCON3bits.INT1F = 0; 
001356   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00221_DS_:
                                           ;	.line	218; src/clock.c	if(INTCON3bits.INT3F  == 1){
001358   6a00     clrf	0, 0                	CLRF	r0x00
00135a   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
00135c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00135e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001360   0a01     xorlw	0x1                	XORLW	0x01
001362   e109     bnz	0x1376               	BNZ	_00223_DS_
                                           ;	.line	219; src/clock.c	but1_pressed = 1;	
001364   0e01     movlw	0x1                	MOVLW	0x01
001366   010f     movlb	0xf                	BANKSEL	_but1_pressed
001368   6f47     movwf	0x47, 0x1          	MOVWF	_but1_pressed, B
00136a   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
00136c   6b48     clrf	0x48, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	220; src/clock.c	if(BUTTON1_IO);
00136e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001370   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
001372   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	221; src/clock.c	INTCON3bits.INT3F = 0; 
001374   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00223_DS_:
                                           ;	.line	223; src/clock.c	if(INTCONbits.TMR0IF == 1) {
001376   6a00     clrf	0, 0                	CLRF	r0x00
001378   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
00137a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00137c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00137e   0a01     xorlw	0x1                	XORLW	0x01
001380   e001     bz	0x1384                	BZ	_00252_DS_
001382   d06b     bra	0x145a               	BRA	_00237_DS_
                                           _00252_DS_:
001384   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	224; src/clock.c	overflow_counter++;
001386   2b45     incf	0x45, 0x1, 0x1      	INCF	_overflow_counter, F, B
001388   e302     bnc	0x138e               	BNC	_10263_DS_
00138a   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
00138c   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10263_DS_:
00138e   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	225; src/clock.c	if(overflow_counter == CYCLES/2){
001390   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
001392   0a2e     xorlw	0x2e               	XORLW	0x2e
001394   e103     bnz	0x139c               	BNZ	_00253_DS_
001396   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001398   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
00139a   e001     bz	0x139e                	BZ	_00254_DS_
                                           _00253_DS_:
00139c   d003     bra	0x13a4               	BRA	_00233_DS_
                                           _00254_DS_:
                                           ;	.line	226; src/clock.c	toggle_led();
00139e   ecd6     call	0x31ac, 0           	CALL	_toggle_led
0013a0   f018
0013a2   d05a     bra	0x1458               	BRA	_00234_DS_
                                           _00233_DS_:
0013a4   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	227; src/clock.c	}else if(overflow_counter == CYCLES){
0013a6   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
0013a8   0a5d     xorlw	0x5d               	XORLW	0x5d
0013aa   e103     bnz	0x13b2               	BNZ	_00255_DS_
0013ac   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013ae   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013b0   e001     bz	0x13b4                	BZ	_00256_DS_
                                           _00255_DS_:
0013b2   d052     bra	0x1458               	BRA	_00234_DS_
                                           _00256_DS_:
0013b4   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	228; src/clock.c	if(time_equals(_alarm,_time)){
0013b6   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
0013b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ba   010f     movlb	0xf                	BANKSEL	(__time + 1)
0013bc   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
0013be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c0   010f     movlb	0xf                	BANKSEL	__time
0013c2   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
0013c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c6   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
0013c8   5142     movf	0x42, 0, 0x1        	MOVF	(__alarm + 2), W, B
0013ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013cc   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
0013ce   5141     movf	0x41, 0, 0x1        	MOVF	(__alarm + 1), W, B
0013d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013d2   010e     movlb	0xe                	BANKSEL	__alarm
0013d4   5140     movf	0x40, 0, 0x1        	MOVF	__alarm, W, B
0013d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013d8   ec09     call	0x1612, 0           	CALL	_time_equals
0013da   f00b
0013dc   6e00     movwf	0, 0               	MOVWF	r0x00
0013de   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0013e0   f001
0013e2   0e06     movlw	0x6                	MOVLW	0x06
0013e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0013e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013e8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0013ea   e005     bz	0x13f6                	BZ	_00225_DS_
                                           ;	.line	229; src/clock.c	alarm_going_off = 1;
0013ec   0e01     movlw	0x1                	MOVLW	0x01
0013ee   010f     movlb	0xf                	BANKSEL	_alarm_going_off
0013f0   6f41     movwf	0x41, 0x1          	MOVWF	_alarm_going_off, B
0013f2   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0013f4   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00225_DS_:
0013f6   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	231; src/clock.c	if(alarm_going_off){
0013f8   5141     movf	0x41, 0, 0x1        	MOVF	_alarm_going_off, W, B
0013fa   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
0013fc   1142     iorwf	0x42, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
0013fe   e017     bz	0x142e                	BZ	_00229_DS_
001400   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	232; src/clock.c	alarm_counter++;
001402   2b43     incf	0x43, 0x1, 0x1      	INCF	_alarm_counter, F, B
001404   e302     bnc	0x140a               	BNC	_20264_DS_
001406   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001408   2b44     incf	0x44, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20264_DS_:
                                           ;	.line	233; src/clock.c	alarm_led();
00140a   ec3c     call	0x3078, 0           	CALL	_alarm_led
00140c   f018
00140e   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	234; src/clock.c	if(alarm_counter==30){
001410   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_counter, W, B
001412   0a1e     xorlw	0x1e               	XORLW	0x1e
001414   e103     bnz	0x141c               	BNZ	_00257_DS_
001416   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001418   5144     movf	0x44, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
00141a   e001     bz	0x141e                	BZ	_00258_DS_
                                           _00257_DS_:
00141c   d008     bra	0x142e               	BRA	_00229_DS_
                                           _00258_DS_:
00141e   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	235; src/clock.c	alarm_going_off =0;
001420   6b41     clrf	0x41, 0x1           	CLRF	_alarm_going_off, B
001422   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001424   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
001426   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	236; src/clock.c	alarm_counter = 0;
001428   6b43     clrf	0x43, 0x1           	CLRF	_alarm_counter, B
00142a   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
00142c   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00229_DS_:
00142e   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	239; src/clock.c	overflow_counter = 0;
001430   6b45     clrf	0x45, 0x1           	CLRF	_overflow_counter, B
001432   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001434   6b46     clrf	0x46, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	240; src/clock.c	toggle_led();
001436   ecd6     call	0x31ac, 0           	CALL	_toggle_led
001438   f018
00143a   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	241; src/clock.c	add_second(_time);
00143c   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
00143e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001440   010f     movlb	0xf                	BANKSEL	(__time + 1)
001442   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
001444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001446   010f     movlb	0xf                	BANKSEL	__time
001448   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
00144a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144c   ecdc     call	0x29b8, 0           	CALL	_add_second
00144e   f014
001450   0e03     movlw	0x3                	MOVLW	0x03
001452   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	242; src/clock.c	update_display();
001454   ecc3     call	0x2186, 0           	CALL	_update_display
001456   f010
                                           _00234_DS_:
                                           ;	.line	244; src/clock.c	INTCONbits.TMR0IF = 0;
001458   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00237_DS_:
00145a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00145c   f001
00145e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001460   f000
001462   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001464   ffd9
001466   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001468   fffb
00146a   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00146c   fffa
00146e   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001470   ffea
001472   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001474   ffe9
001476   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001478   fff4
00147a   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00147c   fff3
00147e   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001480   ffe0
001482   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001484   ffd8
001486   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001488   ffe8
00148a   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	205; src/clock.c	char* to_double_digits(int value){
002d1a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d1c   ffe5
002d1e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d20   ffd9
002d22   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d24   ffe5
002d26   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d28   ffe5
002d2a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d2c   ffe5
002d2e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002d30   ffe5
002d32   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002d34   ffe5
002d36   0e02     movlw	0x2                	MOVLW	0x02
002d38   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d3a   f000
002d3c   0e03     movlw	0x3                	MOVLW	0x03
002d3e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d40   f001
                                           ;	.line	207; src/clock.c	sprintf(buffer, "%02d", value);
002d42   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d44   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d46   0e43     movlw	0x43               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d48   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d4a   0e80     movlw	0x80               	MOVLW	0x80
002d4c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d52   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d56   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
002d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d5a   0e22     movlw	0x22               	MOVLW	HIGH(__str_9)
002d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d5e   0e6e     movlw	0x6e               	MOVLW	LOW(__str_9)
002d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d62   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d6e   ec3a     call	0x2274, 0           	CALL	_sprintf
002d70   f011
002d72   0e08     movlw	0x8                	MOVLW	0x08
002d74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	208; src/clock.c	return buffer;
002d76   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d78   6e01     movwf	0x1, 0             	MOVWF	r0x01
002d7a   0e43     movlw	0x43               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d7c   6e00     movwf	0, 0               	MOVWF	r0x00
002d7e   0e80     movlw	0x80               	MOVLW	0x80
002d80   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d82   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002d84   fff4
002d86   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002d88   fff3
002d8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d8c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002d8e   f004
002d90   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002d92   f003
002d94   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002d96   f002
002d98   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d9a   f001
002d9c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d9e   f000
002da0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002da2   ffd9
002da4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	194; src/clock.c	void display_string(BYTE pos, char* text){
001d92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d94   ffe5
001d96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d98   ffd9
001d9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d9c   ffe5
001d9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001da0   ffe5
001da2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001da4   ffe5
001da6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001da8   ffe5
001daa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001dac   ffe5
001dae   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001db0   ffe5
001db2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001db4   ffe5
001db6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001db8   ffe5
001dba   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001dbc   ffe5
001dbe   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001dc0   ffe5
001dc2   0e02     movlw	0x2                	MOVLW	0x02
001dc4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001dc6   f000
001dc8   0e03     movlw	0x3                	MOVLW	0x03
001dca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001dcc   f001
001dce   0e04     movlw	0x4                	MOVLW	0x04
001dd0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001dd2   f002
001dd4   0e05     movlw	0x5                	MOVLW	0x05
001dd6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001dd8   f003
                                           ;	.line	195; src/clock.c	BYTE        l = strlen(text);
001dda   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001de2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001de6   ec58     call	0x2eb0, 0           	CALL	_strlen
001de8   f017
001dea   6e04     movwf	0x4, 0             	MOVWF	r0x04
001dec   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001dee   f005
001df0   0e03     movlw	0x3                	MOVLW	0x03
001df2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	196; src/clock.c	BYTE      max = 32-pos;    
001df4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df6   0820     sublw	0x20               	SUBLW	0x20
001df8   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	197; src/clock.c	char       *d = (char*)&LCDText[pos];
001dfa   6a06     clrf	0x6, 0              	CLRF	r0x06
001dfc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001dfe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e00   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e02   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001e04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001e06   6e06     movwf	0x6, 0             	MOVWF	r0x06
001e08   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e0a   6e00     movwf	0, 0               	MOVWF	r0x00
001e0c   0e80     movlw	0x80               	MOVLW	0x80
001e0e   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	199; src/clock.c	size_t      n = (l<max)?l:max;
001e10   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e12   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001e14   e302     bnc	0x1e1a               	BNC	_00205_DS_
001e16   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001e18   f004
                                           _00205_DS_:
001e1a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	200; src/clock.c	if (n != 0)
001e1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e1e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001e20   e027     bz	0x1e70                	BZ	_00201_DS_
                                           _00197_DS_:
                                           ;	.line	201; src/clock.c	while (n-- != 0)*d++ = *s++;
001e22   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001e24   f008
001e26   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001e28   f009
001e2a   0eff     movlw	0xff               	MOVLW	0xff
001e2c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001e2e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e30   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001e32   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001e34   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001e36   e01c     bz	0x1e70                	BZ	_00201_DS_
001e38   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001e3a   ffe9
001e3c   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001e3e   fff3
001e40   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e42   ec1a     call	0x3234, 0           	CALL	__gptrget1
001e44   f019
001e46   6e08     movwf	0x8, 0             	MOVWF	r0x08
001e48   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e4c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001e4e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e50   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001e52   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e54   ffe5
001e56   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e58   ffe9
001e5a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001e5c   fff3
001e5e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001e60   ec51     call	0x32a2, 0           	CALL	__gptrput1
001e62   f019
001e64   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001e66   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e68   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001e6a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e6c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001e6e   d7d9     bra	0x1e22               	BRA	_00197_DS_
                                           _00201_DS_:
                                           ;	.line	202; src/clock.c	LCDUpdate();
001e70   ec21     call	0x842, 0            	CALL	_LCDUpdate
001e72   f004
001e74   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001e76   f009
001e78   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001e7a   f008
001e7c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e7e   f007
001e80   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e82   f006
001e84   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e86   f005
001e88   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e8a   f004
001e8c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e8e   f003
001e90   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e92   f002
001e94   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e96   f001
001e98   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e9a   f000
001e9c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e9e   ffd9
001ea0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	170; src/clock.c	int get_input(int maxvalue, char *text, char *mode){
000f58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f5a   ffe5
000f5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f5e   ffd9
000f60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f62   ffe5
000f64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f66   ffe5
000f68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f6a   ffe5
000f6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f6e   ffe5
000f70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f72   ffe5
000f74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f76   ffe5
000f78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000f7a   ffe5
000f7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000f7e   ffe5
000f80   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000f82   ffe5
000f84   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000f86   ffe5
000f88   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000f8a   ffe5
000f8c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000f8e   ffe5
000f90   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000f92   ffe5
000f94   0e02     movlw	0x2                	MOVLW	0x02
000f96   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000f98   f000
000f9a   0e03     movlw	0x3                	MOVLW	0x03
000f9c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000f9e   f001
000fa0   0e04     movlw	0x4                	MOVLW	0x04
000fa2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000fa4   f002
000fa6   0e05     movlw	0x5                	MOVLW	0x05
000fa8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000faa   f003
000fac   0e06     movlw	0x6                	MOVLW	0x06
000fae   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000fb0   f004
000fb2   0e07     movlw	0x7                	MOVLW	0x07
000fb4   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000fb6   f005
000fb8   0e08     movlw	0x8                	MOVLW	0x08
000fba   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000fbc   f006
000fbe   0e09     movlw	0x9                	MOVLW	0x09
000fc0   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000fc2   f007
                                           ;	.line	171; src/clock.c	BYTE length = strlen(text);
000fc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd0   ec58     call	0x2eb0, 0           	CALL	_strlen
000fd2   f017
000fd4   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fd6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000fd8   f009
000fda   0e03     movlw	0x3                	MOVLW	0x03
000fdc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; src/clock.c	int value = 0;
000fde   6a09     clrf	0x9, 0              	CLRF	r0x09
000fe0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	173; src/clock.c	display_string(START_FIRST_LINE , mode);
000fe2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fe4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fe8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fee   0e00     movlw	0                  	MOVLW	0x00
000ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff2   ecc9     call	0x1d92, 0           	CALL	_display_string
000ff4   f00e
000ff6   0e04     movlw	0x4                	MOVLW	0x04
000ff8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	174; src/clock.c	display_string(START_SECOND_LINE, text);
000ffa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ffc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001000   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001002   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001004   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001006   0e10     movlw	0x10               	MOVLW	0x10
001008   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100a   ecc9     call	0x1d92, 0           	CALL	_display_string
00100c   f00e
00100e   0e04     movlw	0x4                	MOVLW	0x04
001010   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	175; src/clock.c	while(1)
001012   0e11     movlw	0x11               	MOVLW	0x11
001014   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
001016   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00190_DS_:
001018   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	178; src/clock.c	if(config_mode_on){
00101a   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
00101c   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
00101e   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001020   e0fb     bz	0x1018                	BZ	_00190_DS_
                                           ;	.line	179; src/clock.c	DelayMs(10);
001022   0e68     movlw	0x68               	MOVLW	0x68
001024   6e03     movwf	0x3, 0             	MOVWF	r0x03
001026   0e42     movlw	0x42               	MOVLW	0x42
001028   6e04     movwf	0x4, 0             	MOVWF	r0x04
00102a   6a05     clrf	0x5, 0              	CLRF	r0x05
00102c   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00177_DS_:
00102e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001030   f007
001032   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001034   f008
001036   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
001038   f00b
00103a   c006     movff	0x6, 0xc           	MOVFF	r0x06, r0x0c
00103c   f00c
00103e   0eff     movlw	0xff               	MOVLW	0xff
001040   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001042   0eff     movlw	0xff               	MOVLW	0xff
001044   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001046   0eff     movlw	0xff               	MOVLW	0xff
001048   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00104a   0eff     movlw	0xff               	MOVLW	0xff
00104c   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00104e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001050   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001052   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
001054   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
001056   e1eb     bnz	0x102e               	BNZ	_00177_DS_
                                           ;	.line	180; src/clock.c	if(read_and_clear(&but2_pressed)){
001058   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
00105a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00105c   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
00105e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001060   0e80     movlw	0x80               	MOVLW	0x80
001062   6e05     movwf	0x5, 0             	MOVWF	r0x05
001064   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001066   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001068   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00106a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00106e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001070   ec17     call	0x2e2e, 0           	CALL	_read_and_clear
001072   f017
001074   6e03     movwf	0x3, 0             	MOVWF	r0x03
001076   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001078   f004
00107a   0e03     movlw	0x3                	MOVLW	0x03
00107c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00107e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001080   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
001082   e006     bz	0x1090                	BZ	_00184_DS_
                                           ;	.line	181; src/clock.c	LCDErase();
001084   ec94     call	0x2b28, 0           	CALL	_LCDErase
001086   f015
                                           ;	.line	182; src/clock.c	return value;
001088   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
00108a   fff3
00108c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00108e   d042     bra	0x1114               	BRA	_00192_DS_
                                           _00184_DS_:
                                           ;	.line	184; src/clock.c	if(read_and_clear(&but1_pressed)){ 
001090   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
001092   6e04     movwf	0x4, 0             	MOVWF	r0x04
001094   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
001096   6e03     movwf	0x3, 0             	MOVWF	r0x03
001098   0e80     movlw	0x80               	MOVLW	0x80
00109a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00109c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00109e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a8   ec17     call	0x2e2e, 0           	CALL	_read_and_clear
0010aa   f017
0010ac   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010ae   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0010b0   f004
0010b2   0e03     movlw	0x3                	MOVLW	0x03
0010b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010b8   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010ba   e012     bz	0x10e0                	BZ	_00186_DS_
                                           ;	.line	185; src/clock.c	value = (++value)%maxvalue;
0010bc   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0010be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010c0   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0010c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ca   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ce   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d2   ecaf     call	0x235e, 0           	CALL	__modsint
0010d4   f011
0010d6   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010d8   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
0010da   f00a
0010dc   0e04     movlw	0x4                	MOVLW	0x04
0010de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00186_DS_:
                                           ;	.line	187; src/clock.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
0010e0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e8   ec8d     call	0x2d1a, 0           	CALL	_to_double_digits
0010ea   f016
0010ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010ee   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0010f0   f004
0010f2   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0010f4   f005
0010f6   0e02     movlw	0x2                	MOVLW	0x02
0010f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001102   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001106   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   ecc9     call	0x1d92, 0           	CALL	_display_string
00110c   f00e
00110e   0e04     movlw	0x4                	MOVLW	0x04
001110   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001112   d782     bra	0x1018               	BRA	_00190_DS_
                                           _00192_DS_:
001114   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001116   f00c
001118   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00111a   f00b
00111c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00111e   f00a
001120   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001122   f009
001124   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001126   f008
001128   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00112a   f007
00112c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00112e   f006
001130   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001132   f005
001134   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001136   f004
001138   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00113a   f003
00113c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00113e   f002
001140   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001142   f001
001144   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001146   f000
001148   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00114a   ffd9
00114c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	163; src/clock.c	int read_and_clear(int *variable){
002e2e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e30   ffe5
002e32   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e34   ffd9
002e36   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e38   ffe5
002e3a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e3c   ffe5
002e3e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e40   ffe5
002e42   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e44   ffe5
002e46   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e48   ffe5
002e4a   0e02     movlw	0x2                	MOVLW	0x02
002e4c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002e4e   f000
002e50   0e03     movlw	0x3                	MOVLW	0x03
002e52   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002e54   f001
002e56   0e04     movlw	0x4                	MOVLW	0x04
002e58   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002e5a   f002
                                           ;	.line	164; src/clock.c	if(*variable){
002e5c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002e5e   ffe9
002e60   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e62   fff3
002e64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e66   ec04     call	0x3208, 0           	CALL	__gptrget2
002e68   f019
002e6a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002e6c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002e6e   f004
002e70   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e72   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002e74   e00e     bz	0x2e92                	BZ	_00171_DS_
                                           ;	.line	165; src/clock.c	*variable = 0;
002e76   0e00     movlw	0                  	MOVLW	0x00
002e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e7a   0e00     movlw	0                  	MOVLW	0x00
002e7c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002e7e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002e80   ffe9
002e82   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e84   fff3
002e86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e88   ec45     call	0x328a, 0           	CALL	__gptrput2
002e8a   f019
                                           ;	.line	166; src/clock.c	return 1;
002e8c   6af3     clrf	0xf3, 0             	CLRF	PRODL
002e8e   0e01     movlw	0x1                	MOVLW	0x01
002e90   d002     bra	0x2e96               	BRA	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	168; src/clock.c	return 0;
002e92   6af3     clrf	0xf3, 0             	CLRF	PRODL
002e94   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00172_DS_:
002e96   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002e98   f004
002e9a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002e9c   f003
002e9e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002ea0   f002
002ea2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ea4   f001
002ea6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ea8   f000
002eaa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002eac   ffd9
002eae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	155; src/clock.c	void init_time(time t, char *mode){ 
0018fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0018fc   ffe5
0018fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001900   ffd9
001902   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001904   ffe5
001906   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001908   ffe5
00190a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00190c   ffe5
00190e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001910   ffe5
001912   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001914   ffe5
001916   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001918   ffe5
00191a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00191c   ffe5
00191e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001920   ffe5
001922   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001924   ffe5
001926   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001928   ffe5
00192a   0e02     movlw	0x2                	MOVLW	0x02
00192c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00192e   f000
001930   0e03     movlw	0x3                	MOVLW	0x03
001932   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001934   f001
001936   0e04     movlw	0x4                	MOVLW	0x04
001938   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00193a   f002
00193c   0e05     movlw	0x5                	MOVLW	0x05
00193e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001940   f003
001942   0e06     movlw	0x6                	MOVLW	0x06
001944   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001946   f004
001948   0e07     movlw	0x7                	MOVLW	0x07
00194a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00194c   f005
                                           ;	.line	157; src/clock.c	h = get_input(24, "Hours:", mode);
00194e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001952   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001956   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00195a   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
00195c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00195e   0e22     movlw	0x22               	MOVLW	HIGH(__str_6)
001960   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001962   0e52     movlw	0x52               	MOVLW	LOW(__str_6)
001964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001966   0e00     movlw	0                  	MOVLW	0x00
001968   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00196a   0e18     movlw	0x18               	MOVLW	0x18
00196c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00196e   ecac     call	0xf58, 0            	CALL	_get_input
001970   f007
001972   6e06     movwf	0x6, 0             	MOVWF	r0x06
001974   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001976   f007
001978   0e08     movlw	0x8                	MOVLW	0x08
00197a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	158; src/clock.c	m = get_input(60, "Minutes:", mode);
00197c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00197e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001980   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001984   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001988   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
00198a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00198c   0e22     movlw	0x22               	MOVLW	HIGH(__str_7)
00198e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001990   0e5a     movlw	0x5a               	MOVLW	LOW(__str_7)
001992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001994   0e00     movlw	0                  	MOVLW	0x00
001996   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001998   0e3c     movlw	0x3c               	MOVLW	0x3c
00199a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199c   ecac     call	0xf58, 0            	CALL	_get_input
00199e   f007
0019a0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019a2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0019a4   f009
0019a6   0e08     movlw	0x8                	MOVLW	0x08
0019a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; src/clock.c	s = get_input(60, "Seconds:", mode);
0019aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b6   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
0019b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ba   0e22     movlw	0x22               	MOVLW	HIGH(__str_8)
0019bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019be   0e64     movlw	0x64               	MOVLW	LOW(__str_8)
0019c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c2   0e00     movlw	0                  	MOVLW	0x00
0019c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c6   0e3c     movlw	0x3c               	MOVLW	0x3c
0019c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ca   ecac     call	0xf58, 0            	CALL	_get_input
0019cc   f007
0019ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
0019d0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0019d2   f004
0019d4   0e08     movlw	0x8                	MOVLW	0x08
0019d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	160; src/clock.c	time_set(t,h,m,s);
0019d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0019e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0019e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0019ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019fc   ec21     call	0x2442, 0           	CALL	_time_set
0019fe   f012
001a00   0e09     movlw	0x9                	MOVLW	0x09
001a02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001a04   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a06   f009
001a08   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a0a   f008
001a0c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a0e   f007
001a10   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a12   f006
001a14   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a16   f005
001a18   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a1a   f004
001a1c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a1e   f003
001a20   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a22   f002
001a24   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a26   f001
001a28   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a2a   f000
001a2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a2e   ffd9
001a30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_config_mode	code
                                           _display_config_mode:
                                           ;	.line	150; src/clock.c	void display_config_mode(char *choice_string){
002fae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002fb0   ffe5
002fb2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002fb4   ffd9
002fb6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fb8   ffe5
002fba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002fbc   ffe5
002fbe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002fc0   ffe5
002fc2   0e02     movlw	0x2                	MOVLW	0x02
002fc4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fc6   f000
002fc8   0e03     movlw	0x3                	MOVLW	0x03
002fca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002fcc   f001
002fce   0e04     movlw	0x4                	MOVLW	0x04
002fd0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002fd2   f002
                                           ;	.line	151; src/clock.c	display_string(START_FIRST_LINE, CM_STRING);
002fd4   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
002fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd8   0e22     movlw	0x22               	MOVLW	HIGH(__str_5)
002fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fdc   0e44     movlw	0x44               	MOVLW	LOW(__str_5)
002fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe0   0e00     movlw	0                  	MOVLW	0x00
002fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe4   ecc9     call	0x1d92, 0           	CALL	_display_string
002fe6   f00e
002fe8   0e04     movlw	0x4                	MOVLW	0x04
002fea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	152; src/clock.c	display_string(START_SECOND_LINE, choice_string);
002fec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff8   0e10     movlw	0x10               	MOVLW	0x10
002ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ffc   ecc9     call	0x1d92, 0           	CALL	_display_string
002ffe   f00e
003000   0e04     movlw	0x4                	MOVLW	0x04
003002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003004   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003006   f002
003008   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00300a   f001
00300c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00300e   f000
003010   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003012   ffd9
003014   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	95; src/clock.c	void init_config(void){
000d08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d0a   ffe5
000d0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d0e   ffd9
000d10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d12   ffe5
000d14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d16   ffe5
000d18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d1a   ffe5
000d1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d1e   ffe5
000d20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d22   ffe5
000d24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d26   ffe5
000d28   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d2a   ffe5
000d2c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d2e   ffe5
                                           ;	.line	97; src/clock.c	int choice = CONFIG_MODE_ALARM;
000d30   6a00     clrf	0, 0                	CLRF	r0x00
000d32   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	98; src/clock.c	char *choice_string = CM_ALARM_STRING;
000d34   0e02     movlw	0x2                	MOVLW	LOW(__str_0)
000d36   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d38   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000d3a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d3c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000d3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	99; src/clock.c	display_config_mode(choice_string);
000d40   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4c   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000d4e   f017
000d50   0e03     movlw	0x3                	MOVLW	0x03
000d52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00138_DS_:
                                           ;	.line	101; src/clock.c	if(read_and_clear(&but2_pressed)){
000d54   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000d56   6e06     movwf	0x6, 0             	MOVWF	r0x06
000d58   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
000d5a   6e05     movwf	0x5, 0             	MOVWF	r0x05
000d5c   0e80     movlw	0x80               	MOVLW	0x80
000d5e   6e07     movwf	0x7, 0             	MOVWF	r0x07
000d60   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d64   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d68   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6c   ec17     call	0x2e2e, 0           	CALL	_read_and_clear
000d6e   f017
000d70   6e05     movwf	0x5, 0             	MOVWF	r0x05
000d72   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000d74   f006
000d76   0e03     movlw	0x3                	MOVLW	0x03
000d78   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d7a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d7c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000d7e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000d80   d04d     bra	0xe1c                	BRA	_00130_DS_
                                           ;	.line	103; src/clock.c	switch(choice){
000d82   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d84   e102     bnz	0xd8a                	BNZ	_00150_DS_
000d86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d88   e006     bz	0xd96                 	BZ	_00125_DS_
                                           _00150_DS_:
000d8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d8c   0a01     xorlw	0x1                	XORLW	0x01
000d8e   e102     bnz	0xd94                	BNZ	_00152_DS_
000d90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d92   e021     bz	0xdd6                 	BZ	_00126_DS_
                                           _00152_DS_:
000d94   d040     bra	0xe16                	BRA	_00127_DS_
                                           _00125_DS_:
                                           ;	.line	106; src/clock.c	LCDErase();
000d96   ec94     call	0x2b28, 0           	CALL	_LCDErase
000d98   f015
                                           ;	.line	107; src/clock.c	init_time(_alarm, SM_ALARM_STRING);			
000d9a   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   0e22     movlw	0x22               	MOVLW	HIGH(__str_1)
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   0e0e     movlw	0xe                	MOVLW	LOW(__str_1)
000da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da6   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
000da8   5142     movf	0x42, 0, 0x1        	MOVF	(__alarm + 2), W, B
000daa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dac   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
000dae   5141     movf	0x41, 0, 0x1        	MOVF	(__alarm + 1), W, B
000db0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000db2   010e     movlb	0xe                	BANKSEL	__alarm
000db4   5140     movf	0x40, 0, 0x1        	MOVF	__alarm, W, B
000db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000db8   ec7d     call	0x18fa, 0           	CALL	_init_time
000dba   f00c
000dbc   0e06     movlw	0x6                	MOVLW	0x06
000dbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	108; src/clock.c	display_config_mode(choice_string);
000dc0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000dce   f017
000dd0   0e03     movlw	0x3                	MOVLW	0x03
000dd2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	109; src/clock.c	break;
000dd4   d023     bra	0xe1c                	BRA	_00130_DS_
                                           _00126_DS_:
                                           ;	.line	112; src/clock.c	LCDErase();
000dd6   ec94     call	0x2b28, 0           	CALL	_LCDErase
000dd8   f015
                                           ;	.line	113; src/clock.c	init_time(_time, SM_CLOCK_STRING);			
000dda   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dde   0e22     movlw	0x22               	MOVLW	HIGH(__str_2)
000de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de2   0e1a     movlw	0x1a               	MOVLW	LOW(__str_2)
000de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de6   010f     movlb	0xf                	BANKSEL	(__time + 2)
000de8   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
000dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dec   010f     movlb	0xf                	BANKSEL	(__time + 1)
000dee   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
000df0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df2   010f     movlb	0xf                	BANKSEL	__time
000df4   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
000df6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df8   ec7d     call	0x18fa, 0           	CALL	_init_time
000dfa   f00c
000dfc   0e06     movlw	0x6                	MOVLW	0x06
000dfe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	114; src/clock.c	display_config_mode(choice_string);
000e00   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e04   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e08   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e0c   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000e0e   f017
000e10   0e03     movlw	0x3                	MOVLW	0x03
000e12   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	115; src/clock.c	break;
000e14   d003     bra	0xe1c                	BRA	_00130_DS_
                                           _00127_DS_:
                                           ;	.line	117; src/clock.c	LCDErase();
000e16   ec94     call	0x2b28, 0           	CALL	_LCDErase
000e18   f015
                                           ;	.line	118; src/clock.c	return;
000e1a   d08b     bra	0xf32                	BRA	_00140_DS_
                                           _00130_DS_:
                                           ;	.line	121; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000e1c   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000e1e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e20   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
000e22   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e24   0e80     movlw	0x80               	MOVLW	0x80
000e26   6e07     movwf	0x7, 0             	MOVWF	r0x07
000e28   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e2c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e34   ec17     call	0x2e2e, 0           	CALL	_read_and_clear
000e36   f017
000e38   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e3a   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000e3c   f006
000e3e   0e03     movlw	0x3                	MOVLW	0x03
000e40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000e42   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e44   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e46   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e48   d785     bra	0xd54                	BRA	_00138_DS_
                                           ;	.line	123; src/clock.c	switch(choice){
000e4a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e4c   0f80     addlw	0x80               	ADDLW	0x80
000e4e   0f81     addlw	0x81               	ADDLW	0x81
000e50   e102     bnz	0xe56                	BNZ	_00153_DS_
000e52   0eff     movlw	0xff               	MOVLW	0xff
000e54   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00153_DS_:
000e56   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e58   d77d     bra	0xd54                	BRA	_00138_DS_
000e5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e5c   0f80     addlw	0x80               	ADDLW	0x80
000e5e   0f80     addlw	0x80               	ADDLW	0x80
000e60   e102     bnz	0xe66                	BNZ	_00154_DS_
000e62   0e02     movlw	0x2                	MOVLW	0x02
000e64   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00154_DS_:
000e66   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e68   d775     bra	0xd54                	BRA	_00138_DS_
000e6a   2800     incf	0, 0, 0             	INCF	r0x00, W
000e6c   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e6e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e70   ffe5
000e72   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e74   ffe5
000e76   6a09     clrf	0x9, 0              	CLRF	r0x09
000e78   3405     rlcf	0x5, 0, 0           	RLCF	r0x05, W
000e7a   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000e7c   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000e7e   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000e80   0bfc     andlw	0xfc               	ANDLW	0xfc
000e82   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e84   0e00     movlw	0                  	MOVLW	UPPER(_00155_DS_)
000e86   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000e88   0e0e     movlw	0xe                	MOVLW	HIGH(_00155_DS_)
000e8a   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000e8c   0ea4     movlw	0xa4               	MOVLW	LOW(_00155_DS_)
000e8e   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000e90   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000e92   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000e94   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e96   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000e98   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e9a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e9c   f009
000e9e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ea0   f008
000ea2   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00155_DS_:
000ea4   ef58     goto	0xeb0               	GOTO	_00131_DS_
000ea6   f007
000ea8   ef6d     goto	0xeda               	GOTO	_00132_DS_
000eaa   f007
000eac   ef83     goto	0xf06               	GOTO	_00133_DS_
000eae   f007
                                           _00131_DS_:
                                           ;	.line	126; src/clock.c	LCDErase();
000eb0   ec94     call	0x2b28, 0           	CALL	_LCDErase
000eb2   f015
                                           ;	.line	127; src/clock.c	choice = CONFIG_MODE_ALARM;
000eb4   6a00     clrf	0, 0                	CLRF	r0x00
000eb6   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	128; src/clock.c	choice_string = CM_ALARM_STRING;
000eb8   0e02     movlw	0x2                	MOVLW	LOW(__str_0)
000eba   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ebc   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000ebe   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ec0   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000ec2   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	129; src/clock.c	display_config_mode(choice_string);
000ec4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ec6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ecc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed0   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000ed2   f017
000ed4   0e03     movlw	0x3                	MOVLW	0x03
000ed6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; src/clock.c	break;
000ed8   d73d     bra	0xd54                	BRA	_00138_DS_
                                           _00132_DS_:
                                           ;	.line	133; src/clock.c	LCDErase();
000eda   ec94     call	0x2b28, 0           	CALL	_LCDErase
000edc   f015
                                           ;	.line	134; src/clock.c	choice = CONFIG_MODE_CLOCK;
000ede   0e01     movlw	0x1                	MOVLW	0x01
000ee0   6e00     movwf	0, 0               	MOVWF	r0x00
000ee2   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	135; src/clock.c	choice_string = CM_CLOCK_STRING;
000ee4   0e26     movlw	0x26               	MOVLW	LOW(__str_3)
000ee6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ee8   0e22     movlw	0x22               	MOVLW	HIGH(__str_3)
000eea   6e03     movwf	0x3, 0             	MOVWF	r0x03
000eec   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000eee   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	136; src/clock.c	display_config_mode(choice_string);
000ef0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ef2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ef6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000efa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efc   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000efe   f017
000f00   0e03     movlw	0x3                	MOVLW	0x03
000f02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	137; src/clock.c	break;
000f04   d727     bra	0xd54                	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	140; src/clock.c	LCDErase();
000f06   ec94     call	0x2b28, 0           	CALL	_LCDErase
000f08   f015
                                           ;	.line	141; src/clock.c	choice =CONFIG_MODE_QUIT;
000f0a   0eff     movlw	0xff               	MOVLW	0xff
000f0c   6e00     movwf	0, 0               	MOVWF	r0x00
000f0e   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	142; src/clock.c	choice_string = CM_QUIT_STRING;
000f10   0e32     movlw	0x32               	MOVLW	LOW(__str_4)
000f12   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f14   0e22     movlw	0x22               	MOVLW	HIGH(__str_4)
000f16   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f18   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000f1a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	143; src/clock.c	display_config_mode(choice_string);
000f1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f28   ecd7     call	0x2fae, 0           	CALL	_display_config_mode
000f2a   f017
000f2c   0e03     movlw	0x3                	MOVLW	0x03
000f2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	145; src/clock.c	}
000f30   d711     bra	0xd54                	BRA	_00138_DS_
                                           _00140_DS_:
000f32   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f34   f007
000f36   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f38   f006
000f3a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f3c   f005
000f3e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f40   f004
000f42   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f44   f003
000f46   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f48   f002
000f4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f4c   f001
000f4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f50   f000
000f52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f54   ffd9
000f56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	91; src/clock.c	void alarm_led(void){
003078   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00307a   ffe5
00307c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00307e   ffd9
003080   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003082   ffe5
                                           ;	.line	92; src/clock.c	LED1_IO^=1;
003084   6a00     clrf	0, 0                	CLRF	r0x00
003086   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
003088   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00308a   0e01     movlw	0x1                	MOVLW	0x01
00308c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00308e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003090   0b01     andlw	0x1                	ANDLW	0x01
003092   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003094   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003096   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003098   0bfd     andlw	0xfd               	ANDLW	0xfd
00309a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00309c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	93; src/clock.c	LED2_IO^=1;
00309e   6a00     clrf	0, 0                	CLRF	r0x00
0030a0   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
0030a2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0030a4   0e01     movlw	0x1                	MOVLW	0x01
0030a6   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0030a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0030aa   0b01     andlw	0x1                	ANDLW	0x01
0030ac   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0030ae   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0030b0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0030b2   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0030b4   0bfb     andlw	0xfb               	ANDLW	0xfb
0030b6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0030b8   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0030ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0030bc   f000
0030be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0030c0   ffd9
0030c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	87; src/clock.c	void toggle_led(void){
0031ac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031ae   ffe5
0031b0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031b2   ffd9
0031b4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031b6   ffe5
                                           ;	.line	88; src/clock.c	LED0_IO^=1;
0031b8   6a00     clrf	0, 0                	CLRF	r0x00
0031ba   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0031bc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0031be   0e01     movlw	0x1                	MOVLW	0x01
0031c0   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0031c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0031c4   0b01     andlw	0x1                	ANDLW	0x01
0031c6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0031c8   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0031ca   0bfe     andlw	0xfe               	ANDLW	0xfe
0031cc   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0031ce   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0031d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0031d2   f000
0031d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0031d6   ffd9
0031d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	82; src/clock.c	void update_display(void){
002186   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002188   ffe5
00218a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00218c   ffd9
00218e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002190   ffe5
002192   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002194   ffe5
002196   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002198   ffe5
                                           ;	.line	83; src/clock.c	time_print(_time, display_line);
00219a   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00219c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00219e   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
0021a0   6e00     movwf	0, 0               	MOVWF	r0x00
0021a2   0e80     movlw	0x80               	MOVLW	0x80
0021a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b2   010f     movlb	0xf                	BANKSEL	(__time + 2)
0021b4   515f     movf	0x5f, 0, 0x1        	MOVF	(__time + 2), W, B
0021b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b8   010f     movlb	0xf                	BANKSEL	(__time + 1)
0021ba   515e     movf	0x5e, 0, 0x1        	MOVF	(__time + 1), W, B
0021bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021be   010f     movlb	0xf                	BANKSEL	__time
0021c0   515d     movf	0x5d, 0, 0x1        	MOVF	__time, W, B
0021c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c4   ecab     call	0x1b56, 0           	CALL	_time_print
0021c6   f00d
0021c8   0e06     movlw	0x6                	MOVLW	0x06
0021ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	84; src/clock.c	display_string(0, display_line);
0021cc   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
0021ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021d0   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
0021d2   6e00     movwf	0, 0               	MOVWF	r0x00
0021d4   0e80     movlw	0x80               	MOVLW	0x80
0021d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e4   0e00     movlw	0                  	MOVLW	0x00
0021e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e8   ecc9     call	0x1d92, 0           	CALL	_display_string
0021ea   f00e
0021ec   0e04     movlw	0x4                	MOVLW	0x04
0021ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0021f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021f2   f002
0021f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021f6   f001
0021f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021fa   f000
0021fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021fe   ffd9
002200   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002202   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
002204   2074     addwfc	0x74, 0, 0        
002206   6c61     negf	0x61, 0             
002208   7261     btg	0x61, 0x1, 0         
00220a   3f6d     incfsz	0x6d, 0x1, 0x1    
00220c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
00220e   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x00
002210   2074     addwfc	0x74, 0, 0        
002212   6c61     negf	0x61, 0             
002214   7261     btg	0x61, 0x1, 0         
002216   3a6d     swapf	0x6d, 0x1, 0       
002218   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
00221a   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x00
00221c   2074     addwfc	0x74, 0, 0        
00221e   6c63     negf	0x63, 0             
002220   636f     cpfseq	0x6f, 0x1         
002222   3a6b     swapf	0x6b, 0x1, 0       
002224   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
002226   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
002228   2074     addwfc	0x74, 0, 0        
00222a   6c63     negf	0x63, 0             
00222c   636f     cpfseq	0x6f, 0x1         
00222e   3f6b     incfsz	0x6b, 0x1, 0x1    
002230   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
002232   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
002234   7469     btg	0x69, 0x2, 0         
002236   6320     cpfseq	0x20, 0x1         
002238   6e6f     movwf	0x6f, 0            
00223a   6966     setf	0x66, 0x1           
00223c   2067     addwfc	0x67, 0, 0        
00223e   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
002240   6564     cpfsgt	0x64, 0x1         
002242   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
002244   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x3a
002246   6f6f     movwf	0x6f, 0x1          
002248   6573     cpfsgt	0x73, 0x1         
00224a   6d20     negf	0x20, 0x1           
00224c   646f     cpfsgt	0x6f, 0           
00224e   3a65     swapf	0x65, 0x1, 0       
002250   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_6:
002252   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
002254   7275     btg	0x75, 0x1, 0         
002256   3a73     swapf	0x73, 0x1, 0       
002258   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
00225a   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x00
00225c   756e     btg	0x6e, 0x2, 0x1       
00225e   6574     cpfsgt	0x74, 0x1         
002260   3a73     swapf	0x73, 0x1, 0       
002262   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
002264   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x00
002266   6f63     movwf	0x63, 0x1          
002268   646e     cpfsgt	0x6e, 0           
00226a   3a73     swapf	0x73, 0x1, 0       
00226c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
00226e   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
002270   6432     cpfsgt	0x32, 0           
002272   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2828 (0x0b0c) bytes ( 2.16%)
                                           ;           	 1414 (0x0586) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002b28   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b2a   ffe5
002b2c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b2e   ffd9
002b30   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b32   ffe5
002b34   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b36   ffe5
002b38   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b3a   ffe5
002b3c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b3e   ffe5
002b40   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b42   ffe5
002b44   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b46   ffe5
002b48   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b4a   ffe5
002b4c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b4e   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002b50   0e01     movlw	0x1                	MOVLW	0x01
002b52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b54   0e00     movlw	0                  	MOVLW	0x00
002b56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b58   ec0b     call	0x3016, 0           	CALL	_LCDWrite
002b5a   f018
002b5c   0e02     movlw	0x2                	MOVLW	0x02
002b5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002b60   0e48     movlw	0x48               	MOVLW	0x48
002b62   6e00     movwf	0, 0               	MOVWF	r0x00
002b64   0e0d     movlw	0xd                	MOVLW	0x0d
002b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
002b68   6a02     clrf	0x2, 0              	CLRF	r0x02
002b6a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002b6c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002b6e   f004
002b70   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002b72   f005
002b74   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002b76   f006
002b78   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002b7a   f007
002b7c   0eff     movlw	0xff               	MOVLW	0xff
002b7e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002b80   0eff     movlw	0xff               	MOVLW	0xff
002b82   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002b84   0eff     movlw	0xff               	MOVLW	0xff
002b86   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002b88   0eff     movlw	0xff               	MOVLW	0xff
002b8a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002b8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b8e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002b90   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002b92   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002b94   e1eb     bnz	0x2b6c               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002b96   0e00     movlw	0                  	MOVLW	0x00
002b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b9a   0e20     movlw	0x20               	MOVLW	0x20
002b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b9e   0e20     movlw	0x20               	MOVLW	0x20
002ba0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002ba4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002ba8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002baa   ec91     call	0x2522, 0           	CALL	_memset
002bac   f012
002bae   0e05     movlw	0x5                	MOVLW	0x05
002bb0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002bb2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002bb4   f007
002bb6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002bb8   f006
002bba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002bbc   f005
002bbe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002bc0   f004
002bc2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002bc4   f003
002bc6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002bc8   f002
002bca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002bcc   f001
002bce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002bd0   f000
002bd2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002bd4   ffd9
002bd6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000878   f018
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec0b     call	0x3016, 0           	CALL	_LCDWrite
00093a   f018
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000982   f018
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000a44   f018
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ec91     call	0x2522, 0           	CALL	_memset
000aee   f012
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000bd6   f018
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000c1a   f018
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000c5e   f018
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ec0b     call	0x3016, 0           	CALL	_LCDWrite
000ca2   f018
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
003016   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003018   ffe5
00301a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00301c   ffd9
00301e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003020   ffe5
003022   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003024   ffe5
003026   0e02     movlw	0x2                	MOVLW	0x02
003028   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00302a   f000
00302c   0e03     movlw	0x3                	MOVLW	0x03
00302e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003030   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
003032   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
003034   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
003036   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
003038   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
00303a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00303c   0b01     andlw	0x1                	ANDLW	0x01
00303e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003040   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003042   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003044   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
003046   0bfb     andlw	0xfb               	ANDLW	0xfb
003048   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00304a   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
00304c   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00304e   ff8d
003050   0000     nop                      	nop 
003052   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
003054   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
003056   0000     nop                      	nop 
003058   0000     nop                      	nop 
00305a   0000     nop                      	nop 
00305c   0000     nop                      	nop 
00305e   0000     nop                      	nop 
003060   0000     nop                      	nop 
003062   0000     nop                      	nop 
003064   0000     nop                      	nop 
003066   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
003068   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00306a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00306c   f001
00306e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003070   f000
003072   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003074   ffd9
003076   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
001612   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001614   ffe5
001616   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001618   ffd9
00161a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00161c   ffe5
00161e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001620   ffe5
001622   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001624   ffe5
001626   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001628   ffe5
00162a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00162c   ffe5
00162e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001630   ffe5
001632   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001634   ffe5
001636   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001638   ffe5
00163a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00163c   ffe5
00163e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001640   ffe5
001642   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001644   ffe5
001646   0e02     movlw	0x2                	MOVLW	0x02
001648   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00164a   f000
00164c   0e03     movlw	0x3                	MOVLW	0x03
00164e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001650   f001
001652   0e04     movlw	0x4                	MOVLW	0x04
001654   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001656   f002
001658   0e05     movlw	0x5                	MOVLW	0x05
00165a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00165c   f003
00165e   0e06     movlw	0x6                	MOVLW	0x06
001660   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001662   f004
001664   0e07     movlw	0x7                	MOVLW	0x07
001666   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001668   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
00166a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00166c   0f04     addlw	0x4                	ADDLW	0x04
00166e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001670   0e00     movlw	0                  	MOVLW	0x00
001672   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001674   6e07     movwf	0x7, 0             	MOVWF	r0x07
001676   0e00     movlw	0                  	MOVLW	0x00
001678   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00167a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00167c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00167e   ffe9
001680   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001682   fff3
001684   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001686   ec04     call	0x3208, 0           	CALL	__gptrget2
001688   f019
00168a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00168c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00168e   f007
001690   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001692   0f04     addlw	0x4                	ADDLW	0x04
001694   6e08     movwf	0x8, 0             	MOVWF	r0x08
001696   0e00     movlw	0                  	MOVLW	0x00
001698   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00169a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00169c   0e00     movlw	0                  	MOVLW	0x00
00169e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016a0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0016a2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0016a4   ffe9
0016a6   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0016a8   fff3
0016aa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0016ac   ec04     call	0x3208, 0           	CALL	__gptrget2
0016ae   f019
0016b0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016b2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0016b4   f009
0016b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0016b8   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0016ba   e103     bnz	0x16c2               	BNZ	_00166_DS_
0016bc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016be   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0016c0   e003     bz	0x16c8                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
0016c2   6af3     clrf	0xf3, 0             	CLRF	PRODL
0016c4   6ae8     clrf	0xe8, 0             	CLRF	WREG
0016c6   d04e     bra	0x1764               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
0016c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016ca   0f02     addlw	0x2                	ADDLW	0x02
0016cc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016ce   0e00     movlw	0                  	MOVLW	0x00
0016d0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0016d2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0016d4   0e00     movlw	0                  	MOVLW	0x00
0016d6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0016d8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016da   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0016dc   ffe9
0016de   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0016e0   fff3
0016e2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0016e4   ec04     call	0x3208, 0           	CALL	__gptrget2
0016e6   f019
0016e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016ea   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016ec   f007
0016ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016f0   0f02     addlw	0x2                	ADDLW	0x02
0016f2   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016f4   0e00     movlw	0                  	MOVLW	0x00
0016f6   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0016f8   6e09     movwf	0x9, 0             	MOVWF	r0x09
0016fa   0e00     movlw	0                  	MOVLW	0x00
0016fc   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016fe   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001700   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001702   ffe9
001704   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001706   fff3
001708   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00170a   ec04     call	0x3208, 0           	CALL	__gptrget2
00170c   f019
00170e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001710   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001712   f009
001714   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001716   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001718   e103     bnz	0x1720               	BNZ	_00168_DS_
00171a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00171c   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00171e   e003     bz	0x1726                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
001720   6af3     clrf	0xf3, 0             	CLRF	PRODL
001722   6ae8     clrf	0xe8, 0             	CLRF	WREG
001724   d01f     bra	0x1764               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
001726   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001728   ffe9
00172a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00172c   fff3
00172e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001730   ec04     call	0x3208, 0           	CALL	__gptrget2
001732   f019
001734   6e00     movwf	0, 0               	MOVWF	r0x00
001736   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001738   f001
00173a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00173c   ffe9
00173e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001740   fff3
001742   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001744   ec04     call	0x3208, 0           	CALL	__gptrget2
001746   f019
001748   6e03     movwf	0x3, 0             	MOVWF	r0x03
00174a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00174c   f004
00174e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001750   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
001752   e103     bnz	0x175a               	BNZ	_00170_DS_
001754   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001756   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
001758   e003     bz	0x1760                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
00175a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00175c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00175e   d002     bra	0x1764               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
001760   6af3     clrf	0xf3, 0             	CLRF	PRODL
001762   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
001764   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001766   f00a
001768   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00176a   f009
00176c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00176e   f008
001770   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001772   f007
001774   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001776   f006
001778   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00177a   f005
00177c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00177e   f004
001780   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001782   f003
001784   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001786   f002
001788   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00178a   f001
00178c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00178e   f000
001790   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001792   ffd9
001794   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
001b56   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b58   ffe5
001b5a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b5c   ffd9
001b5e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b60   ffe5
001b62   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001b64   ffe5
001b66   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001b68   ffe5
001b6a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001b6c   ffe5
001b6e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001b70   ffe5
001b72   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001b74   ffe5
001b76   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001b78   ffe5
001b7a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001b7c   ffe5
001b7e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001b80   ffe5
001b82   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001b84   ffe5
001b86   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001b88   ffe5
001b8a   0e02     movlw	0x2                	MOVLW	0x02
001b8c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001b8e   f000
001b90   0e03     movlw	0x3                	MOVLW	0x03
001b92   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001b94   f001
001b96   0e04     movlw	0x4                	MOVLW	0x04
001b98   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001b9a   f002
001b9c   0e05     movlw	0x5                	MOVLW	0x05
001b9e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001ba0   f003
001ba2   0e06     movlw	0x6                	MOVLW	0x06
001ba4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001ba6   f004
001ba8   0e07     movlw	0x7                	MOVLW	0x07
001baa   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001bac   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001bae   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bb0   0f04     addlw	0x4                	ADDLW	0x04
001bb2   6e06     movwf	0x6, 0             	MOVWF	r0x06
001bb4   0e00     movlw	0                  	MOVLW	0x00
001bb6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001bb8   6e07     movwf	0x7, 0             	MOVWF	r0x07
001bba   0e00     movlw	0                  	MOVLW	0x00
001bbc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001bbe   6e08     movwf	0x8, 0             	MOVWF	r0x08
001bc0   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001bc2   ffe9
001bc4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001bc6   fff3
001bc8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001bca   ec04     call	0x3208, 0           	CALL	__gptrget2
001bcc   f019
001bce   6e06     movwf	0x6, 0             	MOVWF	r0x06
001bd0   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001bd2   f007
001bd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bd6   0f02     addlw	0x2                	ADDLW	0x02
001bd8   6e08     movwf	0x8, 0             	MOVWF	r0x08
001bda   0e00     movlw	0                  	MOVLW	0x00
001bdc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001bde   6e09     movwf	0x9, 0             	MOVWF	r0x09
001be0   0e00     movlw	0                  	MOVLW	0x00
001be2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001be4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001be6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001be8   ffe9
001bea   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001bec   fff3
001bee   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001bf0   ec04     call	0x3208, 0           	CALL	__gptrget2
001bf2   f019
001bf4   6e08     movwf	0x8, 0             	MOVWF	r0x08
001bf6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001bf8   f009
001bfa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001bfc   ffe9
001bfe   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001c00   fff3
001c02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c04   ec04     call	0x3208, 0           	CALL	__gptrget2
001c06   f019
001c08   6e00     movwf	0, 0               	MOVWF	r0x00
001c0a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c0c   f001
001c0e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c16   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c22   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c26   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2a   0e2e     movlw	0x2e               	MOVLW	HIGH(__str_0)
001c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2e   0e1e     movlw	0x1e               	MOVLW	LOW(__str_0)
001c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c36   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c3a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c3e   ec3a     call	0x2274, 0           	CALL	_sprintf
001c40   f011
001c42   0e0c     movlw	0xc                	MOVLW	0x0c
001c44   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c46   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001c48   f00a
001c4a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001c4c   f009
001c4e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c50   f008
001c52   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c54   f007
001c56   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c58   f006
001c5a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c5c   f005
001c5e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c60   f004
001c62   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001c64   f003
001c66   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001c68   f002
001c6a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001c6c   f001
001c6e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001c70   f000
001c72   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c74   ffd9
001c76   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002f30   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f32   ffe5
002f34   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f36   ffd9
002f38   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f3a   ffe5
002f3c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f3e   ffe5
002f40   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002f42   ffe5
002f44   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002f46   ffe5
002f48   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002f4a   ffe5
002f4c   0e02     movlw	0x2                	MOVLW	0x02
002f4e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002f50   f000
002f52   0e03     movlw	0x3                	MOVLW	0x03
002f54   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002f56   f001
002f58   0e04     movlw	0x4                	MOVLW	0x04
002f5a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002f5c   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002f5e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f60   ffe9
002f62   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002f64   fff3
002f66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f68   ec04     call	0x3208, 0           	CALL	__gptrget2
002f6a   f019
002f6c   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f6e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002f70   f004
002f72   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002f74   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002f76   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002f78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f80   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f84   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f88   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f8c   ec22     call	0x2844, 0           	CALL	_set_hours
002f8e   f014
002f90   0e05     movlw	0x5                	MOVLW	0x05
002f92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002f94   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f96   f004
002f98   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f9a   f003
002f9c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f9e   f002
002fa0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002fa2   f001
002fa4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002fa6   f000
002fa8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002faa   ffd9
002fac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
002900   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002902   ffe5
002904   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002906   ffd9
002908   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00290a   ffe5
00290c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00290e   ffe5
002910   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002912   ffe5
002914   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002916   ffe5
002918   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00291a   ffe5
00291c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00291e   ffe5
002920   0e02     movlw	0x2                	MOVLW	0x02
002922   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002924   f000
002926   0e03     movlw	0x3                	MOVLW	0x03
002928   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00292a   f001
00292c   0e04     movlw	0x4                	MOVLW	0x04
00292e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002930   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002932   5000     movf	0, 0, 0             	MOVF	r0x00, W
002934   0f02     addlw	0x2                	ADDLW	0x02
002936   6e03     movwf	0x3, 0             	MOVWF	r0x03
002938   0e00     movlw	0                  	MOVLW	0x00
00293a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00293c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00293e   0e00     movlw	0                  	MOVLW	0x00
002940   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002942   6e05     movwf	0x5, 0             	MOVWF	r0x05
002944   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002946   ffe9
002948   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00294a   fff3
00294c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00294e   ec04     call	0x3208, 0           	CALL	__gptrget2
002950   f019
002952   6e03     movwf	0x3, 0             	MOVWF	r0x03
002954   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002956   f004
002958   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00295a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00295c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00295e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002960   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002962   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002966   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002968   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00296a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00296c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00296e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002970   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002972   ec5a     call	0x26b4, 0           	CALL	_set_minutes
002974   f013
002976   6e03     movwf	0x3, 0             	MOVWF	r0x03
002978   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00297a   f004
00297c   0e05     movlw	0x5                	MOVLW	0x05
00297e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002980   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002982   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002984   e00a     bz	0x299a                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
002986   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00298a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00298c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00298e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002990   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002992   ec98     call	0x2f30, 0           	CALL	_add_hour
002994   f017
002996   0e03     movlw	0x3                	MOVLW	0x03
002998   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
00299a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00299c   f005
00299e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029a0   f004
0029a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029a4   f003
0029a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029a8   f002
0029aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029ac   f001
0029ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029b0   f000
0029b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029b4   ffd9
0029b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
0029b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0029ba   ffe5
0029bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0029be   ffd9
0029c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0029c2   ffe5
0029c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0029c6   ffe5
0029c8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0029ca   ffe5
0029cc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0029ce   ffe5
0029d0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0029d2   ffe5
0029d4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0029d6   ffe5
0029d8   0e02     movlw	0x2                	MOVLW	0x02
0029da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0029dc   f000
0029de   0e03     movlw	0x3                	MOVLW	0x03
0029e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0029e2   f001
0029e4   0e04     movlw	0x4                	MOVLW	0x04
0029e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0029e8   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
0029ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ec   0f04     addlw	0x4                	ADDLW	0x04
0029ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029f0   0e00     movlw	0                  	MOVLW	0x00
0029f2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0029f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029f6   0e00     movlw	0                  	MOVLW	0x00
0029f8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0029fa   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029fc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0029fe   ffe9
002a00   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002a02   fff3
002a04   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a06   ec04     call	0x3208, 0           	CALL	__gptrget2
002a08   f019
002a0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a0c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a0e   f004
002a10   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002a12   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002a14   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002a16   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a1e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a22   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a26   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2a   ecf6     call	0x25ec, 0           	CALL	_set_seconds
002a2c   f012
002a2e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a30   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a32   f004
002a34   0e05     movlw	0x5                	MOVLW	0x05
002a36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002a38   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a3a   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002a3c   e00a     bz	0x2a52                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002a3e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a46   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   ec80     call	0x2900, 0           	CALL	_add_minute
002a4c   f014
002a4e   0e03     movlw	0x3                	MOVLW	0x03
002a50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002a52   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a54   f005
002a56   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a58   f004
002a5a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a5c   f003
002a5e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a60   f002
002a62   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a64   f001
002a66   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a68   f000
002a6a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a6c   ffd9
002a6e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
0025ec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0025ee   ffe5
0025f0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0025f2   ffd9
0025f4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025f6   ffe5
0025f8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0025fa   ffe5
0025fc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0025fe   ffe5
002600   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002602   ffe5
002604   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002606   ffe5
002608   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00260a   ffe5
00260c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00260e   ffe5
002610   0e02     movlw	0x2                	MOVLW	0x02
002612   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002614   f000
002616   0e03     movlw	0x3                	MOVLW	0x03
002618   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00261a   f001
00261c   0e04     movlw	0x4                	MOVLW	0x04
00261e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002620   f002
002622   0e05     movlw	0x5                	MOVLW	0x05
002624   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002626   f003
002628   0e06     movlw	0x6                	MOVLW	0x06
00262a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00262c   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
00262e   0e00     movlw	0                  	MOVLW	0x00
002630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002632   0e3c     movlw	0x3c               	MOVLW	0x3c
002634   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002636   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00263c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263e   ecd0     call	0x1fa0, 0           	CALL	__divsint
002640   f00f
002642   6e05     movwf	0x5, 0             	MOVWF	r0x05
002644   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002646   f006
002648   0e04     movlw	0x4                	MOVLW	0x04
00264a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
00264c   0e04     movlw	0x4                	MOVLW	0x04
00264e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002650   0e00     movlw	0                  	MOVLW	0x00
002652   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002654   0e00     movlw	0                  	MOVLW	0x00
002656   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002658   0e00     movlw	0                  	MOVLW	0x00
00265a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00265c   0e3c     movlw	0x3c               	MOVLW	0x3c
00265e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002660   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002664   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002668   ecaf     call	0x235e, 0           	CALL	__modsint
00266a   f011
00266c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00266e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002670   f004
002672   0e04     movlw	0x4                	MOVLW	0x04
002674   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002676   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002678   ffe5
00267a   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00267c   fff4
00267e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002680   ffe9
002682   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002684   fff3
002686   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002688   ec45     call	0x328a, 0           	CALL	__gptrput2
00268a   f019
                                           ;	.line	42; src/newtime.c	return overflow;
00268c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00268e   fff3
002690   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002692   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002694   f006
002696   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002698   f005
00269a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00269c   f004
00269e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026a0   f003
0026a2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026a4   f002
0026a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026a8   f001
0026aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026ac   f000
0026ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026b0   ffd9
0026b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
0026b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026b6   ffe5
0026b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026ba   ffd9
0026bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026be   ffe5
0026c0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026c2   ffe5
0026c4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0026c6   ffe5
0026c8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026ca   ffe5
0026cc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0026ce   ffe5
0026d0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0026d2   ffe5
0026d4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0026d6   ffe5
0026d8   0e02     movlw	0x2                	MOVLW	0x02
0026da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0026dc   f000
0026de   0e03     movlw	0x3                	MOVLW	0x03
0026e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0026e2   f001
0026e4   0e04     movlw	0x4                	MOVLW	0x04
0026e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0026e8   f002
0026ea   0e05     movlw	0x5                	MOVLW	0x05
0026ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0026ee   f003
0026f0   0e06     movlw	0x6                	MOVLW	0x06
0026f2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0026f4   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
0026f6   0e00     movlw	0                  	MOVLW	0x00
0026f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026fa   0e3c     movlw	0x3c               	MOVLW	0x3c
0026fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002702   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002706   ecd0     call	0x1fa0, 0           	CALL	__divsint
002708   f00f
00270a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00270c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00270e   f006
002710   0e04     movlw	0x4                	MOVLW	0x04
002712   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002714   0e02     movlw	0x2                	MOVLW	0x02
002716   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002718   0e00     movlw	0                  	MOVLW	0x00
00271a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00271c   0e00     movlw	0                  	MOVLW	0x00
00271e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002720   0e00     movlw	0                  	MOVLW	0x00
002722   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002724   0e3c     movlw	0x3c               	MOVLW	0x3c
002726   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002728   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00272a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00272c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00272e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002730   ecaf     call	0x235e, 0           	CALL	__modsint
002732   f011
002734   6e03     movwf	0x3, 0             	MOVWF	r0x03
002736   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002738   f004
00273a   0e04     movlw	0x4                	MOVLW	0x04
00273c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00273e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002740   ffe5
002742   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002744   fff4
002746   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002748   ffe9
00274a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00274c   fff3
00274e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002750   ec45     call	0x328a, 0           	CALL	__gptrput2
002752   f019
                                           ;	.line	36; src/newtime.c	return overflow;
002754   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002756   fff3
002758   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00275a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00275c   f006
00275e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002760   f005
002762   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002764   f004
002766   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002768   f003
00276a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00276c   f002
00276e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002770   f001
002772   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002774   f000
002776   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002778   ffd9
00277a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002844   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002846   ffe5
002848   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00284a   ffd9
00284c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00284e   ffe5
002850   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002852   ffe5
002854   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002856   ffe5
002858   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00285a   ffe5
00285c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00285e   ffe5
002860   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002862   ffe5
002864   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002866   ffe5
002868   0e02     movlw	0x2                	MOVLW	0x02
00286a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00286c   f000
00286e   0e03     movlw	0x3                	MOVLW	0x03
002870   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002872   f001
002874   0e04     movlw	0x4                	MOVLW	0x04
002876   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002878   f002
00287a   0e05     movlw	0x5                	MOVLW	0x05
00287c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00287e   f003
002880   0e06     movlw	0x6                	MOVLW	0x06
002882   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002884   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
002886   0e00     movlw	0                  	MOVLW	0x00
002888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00288a   0e18     movlw	0x18               	MOVLW	0x18
00288c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00288e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002890   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002892   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002896   ecd0     call	0x1fa0, 0           	CALL	__divsint
002898   f00f
00289a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00289c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00289e   f006
0028a0   0e04     movlw	0x4                	MOVLW	0x04
0028a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0028a4   0e00     movlw	0                  	MOVLW	0x00
0028a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a8   0e18     movlw	0x18               	MOVLW	0x18
0028aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   ecaf     call	0x235e, 0           	CALL	__modsint
0028b6   f011
0028b8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0028ba   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0028bc   f004
0028be   0e04     movlw	0x4                	MOVLW	0x04
0028c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028c2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028c4   ffe5
0028c6   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0028c8   fff4
0028ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0028cc   ffe9
0028ce   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0028d0   fff3
0028d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028d4   ec45     call	0x328a, 0           	CALL	__gptrput2
0028d6   f019
                                           ;	.line	30; src/newtime.c	return overflow;
0028d8   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028da   fff3
0028dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028de   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0028e0   f006
0028e2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0028e4   f005
0028e6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028e8   f004
0028ea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028ec   f003
0028ee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028f0   f002
0028f2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028f4   f001
0028f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028f8   f000
0028fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028fc   ffd9
0028fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002442   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002444   ffe5
002446   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002448   ffd9
00244a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00244c   ffe5
00244e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002450   ffe5
002452   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002454   ffe5
002456   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002458   ffe5
00245a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00245c   ffe5
00245e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002460   ffe5
002462   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002464   ffe5
002466   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002468   ffe5
00246a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00246c   ffe5
00246e   0e02     movlw	0x2                	MOVLW	0x02
002470   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002472   f000
002474   0e03     movlw	0x3                	MOVLW	0x03
002476   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002478   f001
00247a   0e04     movlw	0x4                	MOVLW	0x04
00247c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00247e   f002
002480   0e05     movlw	0x5                	MOVLW	0x05
002482   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002484   f003
002486   0e06     movlw	0x6                	MOVLW	0x06
002488   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00248a   f004
00248c   0e07     movlw	0x7                	MOVLW	0x07
00248e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002490   f005
002492   0e08     movlw	0x8                	MOVLW	0x08
002494   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002496   f006
002498   0e09     movlw	0x9                	MOVLW	0x09
00249a   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00249c   f007
00249e   0e0a     movlw	0xa                	MOVLW	0x0a
0024a0   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0024a2   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0024a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b8   ec22     call	0x2844, 0           	CALL	_set_hours
0024ba   f014
0024bc   0e05     movlw	0x5                	MOVLW	0x05
0024be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
0024c0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0024c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024d4   ec5a     call	0x26b4, 0           	CALL	_set_minutes
0024d6   f013
0024d8   0e05     movlw	0x5                	MOVLW	0x05
0024da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
0024dc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0024de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0024e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f0   ecf6     call	0x25ec, 0           	CALL	_set_seconds
0024f2   f012
0024f4   0e05     movlw	0x5                	MOVLW	0x05
0024f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0024f8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0024fa   f008
0024fc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0024fe   f007
002500   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002502   f006
002504   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002506   f005
002508   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00250a   f004
00250c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00250e   f003
002510   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002512   f002
002514   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002516   f001
002518   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00251a   f000
00251c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00251e   ffd9
002520   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002da6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002da8   ffe5
002daa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002dac   ffd9
002dae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002db0   ffe5
002db2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002db4   ffe5
002db6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002db8   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002dba   0e06     movlw	0x6                	MOVLW	0x06
002dbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dbe   ec46     call	0x148c, 0           	CALL	_malloc
002dc0   f00a
002dc2   6e00     movwf	0, 0               	MOVWF	r0x00
002dc4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002dc6   f001
002dc8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002dca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002dcc   6e01     movwf	0x1, 0             	MOVWF	r0x01
002dce   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dd0   6e00     movwf	0, 0               	MOVWF	r0x00
002dd2   0e80     movlw	0x80               	MOVLW	0x80
002dd4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002dd6   0e00     movlw	0                  	MOVLW	0x00
002dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dda   0e00     movlw	0                  	MOVLW	0x00
002ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dde   0e00     movlw	0                  	MOVLW	0x00
002de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de2   0e00     movlw	0                  	MOVLW	0x00
002de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de6   0e00     movlw	0                  	MOVLW	0x00
002de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dea   0e00     movlw	0                  	MOVLW	0x00
002dec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002df0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002df2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002df4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002df6   5000     movf	0, 0, 0             	MOVF	r0x00, W
002df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dfa   ec21     call	0x2442, 0           	CALL	_time_set
002dfc   f012
002dfe   0e09     movlw	0x9                	MOVLW	0x09
002e00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002e02   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002e04   fff4
002e06   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e08   fff3
002e0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e0e   f002
002e10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e12   f001
002e14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e16   f000
002e18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e1a   ffd9
002e1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002e1e   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002e20   6432     cpfsgt	0x32, 0           
002e22   253a     addwf	0x3a, 0, 0x1       
002e24   3230     rrcf	0x30, 0x1, 0        
002e26   3a64     swapf	0x64, 0x1, 0       
002e28   3025     rrcf	0x25, 0, 0          
002e2a   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002e2c   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
