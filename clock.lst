gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-15-2013  20:19:43
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 20:19:43 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_clock
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global _display_line
                                           	global _counter
                                           	global _main
                                           	global _lowPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _time_print
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _counter	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           _display_line	res	32
                                           
                                           udata_clock_2	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_lowPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_lowPriorityInterruptHandler:
000008   ef6f     goto	0x22de              	GOTO	_lowPriorityInterruptHandler
00000a   f011
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	31; src/clock.c	_time = time_create();
002900   ecc5     call	0x298a, 0           	CALL	_time_create
002902   f014
002904   010f     movlb	0xf                	BANKSEL	__time
002906   6f51     movwf	0x51, 0x1          	MOVWF	__time, B
002908   cff3     movff	0xff3, 0xf52       	MOVFF	PRODL, (__time + 1)
00290a   ff52
00290c   cff4     movff	0xff4, 0xf53       	MOVFF	PRODH, (__time + 2)
00290e   ff53
                                           ;	.line	33; src/clock.c	init();
002910   ec21     call	0x2c42, 0           	CALL	_init
002912   f016
002914   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	34; src/clock.c	init_clock(_time);
002916   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 2), W, B
002918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291a   010f     movlb	0xf                	BANKSEL	(__time + 1)
00291c   5152     movf	0x52, 0, 0x1        	MOVF	(__time + 1), W, B
00291e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002920   010f     movlb	0xf                	BANKSEL	__time
002922   5151     movf	0x51, 0, 0x1        	MOVF	__time, W, B
002924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002926   ec72     call	0x16e4, 0           	CALL	_init_clock
002928   f00b
00292a   0e03     movlw	0x3                	MOVLW	0x03
00292c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/clock.c	time_print(_time, display_line);
00292e   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
002930   6e01     movwf	0x1, 0             	MOVWF	r0x01
002932   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002934   6e00     movwf	0, 0               	MOVWF	r0x00
002936   0e80     movlw	0x80               	MOVLW	0x80
002938   6e02     movwf	0x2, 0             	MOVWF	r0x02
00293a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00293c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00293e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002942   5000     movf	0, 0, 0             	MOVF	r0x00, W
002944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002946   010f     movlb	0xf                	BANKSEL	(__time + 2)
002948   5153     movf	0x53, 0, 0x1        	MOVF	(__time + 2), W, B
00294a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00294c   010f     movlb	0xf                	BANKSEL	(__time + 1)
00294e   5152     movf	0x52, 0, 0x1        	MOVF	(__time + 1), W, B
002950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002952   010f     movlb	0xf                	BANKSEL	__time
002954   5151     movf	0x51, 0, 0x1        	MOVF	__time, W, B
002956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002958   ece1     call	0x15c2, 0           	CALL	_time_print
00295a   f00a
00295c   0e06     movlw	0x6                	MOVLW	0x06
00295e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	36; src/clock.c	display_string(0, display_line);
002960   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
002962   6e01     movwf	0x1, 0             	MOVWF	r0x01
002964   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
002966   6e00     movwf	0, 0               	MOVWF	r0x00
002968   0e80     movlw	0x80               	MOVLW	0x80
00296a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00296c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00296e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002970   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002974   5000     movf	0, 0, 0             	MOVF	r0x00, W
002976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002978   0e00     movlw	0                  	MOVLW	0x00
00297a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00297c   ec8d     call	0x191a, 0           	CALL	_display_string
00297e   f00c
002980   0e04     movlw	0x4                	MOVLW	0x04
002982   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	37; src/clock.c	return 0;
002984   6af3     clrf	0xf3, 0             	CLRF	PRODL
002986   6ae8     clrf	0xe8, 0             	CLRF	WREG
002988   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	100; src/clock.c	void init(void){
002c42   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c44   ffe5
002c46   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c48   ffd9
                                           ;	.line	102; src/clock.c	LCDInit();
002c4a   ec56     call	0xaac, 0            	CALL	_LCDInit
002c4c   f005
                                           ;	.line	105; src/clock.c	RCONbits.IPEN = 1;
002c4e   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	106; src/clock.c	INTCONbits.GIE = 1;
002c50   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	107; src/clock.c	INTCONbits.PEIE = 1;
002c52   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	110; src/clock.c	T0CONbits.TMR0ON = 0;
002c54   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	113; src/clock.c	TMR0H = 0x00000000;
002c56   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	114; src/clock.c	TMR0L = 0x00000000;
002c58   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	117; src/clock.c	T0CONbits.T08BIT = 0;
002c5a   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	120; src/clock.c	T0CONbits.T0CS = 0;
002c5c   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	123; src/clock.c	T0CONbits.PSA = 1;
002c5e   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	126; src/clock.c	INTCONbits.TMR0IE = 1;
002c60   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	136; src/clock.c	LED3_TRIS = 0;
002c62   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	137; src/clock.c	LED3_IO = 1;
002c64   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
002c66   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c68   ffd9
002c6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__lowPriorityInterruptHandler	code
                                           _lowPriorityInterruptHandler:
                                           ;	.line	91; src/clock.c	void lowPriorityInterruptHandler (void) __interrupt(1){
0022de   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0022e0   ffe5
0022e2   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0022e4   ffe5
0022e6   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0022e8   ffe5
0022ea   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0022ec   ffe5
0022ee   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0022f0   ffe5
0022f2   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0022f4   ffe5
0022f6   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0022f8   ffe5
0022fa   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0022fc   ffe5
0022fe   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
002300   ffe5
002302   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002304   ffe5
002306   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002308   ffd9
00230a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00230c   ffe5
00230e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002310   ffe5
002312   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002314   ffe5
                                           ;	.line	92; src/clock.c	if (INTCONbits.TMR0IF == 1) {
002316   6a00     clrf	0, 0                	CLRF	r0x00
002318   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
00231a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00231c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00231e   0a01     xorlw	0x1                	XORLW	0x01
002320   e123     bnz	0x2368               	BNZ	_00160_DS_
                                           ;	.line	93; src/clock.c	display_string(0,to_double_digits(counter++));
002322   cf4e     movff	0xf4e, 0           	MOVFF	_counter, r0x00
002324   f000
002326   cf4f     movff	0xf4f, 0x1         	MOVFF	(_counter + 1), r0x01
002328   f001
00232a   010f     movlb	0xf                	BANKSEL	_counter
00232c   2b4e     incf	0x4e, 0x1, 0x1      	INCF	_counter, F, B
00232e   e302     bnc	0x2334               	BNC	_10169_DS_
002330   010f     movlb	0xf                	BANKSEL	(_counter + 1)
002332   2b4f     incf	0x4f, 0x1, 0x1      	INCF	(_counter + 1), F, B
                                           _10169_DS_:
002334   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002336   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002338   5000     movf	0, 0, 0             	MOVF	r0x00, W
00233a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00233c   ec3a     call	0x2874, 0           	CALL	_to_double_digits
00233e   f014
002340   6e00     movwf	0, 0               	MOVWF	r0x00
002342   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002344   f001
002346   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
002348   f002
00234a   0e02     movlw	0x2                	MOVLW	0x02
00234c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00234e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002352   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002356   5000     movf	0, 0, 0             	MOVF	r0x00, W
002358   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00235a   0e00     movlw	0                  	MOVLW	0x00
00235c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00235e   ec8d     call	0x191a, 0           	CALL	_display_string
002360   f00c
002362   0e04     movlw	0x4                	MOVLW	0x04
002364   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	94; src/clock.c	INTCONbits.TMR0IF = 0;
002366   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00160_DS_:
002368   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00236a   f002
00236c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00236e   f001
002370   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002372   f000
002374   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002376   ffd9
002378   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00237a   fffb
00237c   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00237e   fffa
002380   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
002382   ffea
002384   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
002386   ffe9
002388   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00238a   fff4
00238c   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00238e   fff3
002390   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
002392   ffe0
002394   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
002396   ffd8
002398   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00239a   ffe8
00239c   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	76; src/clock.c	char* to_double_digits(int value){
002874   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002876   ffe5
002878   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00287a   ffd9
00287c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00287e   ffe5
002880   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002882   ffe5
002884   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002886   ffe5
002888   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00288a   ffe5
00288c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00288e   ffe5
002890   0e02     movlw	0x2                	MOVLW	0x02
002892   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002894   f000
002896   0e03     movlw	0x3                	MOVLW	0x03
002898   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00289a   f001
                                           ;	.line	78; src/clock.c	sprintf(buffer, "%02d", value);
00289c   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
00289e   6e03     movwf	0x3, 0             	MOVWF	r0x03
0028a0   0e54     movlw	0x54               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0028a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0028a4   0e80     movlw	0x80               	MOVLW	0x80
0028a6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0028a8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0028aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   0e17     movlw	0x17               	MOVLW	HIGH(__str_3)
0028b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b8   0efa     movlw	0xfa               	MOVLW	LOW(__str_3)
0028ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c8   ec87     call	0x1d0e, 0           	CALL	_sprintf
0028ca   f00e
0028cc   0e08     movlw	0x8                	MOVLW	0x08
0028ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	79; src/clock.c	return buffer;
0028d0   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
0028d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0028d4   0e54     movlw	0x54               	MOVLW	LOW(_to_double_digits_buffer_1_1)
0028d6   6e00     movwf	0, 0               	MOVWF	r0x00
0028d8   0e80     movlw	0x80               	MOVLW	0x80
0028da   6e02     movwf	0x2, 0             	MOVWF	r0x02
0028dc   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0028de   fff4
0028e0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0028e2   fff3
0028e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028e6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028e8   f004
0028ea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028ec   f003
0028ee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028f0   f002
0028f2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028f4   f001
0028f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028f8   f000
0028fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028fc   ffd9
0028fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	65; src/clock.c	void display_string(BYTE pos, char* text){
00191a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00191c   ffe5
00191e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001920   ffd9
001922   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001924   ffe5
001926   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001928   ffe5
00192a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00192c   ffe5
00192e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001930   ffe5
001932   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001934   ffe5
001936   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001938   ffe5
00193a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00193c   ffe5
00193e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001940   ffe5
001942   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001944   ffe5
001946   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001948   ffe5
00194a   0e02     movlw	0x2                	MOVLW	0x02
00194c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00194e   f000
001950   0e03     movlw	0x3                	MOVLW	0x03
001952   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001954   f001
001956   0e04     movlw	0x4                	MOVLW	0x04
001958   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00195a   f002
00195c   0e05     movlw	0x5                	MOVLW	0x05
00195e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001960   f003
                                           ;	.line	66; src/clock.c	BYTE        l = strlen(text);
001962   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001966   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001968   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00196a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00196c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00196e   ec09     call	0x2a12, 0           	CALL	_strlen
001970   f015
001972   6e04     movwf	0x4, 0             	MOVWF	r0x04
001974   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001976   f005
001978   0e03     movlw	0x3                	MOVLW	0x03
00197a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	67; src/clock.c	BYTE      max = 32-pos;    
00197c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00197e   0820     sublw	0x20               	SUBLW	0x20
001980   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	68; src/clock.c	char       *d = (char*)&LCDText[pos];
001982   6a06     clrf	0x6, 0              	CLRF	r0x06
001984   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001986   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001988   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00198a   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00198c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00198e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001990   5000     movf	0, 0, 0             	MOVF	r0x00, W
001992   6e00     movwf	0, 0               	MOVWF	r0x00
001994   0e80     movlw	0x80               	MOVLW	0x80
001996   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	70; src/clock.c	size_t      n = (l<max)?l:max;
001998   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00199a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00199c   e302     bnc	0x19a2               	BNC	_00143_DS_
00199e   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0019a0   f004
                                           _00143_DS_:
0019a2   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	71; src/clock.c	if (n != 0)
0019a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0019a8   e027     bz	0x19f8                	BZ	_00139_DS_
                                           _00135_DS_:
                                           ;	.line	72; src/clock.c	while (n-- != 0)*d++ = *s++;
0019aa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0019ac   f008
0019ae   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
0019b0   f009
0019b2   0eff     movlw	0xff               	MOVLW	0xff
0019b4   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019b6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019b8   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0019ba   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0019bc   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
0019be   e01c     bz	0x19f8                	BZ	_00139_DS_
0019c0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0019c2   ffe9
0019c4   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0019c6   fff3
0019c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019ca   ec36     call	0x2c6c, 0           	CALL	__gptrget1
0019cc   f016
0019ce   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019d0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0019d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0019d4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0019d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0019d8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0019da   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0019dc   ffe5
0019de   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0019e0   ffe9
0019e2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0019e4   fff3
0019e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0019e8   ec6d     call	0x2cda, 0           	CALL	__gptrput1
0019ea   f016
0019ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0019ee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0019f0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0019f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0019f4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0019f6   d7d9     bra	0x19aa               	BRA	_00135_DS_
                                           _00139_DS_:
                                           ;	.line	73; src/clock.c	LCDUpdate();
0019f8   ec21     call	0x842, 0            	CALL	_LCDUpdate
0019fa   f004
0019fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0019fe   f009
001a00   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a02   f008
001a04   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a06   f007
001a08   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a0a   f006
001a0c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a0e   f005
001a10   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a12   f004
001a14   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a16   f003
001a18   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a1a   f002
001a1c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a1e   f001
001a20   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a22   f000
001a24   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a26   ffd9
001a28   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	48; src/clock.c	int get_input(int maxvalue, char *text){
0011ca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011cc   ffe5
0011ce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011d0   ffd9
0011d2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011d4   ffe5
0011d6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011d8   ffe5
0011da   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011dc   ffe5
0011de   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011e0   ffe5
0011e2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011e4   ffe5
0011e6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011e8   ffe5
0011ea   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011ec   ffe5
0011ee   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011f0   ffe5
0011f2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011f4   ffe5
0011f6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011f8   ffe5
0011fa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011fc   ffe5
0011fe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001200   ffe5
001202   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001204   ffe5
001206   0e02     movlw	0x2                	MOVLW	0x02
001208   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00120a   f000
00120c   0e03     movlw	0x3                	MOVLW	0x03
00120e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001210   f001
001212   0e04     movlw	0x4                	MOVLW	0x04
001214   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001216   f002
001218   0e05     movlw	0x5                	MOVLW	0x05
00121a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00121c   f003
00121e   0e06     movlw	0x6                	MOVLW	0x06
001220   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001222   f004
                                           ;	.line	49; src/clock.c	BYTE length = strlen(text);
001224   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001228   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00122a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00122e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001230   ec09     call	0x2a12, 0           	CALL	_strlen
001232   f015
001234   6e05     movwf	0x5, 0             	MOVWF	r0x05
001236   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001238   f006
00123a   0e03     movlw	0x3                	MOVLW	0x03
00123c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	50; src/clock.c	int value = 0;
00123e   6a06     clrf	0x6, 0              	CLRF	r0x06
001240   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	51; src/clock.c	display_string(0, text);
001242   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001244   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001246   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001248   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00124a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00124c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00124e   0e00     movlw	0                  	MOVLW	0x00
001250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001252   ec8d     call	0x191a, 0           	CALL	_display_string
001254   f00c
001256   0e04     movlw	0x4                	MOVLW	0x04
001258   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	52; src/clock.c	while(1)
00125a   2805     incf	0x5, 0, 0           	INCF	r0x05, W
00125c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00130_DS_:
                                           ;	.line	54; src/clock.c	DelayMs(10);
00125e   0e68     movlw	0x68               	MOVLW	0x68
001260   6e03     movwf	0x3, 0             	MOVWF	r0x03
001262   0e42     movlw	0x42               	MOVLW	0x42
001264   6e04     movwf	0x4, 0             	MOVWF	r0x04
001266   6a05     clrf	0x5, 0              	CLRF	r0x05
001268   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00115_DS_:
00126a   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
00126c   f009
00126e   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
001270   f00a
001272   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
001274   f00b
001276   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
001278   f00c
00127a   0eff     movlw	0xff               	MOVLW	0xff
00127c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00127e   0eff     movlw	0xff               	MOVLW	0xff
001280   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001282   0eff     movlw	0xff               	MOVLW	0xff
001284   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001286   0eff     movlw	0xff               	MOVLW	0xff
001288   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
00128a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00128c   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
00128e   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
001290   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
001292   e1eb     bnz	0x126a               	BNZ	_00115_DS_
                                           ;	.line	55; src/clock.c	if(BUTTON1_IO == 0u){
001294   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
001296   d006     bra	0x12a4               	BRA	_00122_DS_
                                           ;	.line	56; src/clock.c	LCDErase();
001298   ec41     call	0x2682, 0           	CALL	_LCDErase
00129a   f013
                                           ;	.line	57; src/clock.c	return value;
00129c   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00129e   fff3
0012a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012a2   d02e     bra	0x1300               	BRA	_00128_DS_
                                           _00122_DS_:
                                           ;	.line	59; src/clock.c	if(BUTTON0_IO == 0u) 
0012a4   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
0012a6   d012     bra	0x12cc               	BRA	_00124_DS_
                                           ;	.line	60; src/clock.c	value = (++value)%maxvalue;
0012a8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0012aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012ac   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0012ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012be   ecfc     call	0x1df8, 0           	CALL	__modsint
0012c0   f00e
0012c2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0012c4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0012c6   f007
0012c8   0e04     movlw	0x4                	MOVLW	0x04
0012ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00124_DS_:
                                           ;	.line	61; src/clock.c	display_string(length + 1, to_double_digits(value));
0012cc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d4   ec3a     call	0x2874, 0           	CALL	_to_double_digits
0012d6   f014
0012d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0012da   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0012dc   f004
0012de   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0012e0   f005
0012e2   0e02     movlw	0x2                	MOVLW	0x02
0012e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0012e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f6   ec8d     call	0x191a, 0           	CALL	_display_string
0012f8   f00c
0012fa   0e04     movlw	0x4                	MOVLW	0x04
0012fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012fe   d7af     bra	0x125e               	BRA	_00130_DS_
                                           _00128_DS_:
001300   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001302   f00c
001304   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001306   f00b
001308   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00130a   f00a
00130c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00130e   f009
001310   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001312   f008
001314   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001316   f007
001318   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00131a   f006
00131c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00131e   f005
001320   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001322   f004
001324   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001326   f003
001328   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00132a   f002
00132c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00132e   f001
001330   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001332   f000
001334   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001336   ffd9
001338   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_clock	code
                                           _init_clock:
                                           ;	.line	40; src/clock.c	void init_clock(time t){
0016e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0016e6   ffe5
0016e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0016ea   ffd9
0016ec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016ee   ffe5
0016f0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0016f2   ffe5
0016f4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0016f6   ffe5
0016f8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0016fa   ffe5
0016fc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0016fe   ffe5
001700   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001702   ffe5
001704   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001706   ffe5
001708   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00170a   ffe5
00170c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00170e   ffe5
001710   0e02     movlw	0x2                	MOVLW	0x02
001712   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001714   f000
001716   0e03     movlw	0x3                	MOVLW	0x03
001718   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00171a   f001
00171c   0e04     movlw	0x4                	MOVLW	0x04
00171e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001720   f002
                                           ;	.line	42; src/clock.c	h = get_input(24, "HOURS:");
001722   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001724   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001726   0e17     movlw	0x17               	MOVLW	HIGH(__str_0)
001728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00172a   0ede     movlw	0xde               	MOVLW	LOW(__str_0)
00172c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00172e   0e00     movlw	0                  	MOVLW	0x00
001730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001732   0e18     movlw	0x18               	MOVLW	0x18
001734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001736   ece5     call	0x11ca, 0           	CALL	_get_input
001738   f008
00173a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00173c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00173e   f004
001740   0e05     movlw	0x5                	MOVLW	0x05
001742   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	43; src/clock.c	m = get_input(60, "MINUTES:");
001744   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001746   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001748   0e17     movlw	0x17               	MOVLW	HIGH(__str_1)
00174a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00174c   0ee6     movlw	0xe6               	MOVLW	LOW(__str_1)
00174e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001750   0e00     movlw	0                  	MOVLW	0x00
001752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001754   0e3c     movlw	0x3c               	MOVLW	0x3c
001756   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001758   ece5     call	0x11ca, 0           	CALL	_get_input
00175a   f008
00175c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00175e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001760   f006
001762   0e05     movlw	0x5                	MOVLW	0x05
001764   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	44; src/clock.c	s = get_input(60, "SECONDS:");
001766   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001768   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00176a   0e17     movlw	0x17               	MOVLW	HIGH(__str_2)
00176c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00176e   0ef0     movlw	0xf0               	MOVLW	LOW(__str_2)
001770   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001772   0e00     movlw	0                  	MOVLW	0x00
001774   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001776   0e3c     movlw	0x3c               	MOVLW	0x3c
001778   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00177a   ece5     call	0x11ca, 0           	CALL	_get_input
00177c   f008
00177e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001780   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
001782   f008
001784   0e05     movlw	0x5                	MOVLW	0x05
001786   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	45; src/clock.c	time_set(t,h,m,s);
001788   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00178a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00178c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00178e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001790   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001794   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001796   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001798   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00179a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00179c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00179e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ac   ec6e     call	0x1edc, 0           	CALL	_time_set
0017ae   f00f
0017b0   0e09     movlw	0x9                	MOVLW	0x09
0017b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017b4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0017b6   f008
0017b8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0017ba   f007
0017bc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0017be   f006
0017c0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017c2   f005
0017c4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017c6   f004
0017c8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017ca   f003
0017cc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017ce   f002
0017d0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017d2   f001
0017d4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017d6   f000
0017d8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017da   ffd9
0017dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0017de   4f48     dcfsnz	0x48, 0x1, 0x1    	DB	0x48, 0x4f, 0x55, 0x52, 0x53, 0x3a, 0x00
0017e0   5255     movf	0x55, 0x1, 0        
0017e2   3a53     swapf	0x53, 0x1, 0       
0017e4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0017e6   494d     infsnz	0x4d, 0, 0x1      	DB	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x3a, 0x00
0017e8   554e     subfwb	0x4e, 0, 0x1      
0017ea   4554     rlncf	0x54, 0, 0x1       
0017ec   3a53     swapf	0x53, 0x1, 0       
0017ee   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0017f0   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x3a, 0x00
0017f2   4f43     dcfsnz	0x43, 0x1, 0x1    
0017f4   444e     rlncf	0x4e, 0, 0         
0017f6   3a53     swapf	0x53, 0x1, 0       
0017f8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0017fa   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
0017fc   6432     cpfsgt	0x32, 0           
0017fe   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1412 (0x0584) bytes ( 1.08%)
                                           ;           	  706 (0x02c2) words
                                           ; udata size:	   38 (0x0026) bytes ( 0.99%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002682   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002684   ffe5
002686   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002688   ffd9
00268a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00268c   ffe5
00268e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002690   ffe5
002692   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002694   ffe5
002696   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002698   ffe5
00269a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00269c   ffe5
00269e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0026a0   ffe5
0026a2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0026a4   ffe5
0026a6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0026a8   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
0026aa   0e01     movlw	0x1                	MOVLW	0x01
0026ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ae   0e00     movlw	0                  	MOVLW	0x00
0026b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b2   ec88     call	0x2b10, 0           	CALL	_LCDWrite
0026b4   f015
0026b6   0e02     movlw	0x2                	MOVLW	0x02
0026b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
0026ba   0e48     movlw	0x48               	MOVLW	0x48
0026bc   6e00     movwf	0, 0               	MOVWF	r0x00
0026be   0e0d     movlw	0xd                	MOVLW	0x0d
0026c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0026c2   6a02     clrf	0x2, 0              	CLRF	r0x02
0026c4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0026c6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0026c8   f004
0026ca   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0026cc   f005
0026ce   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0026d0   f006
0026d2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0026d4   f007
0026d6   0eff     movlw	0xff               	MOVLW	0xff
0026d8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0026da   0eff     movlw	0xff               	MOVLW	0xff
0026dc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0026de   0eff     movlw	0xff               	MOVLW	0xff
0026e0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026e2   0eff     movlw	0xff               	MOVLW	0xff
0026e4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0026e6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026e8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0026ea   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0026ec   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0026ee   e1eb     bnz	0x26c6               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
0026f0   0e00     movlw	0                  	MOVLW	0x00
0026f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026f4   0e20     movlw	0x20               	MOVLW	0x20
0026f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026f8   0e20     movlw	0x20               	MOVLW	0x20
0026fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026fc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0026fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002700   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002704   ecde     call	0x1fbc, 0           	CALL	_memset
002706   f00f
002708   0e05     movlw	0x5                	MOVLW	0x05
00270a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00270c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00270e   f007
002710   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002712   f006
002714   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002716   f005
002718   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00271a   f004
00271c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00271e   f003
002720   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002722   f002
002724   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002726   f001
002728   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00272a   f000
00272c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00272e   ffd9
002730   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000878   f015
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec88     call	0x2b10, 0           	CALL	_LCDWrite
00093a   f015
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000982   f015
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000a44   f015
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
000ad4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ad6   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000ad8   0e00     movlw	0                  	MOVLW	0x00
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0e20     movlw	0x20               	MOVLW	0x20
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0e20     movlw	0x20               	MOVLW	0x20
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ecde     call	0x1fbc, 0           	CALL	_memset
000aee   f00f
000af0   0e05     movlw	0x5                	MOVLW	0x05
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000af4   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000af6   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000af8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000afa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000afc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000afe   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000b00   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000b02   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000b04   0ea0     movlw	0xa0               	MOVLW	0xa0
000b06   6e00     movwf	0, 0               	MOVWF	r0x00
000b08   0e09     movlw	0x9                	MOVLW	0x09
000b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b0c   0e01     movlw	0x1                	MOVLW	0x01
000b0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b10   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000b12   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b14   f004
000b16   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b18   f005
000b1a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b1c   f006
000b1e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b20   f007
000b22   0eff     movlw	0xff               	MOVLW	0xff
000b24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b26   0eff     movlw	0xff               	MOVLW	0xff
000b28   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b2a   0eff     movlw	0xff               	MOVLW	0xff
000b2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b2e   0eff     movlw	0xff               	MOVLW	0xff
000b30   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b34   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b3a   e1eb     bnz	0xb12                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000b3c   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000b3e   0e03     movlw	0x3                	MOVLW	0x03
000b40   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000b42   0000     nop                      	nop 
000b44   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000b46   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000b48   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b4a   f001
000b4c   6a02     clrf	0x2, 0              	CLRF	r0x02
000b4e   0e00     movlw	0                  	MOVLW	0x00
000b50   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b52   e102     bnz	0xb58                	BNZ	_00220_DS_
000b54   0e03     movlw	0x3                	MOVLW	0x03
000b56   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000b58   e239     bc	0xbcc                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000b5a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000b5c   0e11     movlw	0x11               	MOVLW	0x11
000b5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b60   6a02     clrf	0x2, 0              	CLRF	r0x02
000b62   6a03     clrf	0x3, 0              	CLRF	r0x03
000b64   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000b66   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b68   f005
000b6a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b6c   f006
000b6e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b70   f007
000b72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000b74   f008
000b76   0eff     movlw	0xff               	MOVLW	0xff
000b78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000b7a   0eff     movlw	0xff               	MOVLW	0xff
000b7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b7e   0eff     movlw	0xff               	MOVLW	0xff
000b80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b82   0eff     movlw	0xff               	MOVLW	0xff
000b84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b8a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b8c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000b8e   e1eb     bnz	0xb66                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000b90   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000b92   0e48     movlw	0x48               	MOVLW	0x48
000b94   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b96   0e0d     movlw	0xd                	MOVLW	0x0d
000b98   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b9a   6a03     clrf	0x3, 0              	CLRF	r0x03
000b9c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000b9e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ba0   f005
000ba2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ba4   f006
000ba6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ba8   f007
000baa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bac   f008
000bae   0eff     movlw	0xff               	MOVLW	0xff
000bb0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bb2   0eff     movlw	0xff               	MOVLW	0xff
000bb4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb6   0eff     movlw	0xff               	MOVLW	0xff
000bb8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bba   0eff     movlw	0xff               	MOVLW	0xff
000bbc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000bbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000bc6   e1eb     bnz	0xb9e                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bca   d7be     bra	0xb48                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000bcc   0e38     movlw	0x38               	MOVLW	0x38
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e00     movlw	0                  	MOVLW	0x00
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000bd6   f015
000bd8   0e02     movlw	0x2                	MOVLW	0x02
000bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000bdc   0e55     movlw	0x55               	MOVLW	0x55
000bde   6e00     movwf	0, 0               	MOVWF	r0x00
000be0   6a01     clrf	0x1, 0              	CLRF	r0x01
000be2   6a02     clrf	0x2, 0              	CLRF	r0x02
000be4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000be6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000be8   f004
000bea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bec   f005
000bee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bf0   f006
000bf2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bf4   f007
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bfa   0eff     movlw	0xff               	MOVLW	0xff
000bfc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c08   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c0a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e1eb     bnz	0xbe6                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000c10   0e06     movlw	0x6                	MOVLW	0x06
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e00     movlw	0                  	MOVLW	0x00
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000c1a   f015
000c1c   0e02     movlw	0x2                	MOVLW	0x02
000c1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000c20   0e55     movlw	0x55               	MOVLW	0x55
000c22   6e00     movwf	0, 0               	MOVWF	r0x00
000c24   6a01     clrf	0x1, 0              	CLRF	r0x01
000c26   6a02     clrf	0x2, 0              	CLRF	r0x02
000c28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000c2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c2c   f004
000c2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c30   f005
000c32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c34   f006
000c36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c38   f007
000c3a   0eff     movlw	0xff               	MOVLW	0xff
000c3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c3e   0eff     movlw	0xff               	MOVLW	0xff
000c40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c42   0eff     movlw	0xff               	MOVLW	0xff
000c44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c46   0eff     movlw	0xff               	MOVLW	0xff
000c48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c52   e1eb     bnz	0xc2a                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000c54   0e0c     movlw	0xc                	MOVLW	0x0c
000c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c58   0e00     movlw	0                  	MOVLW	0x00
000c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5c   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000c5e   f015
000c60   0e02     movlw	0x2                	MOVLW	0x02
000c62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000c64   0e55     movlw	0x55               	MOVLW	0x55
000c66   6e00     movwf	0, 0               	MOVWF	r0x00
000c68   6a01     clrf	0x1, 0              	CLRF	r0x01
000c6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000c6e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c70   f004
000c72   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c74   f005
000c76   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c78   f006
000c7a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c7c   f007
000c7e   0eff     movlw	0xff               	MOVLW	0xff
000c80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c82   0eff     movlw	0xff               	MOVLW	0xff
000c84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c86   0eff     movlw	0xff               	MOVLW	0xff
000c88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c8a   0eff     movlw	0xff               	MOVLW	0xff
000c8c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c90   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c92   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c94   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c96   e1eb     bnz	0xc6e                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000c98   0e01     movlw	0x1                	MOVLW	0x01
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   0e00     movlw	0                  	MOVLW	0x00
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   ec88     call	0x2b10, 0           	CALL	_LCDWrite
000ca2   f015
000ca4   0e02     movlw	0x2                	MOVLW	0x02
000ca6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000ca8   0e48     movlw	0x48               	MOVLW	0x48
000caa   6e00     movwf	0, 0               	MOVWF	r0x00
000cac   0e0d     movlw	0xd                	MOVLW	0x0d
000cae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cb0   6a02     clrf	0x2, 0              	CLRF	r0x02
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000cb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000cb6   f004
000cb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000cba   f005
000cbc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cbe   f006
000cc0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cc2   f007
000cc4   0eff     movlw	0xff               	MOVLW	0xff
000cc6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cc8   0eff     movlw	0xff               	MOVLW	0xff
000cca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cd0   0eff     movlw	0xff               	MOVLW	0xff
000cd2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000cd4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000cd8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cda   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cdc   e1eb     bnz	0xcb4                	BNZ	_00185_DS_
000cde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ce0   f008
000ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000ce4   f007
000ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ce8   f006
000cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cec   f005
000cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf0   f004
000cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cf4   f003
000cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cf8   f002
000cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cfc   f001
000cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d00   f000
000d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d04   ffd9
000d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002b10   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b12   ffe5
002b14   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b16   ffd9
002b18   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1a   ffe5
002b1c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b1e   ffe5
002b20   0e02     movlw	0x2                	MOVLW	0x02
002b22   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b24   f000
002b26   0e03     movlw	0x3                	MOVLW	0x03
002b28   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b2a   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002b2c   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
002b2e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002b30   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
002b32   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
002b34   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b36   0b01     andlw	0x1                	ANDLW	0x01
002b38   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b3a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b3c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002b3e   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002b40   0bfb     andlw	0xfb               	ANDLW	0xfb
002b42   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002b44   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
002b46   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002b48   ff8d
002b4a   0000     nop                      	nop 
002b4c   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
002b4e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002b50   0000     nop                      	nop 
002b52   0000     nop                      	nop 
002b54   0000     nop                      	nop 
002b56   0000     nop                      	nop 
002b58   0000     nop                      	nop 
002b5a   0000     nop                      	nop 
002b5c   0000     nop                      	nop 
002b5e   0000     nop                      	nop 
002b60   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
002b62   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002b64   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b66   f001
002b68   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b6a   f000
002b6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b6e   ffd9
002b70   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
001046   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001048   ffe5
00104a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00104c   ffd9
00104e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001050   ffe5
001052   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001054   ffe5
001056   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001058   ffe5
00105a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00105c   ffe5
00105e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001060   ffe5
001062   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001064   ffe5
001066   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001068   ffe5
00106a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00106c   ffe5
00106e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001070   ffe5
001072   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001074   ffe5
001076   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001078   ffe5
00107a   0e02     movlw	0x2                	MOVLW	0x02
00107c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00107e   f000
001080   0e03     movlw	0x3                	MOVLW	0x03
001082   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001084   f001
001086   0e04     movlw	0x4                	MOVLW	0x04
001088   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00108a   f002
00108c   0e05     movlw	0x5                	MOVLW	0x05
00108e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001090   f003
001092   0e06     movlw	0x6                	MOVLW	0x06
001094   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001096   f004
001098   0e07     movlw	0x7                	MOVLW	0x07
00109a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00109c   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
00109e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010a0   0f04     addlw	0x4                	ADDLW	0x04
0010a2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010a4   0e00     movlw	0                  	MOVLW	0x00
0010a6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0010a8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0010aa   0e00     movlw	0                  	MOVLW	0x00
0010ac   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0010ae   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010b0   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0010b2   ffe9
0010b4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0010b6   fff3
0010b8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0010ba   ec0b     call	0x2c16, 0           	CALL	__gptrget2
0010bc   f016
0010be   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010c0   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0010c2   f007
0010c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010c6   0f04     addlw	0x4                	ADDLW	0x04
0010c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010ca   0e00     movlw	0                  	MOVLW	0x00
0010cc   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0010ce   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010d0   0e00     movlw	0                  	MOVLW	0x00
0010d2   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0010d4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0010d6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0010d8   ffe9
0010da   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0010dc   fff3
0010de   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010e0   ec0b     call	0x2c16, 0           	CALL	__gptrget2
0010e2   f016
0010e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0010e6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0010e8   f009
0010ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010ec   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0010ee   e103     bnz	0x10f6               	BNZ	_00166_DS_
0010f0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0010f2   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0010f4   e003     bz	0x10fc                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
0010f6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0010f8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0010fa   d04e     bra	0x1198               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
0010fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010fe   0f02     addlw	0x2                	ADDLW	0x02
001100   6e06     movwf	0x6, 0             	MOVWF	r0x06
001102   0e00     movlw	0                  	MOVLW	0x00
001104   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001106   6e07     movwf	0x7, 0             	MOVWF	r0x07
001108   0e00     movlw	0                  	MOVLW	0x00
00110a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00110c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00110e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001110   ffe9
001112   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001114   fff3
001116   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001118   ec0b     call	0x2c16, 0           	CALL	__gptrget2
00111a   f016
00111c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00111e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001120   f007
001122   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001124   0f02     addlw	0x2                	ADDLW	0x02
001126   6e08     movwf	0x8, 0             	MOVWF	r0x08
001128   0e00     movlw	0                  	MOVLW	0x00
00112a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00112c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00112e   0e00     movlw	0                  	MOVLW	0x00
001130   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001132   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001134   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001136   ffe9
001138   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00113a   fff3
00113c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00113e   ec0b     call	0x2c16, 0           	CALL	__gptrget2
001140   f016
001142   6e08     movwf	0x8, 0             	MOVWF	r0x08
001144   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001146   f009
001148   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00114a   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00114c   e103     bnz	0x1154               	BNZ	_00168_DS_
00114e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001150   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001152   e003     bz	0x115a                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
001154   6af3     clrf	0xf3, 0             	CLRF	PRODL
001156   6ae8     clrf	0xe8, 0             	CLRF	WREG
001158   d01f     bra	0x1198               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
00115a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00115c   ffe9
00115e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001160   fff3
001162   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001164   ec0b     call	0x2c16, 0           	CALL	__gptrget2
001166   f016
001168   6e00     movwf	0, 0               	MOVWF	r0x00
00116a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00116c   f001
00116e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001170   ffe9
001172   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001174   fff3
001176   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001178   ec0b     call	0x2c16, 0           	CALL	__gptrget2
00117a   f016
00117c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00117e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001180   f004
001182   5000     movf	0, 0, 0             	MOVF	r0x00, W
001184   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
001186   e103     bnz	0x118e               	BNZ	_00170_DS_
001188   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00118a   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
00118c   e003     bz	0x1194                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
00118e   6af3     clrf	0xf3, 0             	CLRF	PRODL
001190   6ae8     clrf	0xe8, 0             	CLRF	WREG
001192   d002     bra	0x1198               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
001194   6af3     clrf	0xf3, 0             	CLRF	PRODL
001196   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
001198   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00119a   f00a
00119c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00119e   f009
0011a0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0011a2   f008
0011a4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0011a6   f007
0011a8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0011aa   f006
0011ac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0011ae   f005
0011b0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0011b2   f004
0011b4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0011b6   f003
0011b8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0011ba   f002
0011bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0011be   f001
0011c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011c2   f000
0011c4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011c6   ffd9
0011c8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
0015c2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015c4   ffe5
0015c6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015c8   ffd9
0015ca   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015cc   ffe5
0015ce   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0015d0   ffe5
0015d2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0015d4   ffe5
0015d6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0015d8   ffe5
0015da   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0015dc   ffe5
0015de   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0015e0   ffe5
0015e2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0015e4   ffe5
0015e6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0015e8   ffe5
0015ea   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0015ec   ffe5
0015ee   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0015f0   ffe5
0015f2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0015f4   ffe5
0015f6   0e02     movlw	0x2                	MOVLW	0x02
0015f8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0015fa   f000
0015fc   0e03     movlw	0x3                	MOVLW	0x03
0015fe   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001600   f001
001602   0e04     movlw	0x4                	MOVLW	0x04
001604   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001606   f002
001608   0e05     movlw	0x5                	MOVLW	0x05
00160a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00160c   f003
00160e   0e06     movlw	0x6                	MOVLW	0x06
001610   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001612   f004
001614   0e07     movlw	0x7                	MOVLW	0x07
001616   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001618   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
00161a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00161c   0f04     addlw	0x4                	ADDLW	0x04
00161e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001620   0e00     movlw	0                  	MOVLW	0x00
001622   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001624   6e07     movwf	0x7, 0             	MOVWF	r0x07
001626   0e00     movlw	0                  	MOVLW	0x00
001628   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00162a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00162c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00162e   ffe9
001630   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001632   fff3
001634   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001636   ec0b     call	0x2c16, 0           	CALL	__gptrget2
001638   f016
00163a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00163c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00163e   f007
001640   5000     movf	0, 0, 0             	MOVF	r0x00, W
001642   0f02     addlw	0x2                	ADDLW	0x02
001644   6e08     movwf	0x8, 0             	MOVWF	r0x08
001646   0e00     movlw	0                  	MOVLW	0x00
001648   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00164a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00164c   0e00     movlw	0                  	MOVLW	0x00
00164e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001650   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001652   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001654   ffe9
001656   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001658   fff3
00165a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00165c   ec0b     call	0x2c16, 0           	CALL	__gptrget2
00165e   f016
001660   6e08     movwf	0x8, 0             	MOVWF	r0x08
001662   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001664   f009
001666   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001668   ffe9
00166a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00166c   fff3
00166e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001670   ec0b     call	0x2c16, 0           	CALL	__gptrget2
001672   f016
001674   6e00     movwf	0, 0               	MOVWF	r0x00
001676   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001678   f001
00167a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00167c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00167e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001680   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001682   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001684   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001686   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00168c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001692   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001696   0e2a     movlw	0x2a               	MOVLW	HIGH(__str_0)
001698   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169a   0e02     movlw	0x2                	MOVLW	LOW(__str_0)
00169c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0016a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016aa   ec87     call	0x1d0e, 0           	CALL	_sprintf
0016ac   f00e
0016ae   0e0c     movlw	0xc                	MOVLW	0x0c
0016b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016b2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0016b4   f00a
0016b6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0016b8   f009
0016ba   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0016bc   f008
0016be   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0016c0   f007
0016c2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0016c4   f006
0016c6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0016c8   f005
0016ca   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0016cc   f004
0016ce   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0016d0   f003
0016d2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0016d4   f002
0016d6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0016d8   f001
0016da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016dc   f000
0016de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016e0   ffd9
0016e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002a92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a94   ffe5
002a96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a98   ffd9
002a9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a9c   ffe5
002a9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002aa0   ffe5
002aa2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002aa4   ffe5
002aa6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002aa8   ffe5
002aaa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002aac   ffe5
002aae   0e02     movlw	0x2                	MOVLW	0x02
002ab0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002ab2   f000
002ab4   0e03     movlw	0x3                	MOVLW	0x03
002ab6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002ab8   f001
002aba   0e04     movlw	0x4                	MOVLW	0x04
002abc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002abe   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002ac0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ac2   ffe9
002ac4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002ac6   fff3
002ac8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002aca   ec0b     call	0x2c16, 0           	CALL	__gptrget2
002acc   f016
002ace   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ad0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ad2   f004
002ad4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002ad6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002ad8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002ada   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ade   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ae6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aea   5000     movf	0, 0, 0             	MOVF	r0x00, W
002aec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aee   eccf     call	0x239e, 0           	CALL	_set_hours
002af0   f011
002af2   0e05     movlw	0x5                	MOVLW	0x05
002af4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002af6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002af8   f004
002afa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002afc   f003
002afe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b00   f002
002b02   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b04   f001
002b06   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b08   f000
002b0a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b0c   ffd9
002b0e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
00245a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00245c   ffe5
00245e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002460   ffd9
002462   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002464   ffe5
002466   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002468   ffe5
00246a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00246c   ffe5
00246e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002470   ffe5
002472   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002474   ffe5
002476   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002478   ffe5
00247a   0e02     movlw	0x2                	MOVLW	0x02
00247c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00247e   f000
002480   0e03     movlw	0x3                	MOVLW	0x03
002482   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002484   f001
002486   0e04     movlw	0x4                	MOVLW	0x04
002488   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00248a   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
00248c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00248e   0f02     addlw	0x2                	ADDLW	0x02
002490   6e03     movwf	0x3, 0             	MOVWF	r0x03
002492   0e00     movlw	0                  	MOVLW	0x00
002494   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002496   6e04     movwf	0x4, 0             	MOVWF	r0x04
002498   0e00     movlw	0                  	MOVLW	0x00
00249a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00249c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00249e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0024a0   ffe9
0024a2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0024a4   fff3
0024a6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024a8   ec0b     call	0x2c16, 0           	CALL	__gptrget2
0024aa   f016
0024ac   6e03     movwf	0x3, 0             	MOVWF	r0x03
0024ae   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0024b0   f004
0024b2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0024b4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0024b6   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0024b8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024cc   eca7     call	0x214e, 0           	CALL	_set_minutes
0024ce   f010
0024d0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0024d2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0024d4   f004
0024d6   0e05     movlw	0x5                	MOVLW	0x05
0024d8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0024da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024dc   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0024de   e00a     bz	0x24f4                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0024e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ec   ec49     call	0x2a92, 0           	CALL	_add_hour
0024ee   f015
0024f0   0e03     movlw	0x3                	MOVLW	0x03
0024f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0024f4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0024f6   f005
0024f8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0024fa   f004
0024fc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024fe   f003
002500   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002502   f002
002504   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002506   f001
002508   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00250a   f000
00250c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00250e   ffd9
002510   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
002512   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002514   ffe5
002516   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002518   ffd9
00251a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00251c   ffe5
00251e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002520   ffe5
002522   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002524   ffe5
002526   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002528   ffe5
00252a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00252c   ffe5
00252e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002530   ffe5
002532   0e02     movlw	0x2                	MOVLW	0x02
002534   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002536   f000
002538   0e03     movlw	0x3                	MOVLW	0x03
00253a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00253c   f001
00253e   0e04     movlw	0x4                	MOVLW	0x04
002540   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002542   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
002544   5000     movf	0, 0, 0             	MOVF	r0x00, W
002546   0f04     addlw	0x4                	ADDLW	0x04
002548   6e03     movwf	0x3, 0             	MOVWF	r0x03
00254a   0e00     movlw	0                  	MOVLW	0x00
00254c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00254e   6e04     movwf	0x4, 0             	MOVWF	r0x04
002550   0e00     movlw	0                  	MOVLW	0x00
002552   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002554   6e05     movwf	0x5, 0             	MOVWF	r0x05
002556   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002558   ffe9
00255a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00255c   fff3
00255e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002560   ec0b     call	0x2c16, 0           	CALL	__gptrget2
002562   f016
002564   6e03     movwf	0x3, 0             	MOVWF	r0x03
002566   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002568   f004
00256a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00256c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00256e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002570   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002574   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002578   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00257a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00257c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00257e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002580   5000     movf	0, 0, 0             	MOVF	r0x00, W
002582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002584   ec43     call	0x2086, 0           	CALL	_set_seconds
002586   f010
002588   6e03     movwf	0x3, 0             	MOVWF	r0x03
00258a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00258c   f004
00258e   0e05     movlw	0x5                	MOVLW	0x05
002590   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002592   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002594   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002596   e00a     bz	0x25ac                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002598   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00259a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00259c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00259e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025a4   ec2d     call	0x245a, 0           	CALL	_add_minute
0025a6   f012
0025a8   0e03     movlw	0x3                	MOVLW	0x03
0025aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
0025ac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0025ae   f005
0025b0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0025b2   f004
0025b4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0025b6   f003
0025b8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0025ba   f002
0025bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025be   f001
0025c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0025c2   f000
0025c4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0025c6   ffd9
0025c8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
002086   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002088   ffe5
00208a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00208c   ffd9
00208e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002090   ffe5
002092   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002094   ffe5
002096   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002098   ffe5
00209a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00209c   ffe5
00209e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0020a0   ffe5
0020a2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0020a4   ffe5
0020a6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0020a8   ffe5
0020aa   0e02     movlw	0x2                	MOVLW	0x02
0020ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0020ae   f000
0020b0   0e03     movlw	0x3                	MOVLW	0x03
0020b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0020b4   f001
0020b6   0e04     movlw	0x4                	MOVLW	0x04
0020b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0020ba   f002
0020bc   0e05     movlw	0x5                	MOVLW	0x05
0020be   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0020c0   f003
0020c2   0e06     movlw	0x6                	MOVLW	0x06
0020c4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0020c6   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
0020c8   0e00     movlw	0                  	MOVLW	0x00
0020ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020cc   0e3c     movlw	0x3c               	MOVLW	0x3c
0020ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020d0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020d8   ec94     call	0x1b28, 0           	CALL	__divsint
0020da   f00d
0020dc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0020de   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0020e0   f006
0020e2   0e04     movlw	0x4                	MOVLW	0x04
0020e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
0020e6   0e04     movlw	0x4                	MOVLW	0x04
0020e8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0020ea   0e00     movlw	0                  	MOVLW	0x00
0020ec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0020ee   0e00     movlw	0                  	MOVLW	0x00
0020f0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0020f2   0e00     movlw	0                  	MOVLW	0x00
0020f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f6   0e3c     movlw	0x3c               	MOVLW	0x3c
0020f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0020fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002102   ecfc     call	0x1df8, 0           	CALL	__modsint
002104   f00e
002106   6e03     movwf	0x3, 0             	MOVWF	r0x03
002108   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00210a   f004
00210c   0e04     movlw	0x4                	MOVLW	0x04
00210e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002110   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002112   ffe5
002114   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002116   fff4
002118   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00211a   ffe9
00211c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00211e   fff3
002120   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002122   ec61     call	0x2cc2, 0           	CALL	__gptrput2
002124   f016
                                           ;	.line	42; src/newtime.c	return overflow;
002126   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002128   fff3
00212a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00212c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00212e   f006
002130   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002132   f005
002134   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002136   f004
002138   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00213a   f003
00213c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00213e   f002
002140   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002142   f001
002144   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002146   f000
002148   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00214a   ffd9
00214c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
00214e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002150   ffe5
002152   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002154   ffd9
002156   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002158   ffe5
00215a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00215c   ffe5
00215e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002160   ffe5
002162   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002164   ffe5
002166   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002168   ffe5
00216a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00216c   ffe5
00216e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002170   ffe5
002172   0e02     movlw	0x2                	MOVLW	0x02
002174   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002176   f000
002178   0e03     movlw	0x3                	MOVLW	0x03
00217a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00217c   f001
00217e   0e04     movlw	0x4                	MOVLW	0x04
002180   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002182   f002
002184   0e05     movlw	0x5                	MOVLW	0x05
002186   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002188   f003
00218a   0e06     movlw	0x6                	MOVLW	0x06
00218c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00218e   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
002190   0e00     movlw	0                  	MOVLW	0x00
002192   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002194   0e3c     movlw	0x3c               	MOVLW	0x3c
002196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002198   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00219a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00219c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00219e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a0   ec94     call	0x1b28, 0           	CALL	__divsint
0021a2   f00d
0021a4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0021a6   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0021a8   f006
0021aa   0e04     movlw	0x4                	MOVLW	0x04
0021ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
0021ae   0e02     movlw	0x2                	MOVLW	0x02
0021b0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021b2   0e00     movlw	0                  	MOVLW	0x00
0021b4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0021b6   0e00     movlw	0                  	MOVLW	0x00
0021b8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0021ba   0e00     movlw	0                  	MOVLW	0x00
0021bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021be   0e3c     movlw	0x3c               	MOVLW	0x3c
0021c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ca   ecfc     call	0x1df8, 0           	CALL	__modsint
0021cc   f00e
0021ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
0021d0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0021d2   f004
0021d4   0e04     movlw	0x4                	MOVLW	0x04
0021d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0021d8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0021da   ffe5
0021dc   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0021de   fff4
0021e0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0021e2   ffe9
0021e4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0021e6   fff3
0021e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021ea   ec61     call	0x2cc2, 0           	CALL	__gptrput2
0021ec   f016
                                           ;	.line	36; src/newtime.c	return overflow;
0021ee   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0021f0   fff3
0021f2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021f4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0021f6   f006
0021f8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0021fa   f005
0021fc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021fe   f004
002200   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002202   f003
002204   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002206   f002
002208   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00220a   f001
00220c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00220e   f000
002210   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002212   ffd9
002214   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
00239e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0023a0   ffe5
0023a2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0023a4   ffd9
0023a6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0023a8   ffe5
0023aa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0023ac   ffe5
0023ae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0023b0   ffe5
0023b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0023b4   ffe5
0023b6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0023b8   ffe5
0023ba   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0023bc   ffe5
0023be   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0023c0   ffe5
0023c2   0e02     movlw	0x2                	MOVLW	0x02
0023c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0023c6   f000
0023c8   0e03     movlw	0x3                	MOVLW	0x03
0023ca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0023cc   f001
0023ce   0e04     movlw	0x4                	MOVLW	0x04
0023d0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0023d2   f002
0023d4   0e05     movlw	0x5                	MOVLW	0x05
0023d6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0023d8   f003
0023da   0e06     movlw	0x6                	MOVLW	0x06
0023dc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0023de   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0023e0   0e00     movlw	0                  	MOVLW	0x00
0023e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e4   0e18     movlw	0x18               	MOVLW	0x18
0023e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023f0   ec94     call	0x1b28, 0           	CALL	__divsint
0023f2   f00d
0023f4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0023f6   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0023f8   f006
0023fa   0e04     movlw	0x4                	MOVLW	0x04
0023fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0023fe   0e00     movlw	0                  	MOVLW	0x00
002400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002402   0e18     movlw	0x18               	MOVLW	0x18
002404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002406   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00240a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00240c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00240e   ecfc     call	0x1df8, 0           	CALL	__modsint
002410   f00e
002412   6e03     movwf	0x3, 0             	MOVWF	r0x03
002414   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002416   f004
002418   0e04     movlw	0x4                	MOVLW	0x04
00241a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00241c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00241e   ffe5
002420   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002422   fff4
002424   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002426   ffe9
002428   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00242a   fff3
00242c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00242e   ec61     call	0x2cc2, 0           	CALL	__gptrput2
002430   f016
                                           ;	.line	30; src/newtime.c	return overflow;
002432   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002434   fff3
002436   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002438   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00243a   f006
00243c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00243e   f005
002440   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002442   f004
002444   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002446   f003
002448   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00244a   f002
00244c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00244e   f001
002450   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002452   f000
002454   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002456   ffd9
002458   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
001edc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ede   ffe5
001ee0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ee2   ffd9
001ee4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001ee6   ffe5
001ee8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001eea   ffe5
001eec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001eee   ffe5
001ef0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001ef2   ffe5
001ef4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001ef6   ffe5
001ef8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001efa   ffe5
001efc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001efe   ffe5
001f00   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001f02   ffe5
001f04   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f06   ffe5
001f08   0e02     movlw	0x2                	MOVLW	0x02
001f0a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001f0c   f000
001f0e   0e03     movlw	0x3                	MOVLW	0x03
001f10   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001f12   f001
001f14   0e04     movlw	0x4                	MOVLW	0x04
001f16   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001f18   f002
001f1a   0e05     movlw	0x5                	MOVLW	0x05
001f1c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001f1e   f003
001f20   0e06     movlw	0x6                	MOVLW	0x06
001f22   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001f24   f004
001f26   0e07     movlw	0x7                	MOVLW	0x07
001f28   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001f2a   f005
001f2c   0e08     movlw	0x8                	MOVLW	0x08
001f2e   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001f30   f006
001f32   0e09     movlw	0x9                	MOVLW	0x09
001f34   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001f36   f007
001f38   0e0a     movlw	0xa                	MOVLW	0x0a
001f3a   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001f3c   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
001f3e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f42   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f46   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f52   eccf     call	0x239e, 0           	CALL	_set_hours
001f54   f011
001f56   0e05     movlw	0x5                	MOVLW	0x05
001f58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
001f5a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f5e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f6e   eca7     call	0x214e, 0           	CALL	_set_minutes
001f70   f010
001f72   0e05     movlw	0x5                	MOVLW	0x05
001f74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
001f76   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001f78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f7a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f7e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f86   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f8a   ec43     call	0x2086, 0           	CALL	_set_seconds
001f8c   f010
001f8e   0e05     movlw	0x5                	MOVLW	0x05
001f90   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001f92   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001f94   f008
001f96   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001f98   f007
001f9a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001f9c   f006
001f9e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001fa0   f005
001fa2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001fa4   f004
001fa6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001fa8   f003
001faa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001fac   f002
001fae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001fb0   f001
001fb2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001fb4   f000
001fb6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001fb8   ffd9
001fba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
00298a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00298c   ffe5
00298e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002990   ffd9
002992   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002994   ffe5
002996   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002998   ffe5
00299a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00299c   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
00299e   0e06     movlw	0x6                	MOVLW	0x06
0029a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029a2   ec60     call	0xec0, 0            	CALL	_malloc
0029a4   f007
0029a6   6e00     movwf	0, 0               	MOVWF	r0x00
0029a8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0029aa   f001
0029ac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0029ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0029b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029b4   6e00     movwf	0, 0               	MOVWF	r0x00
0029b6   0e80     movlw	0x80               	MOVLW	0x80
0029b8   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
0029ba   0e00     movlw	0                  	MOVLW	0x00
0029bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029be   0e00     movlw	0                  	MOVLW	0x00
0029c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c2   0e00     movlw	0                  	MOVLW	0x00
0029c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c6   0e00     movlw	0                  	MOVLW	0x00
0029c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ca   0e00     movlw	0                  	MOVLW	0x00
0029cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ce   0e00     movlw	0                  	MOVLW	0x00
0029d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029de   ec6e     call	0x1edc, 0           	CALL	_time_set
0029e0   f00f
0029e2   0e09     movlw	0x9                	MOVLW	0x09
0029e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
0029e6   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0029e8   fff4
0029ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0029ec   fff3
0029ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029f2   f002
0029f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029f6   f001
0029f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029fa   f000
0029fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029fe   ffd9
002a00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002a02   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002a04   6432     cpfsgt	0x32, 0           
002a06   253a     addwf	0x3a, 0, 0x1       
002a08   3230     rrcf	0x30, 0x1, 0        
002a0a   3a64     swapf	0x64, 0x1, 0       
002a0c   3025     rrcf	0x25, 0, 0          
002a0e   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002a10   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
