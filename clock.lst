gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2013  14:15:39
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 14:15:36 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _config_mode_clock
                                           	global _update_display
                                           	global _toggle_second_led
                                           	global _init_config
                                           	global _display_config_mode
                                           	global _init_time
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_mode_on
                                           	global _config_called
                                           	global _main
                                           	global _toggle_alarm_led
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           _config_mode_on	db	0x00, 0x00
                                           _config_mode_clock	db	0x01, 0x00
                                           _config_called	db	0x00, 0x00
                                           _init_config_choice_string_1_1	db	LOW(__str_0), HIGH(__str_0), UPPER(__str_0)
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           _update_display_display_line_1_1	res	32
                                           
                                           udata_clock_1	udata
                                           __time	res	3
                                           
                                           udata_clock_2	udata
                                           __alarm	res	3
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef96     goto	0x132c              	GOTO	_highPriorityInterruptHandler
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	76; src/clock.c	init();
003270   ec64     call	0x30c8, 0           	CALL	_init
003272   f018
                                           ;	.line	78; src/clock.c	init_config();
003274   ec21     call	0x842, 0            	CALL	_init_config
003276   f004
                                           ;	.line	80; src/clock.c	update_display();
003278   eceb     call	0x21d6, 0           	CALL	_update_display
00327a   f010
                                           _00108_DS_:
00327c   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	82; src/clock.c	if(config_called){
00327e   514f     movf	0x4f, 0, 0x1        	MOVF	_config_called, W, B
003280   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
003282   1150     iorwf	0x50, 0, 0x1       	IORWF	(_config_called + 1), W, B
003284   e0fb     bz	0x327c                	BZ	_00108_DS_
003286   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	83; src/clock.c	config_called =0;
003288   6b4f     clrf	0x4f, 0x1           	CLRF	_config_called, B
00328a   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
00328c   6b50     clrf	0x50, 0x1           	CLRF	(_config_called + 1), B
                                           ;	.line	84; src/clock.c	init_config();
00328e   ec21     call	0x842, 0            	CALL	_init_config
003290   f004
003292   d7f4     bra	0x327c               	BRA	_00108_DS_
                                           ;	.line	87; src/clock.c	return 0;
003294   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	274; src/clock.c	void init(void){
0030c8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0030ca   ffe5
0030cc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0030ce   ffd9
                                           ;	.line	276; src/clock.c	LCDInit();
0030d0   ec91     call	0xd22, 0            	CALL	_LCDInit
0030d2   f006
                                           ;	.line	279; src/clock.c	_time = time_create();
0030d4   ecfb     call	0x2df6, 0           	CALL	_time_create
0030d6   f016
0030d8   010f     movlb	0xf                	BANKSEL	__time
0030da   6f55     movwf	0x55, 0x1          	MOVWF	__time, B
0030dc   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (__time + 1)
0030de   ff56
0030e0   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (__time + 2)
0030e2   ff57
                                           ;	.line	280; src/clock.c	_alarm = time_create();
0030e4   ecfb     call	0x2df6, 0           	CALL	_time_create
0030e6   f016
0030e8   010f     movlb	0xf                	BANKSEL	__alarm
0030ea   6f58     movwf	0x58, 0x1          	MOVWF	__alarm, B
0030ec   cff3     movff	0xff3, 0xf59       	MOVFF	PRODL, (__alarm + 1)
0030ee   ff59
0030f0   cff4     movff	0xff4, 0xf5a       	MOVFF	PRODH, (__alarm + 2)
0030f2   ff5a
                                           ;	.line	283; src/clock.c	BUTTON0_TRIS = 1;
0030f4   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	284; src/clock.c	BUTTON1_TRIS = 1;
0030f6   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	287; src/clock.c	INTCONbits.GIE = 1;
0030f8   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	288; src/clock.c	INTCONbits.PEIE = 1;
0030fa   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	289; src/clock.c	RCONbits.IPEN = 1; 
0030fc   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	292; src/clock.c	T0CONbits.TMR0ON = 0;
0030fe   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	295; src/clock.c	TMR0H = 0x00000000;
003100   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	296; src/clock.c	TMR0L = 0x00000000;
003102   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	299; src/clock.c	T0CONbits.T08BIT = 0;
003104   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	302; src/clock.c	T0CONbits.T0CS = 0;
003106   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	305; src/clock.c	T0CONbits.PSA = 1;
003108   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	308; src/clock.c	INTCONbits.TMR0IE = 1;
00310a   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	311; src/clock.c	INTCON3bits.INT1IE = 1;
00310c   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	312; src/clock.c	INTCON3bits.INT3IE = 1;
00310e   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	315; src/clock.c	LED0_TRIS = 0;
003110   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	316; src/clock.c	LED1_TRIS = 0;   
003112   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	317; src/clock.c	LED2_TRIS = 0;
003114   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	318; src/clock.c	LED3_TRIS = 0;
003116   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	321; src/clock.c	LED0_IO = 0; 
003118   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	322; src/clock.c	LED1_IO = 0;
00311a   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	323; src/clock.c	LED2_IO = 0;
00311c   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	324; src/clock.c	LED3_IO = 1;
00311e   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
003120   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003122   ffd9
003124   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	230; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
00132c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00132e   ffe5
001330   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001332   ffe5
001334   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001336   ffe5
001338   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00133a   ffe5
00133c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00133e   ffe5
001340   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001342   ffe5
001344   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001346   ffe5
001348   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00134a   ffe5
00134c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00134e   ffe5
001350   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001352   ffe5
001354   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001356   ffd9
001358   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00135a   ffe5
00135c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00135e   ffe5
                                           ;	.line	231; src/clock.c	if(INTCON3bits.INT1F == 1){
001360   6a00     clrf	0, 0                	CLRF	r0x00
001362   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
001364   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001366   5000     movf	0, 0, 0             	MOVF	r0x00, W
001368   0a01     xorlw	0x1                	XORLW	0x01
00136a   e114     bnz	0x1394               	BNZ	_00229_DS_
                                           _00262_DS_:
00136c   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	232; src/clock.c	if(!config_mode_on){
00136e   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
001370   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
001372   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001374   e106     bnz	0x1382               	BNZ	_00226_DS_
                                           ;	.line	233; src/clock.c	config_called =1;	
001376   0e01     movlw	0x1                	MOVLW	0x01
001378   010f     movlb	0xf                	BANKSEL	_config_called
00137a   6f4f     movwf	0x4f, 0x1          	MOVWF	_config_called, B
00137c   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
00137e   6b50     clrf	0x50, 0x1           	CLRF	(_config_called + 1), B
001380   d005     bra	0x138c               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	235; src/clock.c	but2_pressed = 1;	
001382   0e01     movlw	0x1                	MOVLW	0x01
001384   010f     movlb	0xf                	BANKSEL	_but2_pressed
001386   6f49     movwf	0x49, 0x1          	MOVWF	_but2_pressed, B
001388   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
00138a   6b4a     clrf	0x4a, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           _00227_DS_:
                                           ;	.line	237; src/clock.c	if(BUTTON0_IO);
00138c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00138e   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
001390   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	238; src/clock.c	INTCON3bits.INT1F = 0; 
001392   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00229_DS_:
                                           ;	.line	241; src/clock.c	if(INTCON3bits.INT3F  == 1){
001394   6a00     clrf	0, 0                	CLRF	r0x00
001396   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
001398   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00139a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00139c   0a01     xorlw	0x1                	XORLW	0x01
00139e   e109     bnz	0x13b2               	BNZ	_00231_DS_
                                           ;	.line	242; src/clock.c	but1_pressed = 1;	
0013a0   0e01     movlw	0x1                	MOVLW	0x01
0013a2   010f     movlb	0xf                	BANKSEL	_but1_pressed
0013a4   6f47     movwf	0x47, 0x1          	MOVWF	_but1_pressed, B
0013a6   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
0013a8   6b48     clrf	0x48, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	243; src/clock.c	if(BUTTON1_IO);
0013aa   6ae8     clrf	0xe8, 0             	CLRF	WREG
0013ac   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0013ae   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	244; src/clock.c	INTCON3bits.INT3F = 0; 
0013b0   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00231_DS_:
                                           ;	.line	246; src/clock.c	if(INTCONbits.TMR0IF == 1) {
0013b2   6a00     clrf	0, 0                	CLRF	r0x00
0013b4   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0013b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0013b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013ba   0a01     xorlw	0x1                	XORLW	0x01
0013bc   e001     bz	0x13c0                	BZ	_00266_DS_
0013be   d075     bra	0x14aa               	BRA	_00248_DS_
                                           _00266_DS_:
0013c0   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	247; src/clock.c	overflow_counter++;
0013c2   2b45     incf	0x45, 0x1, 0x1      	INCF	_overflow_counter, F, B
0013c4   e302     bnc	0x13ca               	BNC	_10277_DS_
0013c6   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013c8   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10277_DS_:
0013ca   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	248; src/clock.c	if(overflow_counter == CYCLES/2){
0013cc   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
0013ce   0a2e     xorlw	0x2e               	XORLW	0x2e
0013d0   e103     bnz	0x13d8               	BNZ	_00267_DS_
0013d2   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013d4   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013d6   e001     bz	0x13da                	BZ	_00268_DS_
                                           _00267_DS_:
0013d8   d003     bra	0x13e0               	BRA	_00244_DS_
                                           _00268_DS_:
                                           ;	.line	249; src/clock.c	toggle_second_led();
0013da   ecf4     call	0x31e8, 0           	CALL	_toggle_second_led
0013dc   f018
0013de   d064     bra	0x14a8               	BRA	_00245_DS_
                                           _00244_DS_:
0013e0   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	250; src/clock.c	}else if(overflow_counter == CYCLES){
0013e2   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
0013e4   0a5d     xorlw	0x5d               	XORLW	0x5d
0013e6   e103     bnz	0x13ee               	BNZ	_00269_DS_
0013e8   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013ea   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013ec   e001     bz	0x13f0                	BZ	_00270_DS_
                                           _00269_DS_:
0013ee   d05c     bra	0x14a8               	BRA	_00245_DS_
                                           _00270_DS_:
0013f0   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	251; src/clock.c	if(time_equals(_alarm,_time)){
0013f2   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
0013f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f6   010f     movlb	0xf                	BANKSEL	(__time + 1)
0013f8   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
0013fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fc   010f     movlb	0xf                	BANKSEL	__time
0013fe   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
001400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001402   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
001404   515a     movf	0x5a, 0, 0x1        	MOVF	(__alarm + 2), W, B
001406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001408   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
00140a   5159     movf	0x59, 0, 0x1        	MOVF	(__alarm + 1), W, B
00140c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00140e   010f     movlb	0xf                	BANKSEL	__alarm
001410   5158     movf	0x58, 0, 0x1        	MOVF	__alarm, W, B
001412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001414   ec31     call	0x1662, 0           	CALL	_time_equals
001416   f00b
001418   6e00     movwf	0, 0               	MOVWF	r0x00
00141a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00141c   f001
00141e   0e06     movlw	0x6                	MOVLW	0x06
001420   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001422   5000     movf	0, 0, 0             	MOVF	r0x00, W
001424   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001426   e005     bz	0x1432                	BZ	_00233_DS_
                                           ;	.line	252; src/clock.c	alarm_going_off = 1;
001428   0e01     movlw	0x1                	MOVLW	0x01
00142a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
00142c   6f41     movwf	0x41, 0x1          	MOVWF	_alarm_going_off, B
00142e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001430   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00233_DS_:
001432   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	254; src/clock.c	if(alarm_going_off){
001434   5141     movf	0x41, 0, 0x1        	MOVF	_alarm_going_off, W, B
001436   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001438   1142     iorwf	0x42, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
00143a   e017     bz	0x146a                	BZ	_00237_DS_
00143c   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	255; src/clock.c	alarm_counter++;
00143e   2b43     incf	0x43, 0x1, 0x1      	INCF	_alarm_counter, F, B
001440   e302     bnc	0x1446               	BNC	_20278_DS_
001442   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001444   2b44     incf	0x44, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20278_DS_:
                                           ;	.line	256; src/clock.c	toggle_alarm_led();
001446   ec93     call	0x3126, 0           	CALL	_toggle_alarm_led
001448   f018
00144a   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	257; src/clock.c	if(alarm_counter==30){
00144c   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_counter, W, B
00144e   0a1e     xorlw	0x1e               	XORLW	0x1e
001450   e103     bnz	0x1458               	BNZ	_00271_DS_
001452   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001454   5144     movf	0x44, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001456   e001     bz	0x145a                	BZ	_00272_DS_
                                           _00271_DS_:
001458   d008     bra	0x146a               	BRA	_00237_DS_
                                           _00272_DS_:
00145a   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	258; src/clock.c	alarm_going_off =0;
00145c   6b41     clrf	0x41, 0x1           	CLRF	_alarm_going_off, B
00145e   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001460   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
001462   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	259; src/clock.c	alarm_counter = 0;
001464   6b43     clrf	0x43, 0x1           	CLRF	_alarm_counter, B
001466   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001468   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00237_DS_:
00146a   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	262; src/clock.c	overflow_counter = 0;
00146c   6b45     clrf	0x45, 0x1           	CLRF	_overflow_counter, B
00146e   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
001470   6b46     clrf	0x46, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	263; src/clock.c	toggle_second_led();
001472   ecf4     call	0x31e8, 0           	CALL	_toggle_second_led
001474   f018
001476   010f     movlb	0xf                	BANKSEL	(__time + 2)
                                           ;	.line	264; src/clock.c	add_second(_time);
001478   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
00147a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00147c   010f     movlb	0xf                	BANKSEL	(__time + 1)
00147e   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
001480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001482   010f     movlb	0xf                	BANKSEL	__time
001484   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
001486   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001488   ec04     call	0x2a08, 0           	CALL	_add_second
00148a   f015
00148c   0e03     movlw	0x3                	MOVLW	0x03
00148e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001490   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	265; src/clock.c	if(!config_called && !config_mode_on){
001492   514f     movf	0x4f, 0, 0x1        	MOVF	_config_called, W, B
001494   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
001496   1150     iorwf	0x50, 0, 0x1       	IORWF	(_config_called + 1), W, B
001498   e107     bnz	0x14a8               	BNZ	_00245_DS_
00149a   010f     movlb	0xf                	BANKSEL	_config_mode_on
00149c   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
00149e   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
0014a0   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
0014a2   e102     bnz	0x14a8               	BNZ	_00245_DS_
                                           ;	.line	266; src/clock.c	update_display();
0014a4   eceb     call	0x21d6, 0           	CALL	_update_display
0014a6   f010
                                           _00245_DS_:
                                           ;	.line	269; src/clock.c	INTCONbits.TMR0IF = 0;
0014a8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00248_DS_:
0014aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0014ac   f001
0014ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014b0   f000
0014b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014b4   ffd9
0014b6   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0014b8   fffb
0014ba   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0014bc   fffa
0014be   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0014c0   ffea
0014c2   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0014c4   ffe9
0014c6   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0014c8   fff4
0014ca   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0014cc   fff3
0014ce   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0014d0   ffe0
0014d2   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0014d4   ffd8
0014d6   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0014d8   ffe8
0014da   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	224; src/clock.c	char* to_double_digits(int value){
002d6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d6c   ffe5
002d6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d70   ffd9
002d72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d74   ffe5
002d76   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d78   ffe5
002d7a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d7c   ffe5
002d7e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002d80   ffe5
002d82   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002d84   ffe5
002d86   0e02     movlw	0x2                	MOVLW	0x02
002d88   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d8a   f000
002d8c   0e03     movlw	0x3                	MOVLW	0x03
002d8e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d90   f001
                                           ;	.line	226; src/clock.c	sprintf(buffer, "%02d", value);
002d92   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d94   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d96   0e5b     movlw	0x5b               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d98   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d9a   0e80     movlw	0x80               	MOVLW	0x80
002d9c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d9e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da2   5000     movf	0, 0, 0             	MOVF	r0x00, W
002da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da6   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
002da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002daa   0e22     movlw	0x22               	MOVLW	HIGH(__str_9)
002dac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dae   0ebe     movlw	0xbe               	MOVLW	LOW(__str_9)
002db0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002db2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002db4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002db6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002db8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dbe   ec62     call	0x22c4, 0           	CALL	_sprintf
002dc0   f011
002dc2   0e08     movlw	0x8                	MOVLW	0x08
002dc4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	227; src/clock.c	return buffer;
002dc6   0e0f     movlw	0xf                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002dc8   6e01     movwf	0x1, 0             	MOVWF	r0x01
002dca   0e5b     movlw	0x5b               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002dcc   6e00     movwf	0, 0               	MOVWF	r0x00
002dce   0e80     movlw	0x80               	MOVLW	0x80
002dd0   6e02     movwf	0x2, 0             	MOVWF	r0x02
002dd2   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002dd4   fff4
002dd6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002dd8   fff3
002dda   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ddc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dde   f004
002de0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002de2   f003
002de4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002de6   f002
002de8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002dea   f001
002dec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dee   f000
002df0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002df2   ffd9
002df4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	213; src/clock.c	void display_string(BYTE pos, char* text){
001de2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001de4   ffe5
001de6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001de8   ffd9
001dea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001dec   ffe5
001dee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001df0   ffe5
001df2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001df4   ffe5
001df6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001df8   ffe5
001dfa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001dfc   ffe5
001dfe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001e00   ffe5
001e02   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001e04   ffe5
001e06   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001e08   ffe5
001e0a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e0c   ffe5
001e0e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001e10   ffe5
001e12   0e02     movlw	0x2                	MOVLW	0x02
001e14   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001e16   f000
001e18   0e03     movlw	0x3                	MOVLW	0x03
001e1a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001e1c   f001
001e1e   0e04     movlw	0x4                	MOVLW	0x04
001e20   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001e22   f002
001e24   0e05     movlw	0x5                	MOVLW	0x05
001e26   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001e28   f003
                                           ;	.line	214; src/clock.c	BYTE        l = strlen(text);
001e2a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e36   ec80     call	0x2f00, 0           	CALL	_strlen
001e38   f017
001e3a   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e3c   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001e3e   f005
001e40   0e03     movlw	0x3                	MOVLW	0x03
001e42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	215; src/clock.c	BYTE      max = 32-pos;    
001e44   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e46   0820     sublw	0x20               	SUBLW	0x20
001e48   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	216; src/clock.c	char       *d = (char*)&LCDText[pos];
001e4a   6a06     clrf	0x6, 0              	CLRF	r0x06
001e4c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e4e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e50   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e52   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001e54   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001e56   6e06     movwf	0x6, 0             	MOVWF	r0x06
001e58   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e5a   6e00     movwf	0, 0               	MOVWF	r0x00
001e5c   0e80     movlw	0x80               	MOVLW	0x80
001e5e   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	218; src/clock.c	size_t      n = (l<max)?l:max;
001e60   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e62   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001e64   e302     bnc	0x1e6a               	BNC	_00210_DS_
001e66   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001e68   f004
                                           _00210_DS_:
001e6a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	219; src/clock.c	if (n != 0)
001e6c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e6e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001e70   e027     bz	0x1ec0                	BZ	_00206_DS_
                                           _00202_DS_:
                                           ;	.line	220; src/clock.c	while (n-- != 0)*d++ = *s++;
001e72   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001e74   f008
001e76   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001e78   f009
001e7a   0eff     movlw	0xff               	MOVLW	0xff
001e7c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001e7e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e80   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001e82   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001e84   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001e86   e01c     bz	0x1ec0                	BZ	_00206_DS_
001e88   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001e8a   ffe9
001e8c   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001e8e   fff3
001e90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e92   ec4b     call	0x3296, 0           	CALL	__gptrget1
001e94   f019
001e96   6e08     movwf	0x8, 0             	MOVWF	r0x08
001e98   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e9a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e9c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001e9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ea0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001ea2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001ea4   ffe5
001ea6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001ea8   ffe9
001eaa   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001eac   fff3
001eae   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001eb0   ec8c     call	0x3318, 0           	CALL	__gptrput1
001eb2   f019
001eb4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001eb6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001eb8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001eba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ebc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001ebe   d7d9     bra	0x1e72               	BRA	_00202_DS_
                                           _00206_DS_:
                                           ;	.line	221; src/clock.c	LCDUpdate();
001ec0   ec5c     call	0xab8, 0            	CALL	_LCDUpdate
001ec2   f005
001ec4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ec6   f009
001ec8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001eca   f008
001ecc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ece   f007
001ed0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ed2   f006
001ed4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ed6   f005
001ed8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001eda   f004
001edc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ede   f003
001ee0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ee2   f002
001ee4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ee6   f001
001ee8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001eea   f000
001eec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001eee   ffd9
001ef0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	189; src/clock.c	int get_input(int maxvalue, char *text, char *mode){
000f7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f80   ffe5
000f82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f84   ffd9
000f86   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f88   ffe5
000f8a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f8c   ffe5
000f8e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f90   ffe5
000f92   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f94   ffe5
000f96   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f98   ffe5
000f9a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f9c   ffe5
000f9e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000fa0   ffe5
000fa2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000fa4   ffe5
000fa6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000fa8   ffe5
000faa   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000fac   ffe5
000fae   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000fb0   ffe5
000fb2   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000fb4   ffe5
000fb6   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000fb8   ffe5
000fba   0e02     movlw	0x2                	MOVLW	0x02
000fbc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fbe   f000
000fc0   0e03     movlw	0x3                	MOVLW	0x03
000fc2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000fc4   f001
000fc6   0e04     movlw	0x4                	MOVLW	0x04
000fc8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000fca   f002
000fcc   0e05     movlw	0x5                	MOVLW	0x05
000fce   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000fd0   f003
000fd2   0e06     movlw	0x6                	MOVLW	0x06
000fd4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000fd6   f004
000fd8   0e07     movlw	0x7                	MOVLW	0x07
000fda   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000fdc   f005
000fde   0e08     movlw	0x8                	MOVLW	0x08
000fe0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000fe2   f006
000fe4   0e09     movlw	0x9                	MOVLW	0x09
000fe6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000fe8   f007
                                           ;	.line	190; src/clock.c	BYTE length = strlen(text);
000fea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ff4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff6   ec80     call	0x2f00, 0           	CALL	_strlen
000ff8   f017
000ffa   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ffc   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000ffe   f009
001000   0e03     movlw	0x3                	MOVLW	0x03
001002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	191; src/clock.c	int value = 0;
001004   6a09     clrf	0x9, 0              	CLRF	r0x09
001006   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	192; src/clock.c	display_string(START_FIRST_LINE , mode);
001008   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00100a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   0e00     movlw	0                  	MOVLW	0x00
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   ecf1     call	0x1de2, 0           	CALL	_display_string
00101a   f00e
00101c   0e04     movlw	0x4                	MOVLW	0x04
00101e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	193; src/clock.c	display_string(START_SECOND_LINE, text);
001020   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001024   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00102a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102c   0e10     movlw	0x10               	MOVLW	0x10
00102e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001030   ecf1     call	0x1de2, 0           	CALL	_display_string
001032   f00e
001034   0e04     movlw	0x4                	MOVLW	0x04
001036   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	194; src/clock.c	while(1)
001038   0e11     movlw	0x11               	MOVLW	0x11
00103a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00103c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00195_DS_:
00103e   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	197; src/clock.c	if(config_mode_on){
001040   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
001042   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
001044   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001046   e0fb     bz	0x103e                	BZ	_00195_DS_
                                           ;	.line	198; src/clock.c	DelayMs(10);
001048   0e68     movlw	0x68               	MOVLW	0x68
00104a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00104c   0e42     movlw	0x42               	MOVLW	0x42
00104e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001050   6a05     clrf	0x5, 0              	CLRF	r0x05
001052   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00182_DS_:
001054   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001056   f007
001058   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00105a   f008
00105c   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
00105e   f00b
001060   c006     movff	0x6, 0xc           	MOVFF	r0x06, r0x0c
001062   f00c
001064   0eff     movlw	0xff               	MOVLW	0xff
001066   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001068   0eff     movlw	0xff               	MOVLW	0xff
00106a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00106c   0eff     movlw	0xff               	MOVLW	0xff
00106e   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001070   0eff     movlw	0xff               	MOVLW	0xff
001072   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001074   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001076   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001078   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
00107a   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
00107c   e1eb     bnz	0x1054               	BNZ	_00182_DS_
                                           ;	.line	199; src/clock.c	if(read_and_clear(&but2_pressed)){
00107e   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
001080   6e04     movwf	0x4, 0             	MOVWF	r0x04
001082   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
001084   6e03     movwf	0x3, 0             	MOVWF	r0x03
001086   0e80     movlw	0x80               	MOVLW	0x80
001088   6e05     movwf	0x5, 0             	MOVWF	r0x05
00108a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00108c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00108e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001092   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001096   ec3f     call	0x2e7e, 0           	CALL	_read_and_clear
001098   f017
00109a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00109c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00109e   f004
0010a0   0e03     movlw	0x3                	MOVLW	0x03
0010a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010a6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010a8   e006     bz	0x10b6                	BZ	_00189_DS_
                                           ;	.line	200; src/clock.c	LCDErase();
0010aa   ecbc     call	0x2b78, 0           	CALL	_LCDErase
0010ac   f015
                                           ;	.line	201; src/clock.c	return value;
0010ae   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0010b0   fff3
0010b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010b4   d042     bra	0x113a               	BRA	_00197_DS_
                                           _00189_DS_:
                                           ;	.line	203; src/clock.c	if(read_and_clear(&but1_pressed)){ 
0010b6   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
0010b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010ba   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
0010bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010be   0e80     movlw	0x80               	MOVLW	0x80
0010c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0010c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ce   ec3f     call	0x2e7e, 0           	CALL	_read_and_clear
0010d0   f017
0010d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010d4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0010d6   f004
0010d8   0e03     movlw	0x3                	MOVLW	0x03
0010da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010de   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010e0   e012     bz	0x1106                	BZ	_00191_DS_
                                           ;	.line	204; src/clock.c	value = (++value)%maxvalue;
0010e2   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0010e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010e6   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0010e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f8   ecd7     call	0x23ae, 0           	CALL	__modsint
0010fa   f011
0010fc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010fe   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001100   f00a
001102   0e04     movlw	0x4                	MOVLW	0x04
001104   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00191_DS_:
                                           ;	.line	206; src/clock.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
001106   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00110c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110e   ecb5     call	0x2d6a, 0           	CALL	_to_double_digits
001110   f016
001112   6e03     movwf	0x3, 0             	MOVWF	r0x03
001114   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001116   f004
001118   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
00111a   f005
00111c   0e02     movlw	0x2                	MOVLW	0x02
00111e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001120   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001124   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001128   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00112a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00112e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001130   ecf1     call	0x1de2, 0           	CALL	_display_string
001132   f00e
001134   0e04     movlw	0x4                	MOVLW	0x04
001136   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001138   d782     bra	0x103e               	BRA	_00195_DS_
                                           _00197_DS_:
00113a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00113c   f00c
00113e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001140   f00b
001142   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001144   f00a
001146   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001148   f009
00114a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00114c   f008
00114e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001150   f007
001152   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001154   f006
001156   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001158   f005
00115a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00115c   f004
00115e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001160   f003
001162   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001164   f002
001166   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001168   f001
00116a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00116c   f000
00116e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001170   ffd9
001172   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	182; src/clock.c	int read_and_clear(int *variable){
002e7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e80   ffe5
002e82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e84   ffd9
002e86   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e88   ffe5
002e8a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e8c   ffe5
002e8e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e90   ffe5
002e92   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e94   ffe5
002e96   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e98   ffe5
002e9a   0e02     movlw	0x2                	MOVLW	0x02
002e9c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002e9e   f000
002ea0   0e03     movlw	0x3                	MOVLW	0x03
002ea2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002ea4   f001
002ea6   0e04     movlw	0x4                	MOVLW	0x04
002ea8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002eaa   f002
                                           ;	.line	183; src/clock.c	if(*variable){
002eac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002eae   ffe9
002eb0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002eb2   fff3
002eb4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002eb6   ec22     call	0x3244, 0           	CALL	__gptrget2
002eb8   f019
002eba   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ebc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002ebe   f004
002ec0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ec2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002ec4   e00e     bz	0x2ee2                	BZ	_00176_DS_
                                           ;	.line	184; src/clock.c	*variable = 0;
002ec6   0e00     movlw	0                  	MOVLW	0x00
002ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eca   0e00     movlw	0                  	MOVLW	0x00
002ecc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002ece   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ed0   ffe9
002ed2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002ed4   fff3
002ed6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ed8   ec76     call	0x32ec, 0           	CALL	__gptrput2
002eda   f019
                                           ;	.line	185; src/clock.c	return 1;
002edc   6af3     clrf	0xf3, 0             	CLRF	PRODL
002ede   0e01     movlw	0x1                	MOVLW	0x01
002ee0   d002     bra	0x2ee6               	BRA	_00177_DS_
                                           _00176_DS_:
                                           ;	.line	187; src/clock.c	return 0;
002ee2   6af3     clrf	0xf3, 0             	CLRF	PRODL
002ee4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00177_DS_:
002ee6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002ee8   f004
002eea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002eec   f003
002eee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002ef0   f002
002ef2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ef4   f001
002ef6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ef8   f000
002efa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002efc   ffd9
002efe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	174; src/clock.c	void init_time(time t, char *mode){ 
00194a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00194c   ffe5
00194e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001950   ffd9
001952   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001954   ffe5
001956   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001958   ffe5
00195a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00195c   ffe5
00195e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001960   ffe5
001962   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001964   ffe5
001966   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001968   ffe5
00196a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00196c   ffe5
00196e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001970   ffe5
001972   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001974   ffe5
001976   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001978   ffe5
00197a   0e02     movlw	0x2                	MOVLW	0x02
00197c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00197e   f000
001980   0e03     movlw	0x3                	MOVLW	0x03
001982   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001984   f001
001986   0e04     movlw	0x4                	MOVLW	0x04
001988   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00198a   f002
00198c   0e05     movlw	0x5                	MOVLW	0x05
00198e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001990   f003
001992   0e06     movlw	0x6                	MOVLW	0x06
001994   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001996   f004
001998   0e07     movlw	0x7                	MOVLW	0x07
00199a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00199c   f005
                                           ;	.line	176; src/clock.c	h = get_input(24, "Hours:", mode);
00199e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019aa   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
0019ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ae   0e22     movlw	0x22               	MOVLW	HIGH(__str_6)
0019b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b2   0ea2     movlw	0xa2               	MOVLW	LOW(__str_6)
0019b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019b6   0e00     movlw	0                  	MOVLW	0x00
0019b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ba   0e18     movlw	0x18               	MOVLW	0x18
0019bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019be   ecbf     call	0xf7e, 0            	CALL	_get_input
0019c0   f007
0019c2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019c4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0019c6   f007
0019c8   0e08     movlw	0x8                	MOVLW	0x08
0019ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	177; src/clock.c	m = get_input(60, "Minutes:", mode);
0019cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d8   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0019da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019dc   0e22     movlw	0x22               	MOVLW	HIGH(__str_7)
0019de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e0   0eaa     movlw	0xaa               	MOVLW	LOW(__str_7)
0019e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e4   0e00     movlw	0                  	MOVLW	0x00
0019e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019e8   0e3c     movlw	0x3c               	MOVLW	0x3c
0019ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ec   ecbf     call	0xf7e, 0            	CALL	_get_input
0019ee   f007
0019f0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019f2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0019f4   f009
0019f6   0e08     movlw	0x8                	MOVLW	0x08
0019f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	178; src/clock.c	s = get_input(60, "Seconds:", mode);
0019fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a02   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a06   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
001a08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a0a   0e22     movlw	0x22               	MOVLW	HIGH(__str_8)
001a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a0e   0eb4     movlw	0xb4               	MOVLW	LOW(__str_8)
001a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a12   0e00     movlw	0                  	MOVLW	0x00
001a14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a16   0e3c     movlw	0x3c               	MOVLW	0x3c
001a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a1a   ecbf     call	0xf7e, 0            	CALL	_get_input
001a1c   f007
001a1e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001a20   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001a22   f004
001a24   0e08     movlw	0x8                	MOVLW	0x08
001a26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	179; src/clock.c	time_set(t,h,m,s);
001a28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a30   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a34   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a38   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a3c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a48   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a4c   ec49     call	0x2492, 0           	CALL	_time_set
001a4e   f012
001a50   0e09     movlw	0x9                	MOVLW	0x09
001a52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001a54   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a56   f009
001a58   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a5a   f008
001a5c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a5e   f007
001a60   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a62   f006
001a64   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a66   f005
001a68   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a6a   f004
001a6c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a6e   f003
001a70   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a72   f002
001a74   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a76   f001
001a78   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a7a   f000
001a7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a7e   ffd9
001a80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_config_mode	code
                                           _display_config_mode:
                                           ;	.line	169; src/clock.c	void display_config_mode(char *choice_string){
002ffe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003000   ffe5
003002   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003004   ffd9
003006   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003008   ffe5
00300a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00300c   ffe5
00300e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003010   ffe5
003012   0e02     movlw	0x2                	MOVLW	0x02
003014   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003016   f000
003018   0e03     movlw	0x3                	MOVLW	0x03
00301a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00301c   f001
00301e   0e04     movlw	0x4                	MOVLW	0x04
003020   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003022   f002
                                           ;	.line	170; src/clock.c	display_string(START_FIRST_LINE, CM_STRING);
003024   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
003026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003028   0e22     movlw	0x22               	MOVLW	HIGH(__str_5)
00302a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00302c   0e94     movlw	0x94               	MOVLW	LOW(__str_5)
00302e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003030   0e00     movlw	0                  	MOVLW	0x00
003032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003034   ecf1     call	0x1de2, 0           	CALL	_display_string
003036   f00e
003038   0e04     movlw	0x4                	MOVLW	0x04
00303a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; src/clock.c	display_string(START_SECOND_LINE, choice_string);
00303c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00303e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003040   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003042   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003044   5000     movf	0, 0, 0             	MOVF	r0x00, W
003046   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003048   0e10     movlw	0x10               	MOVLW	0x10
00304a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00304c   ecf1     call	0x1de2, 0           	CALL	_display_string
00304e   f00e
003050   0e04     movlw	0x4                	MOVLW	0x04
003052   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003054   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003056   f002
003058   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00305a   f001
00305c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00305e   f000
003060   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003062   ffd9
003064   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	111; src/clock.c	void init_config(void){
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
                                           ;	.line	113; src/clock.c	int choice = CONFIG_MODE_ALARM;
00085e   6a00     clrf	0, 0                	CLRF	r0x00
000860   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	115; src/clock.c	config_mode_on = 1;
000862   0e01     movlw	0x1                	MOVLW	0x01
000864   010f     movlb	0xf                	BANKSEL	_config_mode_on
000866   6f4b     movwf	0x4b, 0x1          	MOVWF	_config_mode_on, B
000868   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
00086a   6b4c     clrf	0x4c, 0x1           	CLRF	(_config_mode_on + 1), B
00086c   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	116; src/clock.c	display_config_mode(choice_string);
00086e   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000874   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000878   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
00087a   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00087c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087e   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
000880   f017
000882   0e03     movlw	0x3                	MOVLW	0x03
000884   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00143_DS_:
                                           ;	.line	118; src/clock.c	if(read_and_clear(&but2_pressed)){
000886   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000888   6e03     movwf	0x3, 0             	MOVWF	r0x03
00088a   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
00088c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00088e   0e80     movlw	0x80               	MOVLW	0x80
000890   6e04     movwf	0x4, 0             	MOVWF	r0x04
000892   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000896   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089e   ec3f     call	0x2e7e, 0           	CALL	_read_and_clear
0008a0   f017
0008a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008a4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0008a6   f003
0008a8   0e03     movlw	0x3                	MOVLW	0x03
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008ae   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0008b0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0008b2   d058     bra	0x964                	BRA	_00135_DS_
                                           ;	.line	120; src/clock.c	switch(choice){
0008b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008b6   e102     bnz	0x8bc                	BNZ	_00155_DS_
0008b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008ba   e006     bz	0x8c8                 	BZ	_00130_DS_
                                           _00155_DS_:
0008bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008be   0a01     xorlw	0x1                	XORLW	0x01
0008c0   e102     bnz	0x8c6                	BNZ	_00157_DS_
0008c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008c4   e024     bz	0x90e                 	BZ	_00131_DS_
                                           _00157_DS_:
0008c6   d047     bra	0x956                	BRA	_00132_DS_
                                           _00130_DS_:
                                           ;	.line	123; src/clock.c	LCDErase();
0008c8   ecbc     call	0x2b78, 0           	CALL	_LCDErase
0008ca   f015
                                           ;	.line	124; src/clock.c	init_time(_alarm, SM_ALARM_STRING);			
0008cc   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
0008ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d0   0e22     movlw	0x22               	MOVLW	HIGH(__str_1)
0008d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d4   0e5e     movlw	0x5e               	MOVLW	LOW(__str_1)
0008d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d8   010f     movlb	0xf                	BANKSEL	(__alarm + 2)
0008da   515a     movf	0x5a, 0, 0x1        	MOVF	(__alarm + 2), W, B
0008dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008de   010f     movlb	0xf                	BANKSEL	(__alarm + 1)
0008e0   5159     movf	0x59, 0, 0x1        	MOVF	(__alarm + 1), W, B
0008e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e4   010f     movlb	0xf                	BANKSEL	__alarm
0008e6   5158     movf	0x58, 0, 0x1        	MOVF	__alarm, W, B
0008e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ea   eca5     call	0x194a, 0           	CALL	_init_time
0008ec   f00c
0008ee   0e06     movlw	0x6                	MOVLW	0x06
0008f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008f2   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	125; src/clock.c	display_config_mode(choice_string);
0008f4   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
0008f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f8   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
0008fa   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
0008fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fe   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000900   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000904   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
000906   f017
000908   0e03     movlw	0x3                	MOVLW	0x03
00090a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	126; src/clock.c	break;
00090c   d02b     bra	0x964                	BRA	_00135_DS_
                                           _00131_DS_:
                                           ;	.line	129; src/clock.c	LCDErase();
00090e   ecbc     call	0x2b78, 0           	CALL	_LCDErase
000910   f015
                                           ;	.line	130; src/clock.c	init_time(_time, SM_CLOCK_STRING);
000912   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000914   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000916   0e22     movlw	0x22               	MOVLW	HIGH(__str_2)
000918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091a   0e6a     movlw	0x6a               	MOVLW	LOW(__str_2)
00091c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091e   010f     movlb	0xf                	BANKSEL	(__time + 2)
000920   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
000922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000924   010f     movlb	0xf                	BANKSEL	(__time + 1)
000926   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   010f     movlb	0xf                	BANKSEL	__time
00092c   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   eca5     call	0x194a, 0           	CALL	_init_time
000932   f00c
000934   0e06     movlw	0x6                	MOVLW	0x06
000936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; src/clock.c	T0CONbits.TMR0ON = 1;			
000938   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
00093a   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	132; src/clock.c	display_config_mode(choice_string);
00093c   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
00093e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000940   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000942   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000946   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000948   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
00094a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094c   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
00094e   f017
000950   0e03     movlw	0x3                	MOVLW	0x03
000952   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; src/clock.c	break;
000954   d007     bra	0x964                	BRA	_00135_DS_
                                           _00132_DS_:
                                           ;	.line	135; src/clock.c	LCDErase();
000956   ecbc     call	0x2b78, 0           	CALL	_LCDErase
000958   f015
00095a   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	136; src/clock.c	config_mode_on = 0;
00095c   6b4b     clrf	0x4b, 0x1           	CLRF	_config_mode_on, B
00095e   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
000960   6b4c     clrf	0x4c, 0x1           	CLRF	(_config_mode_on + 1), B
                                           ;	.line	137; src/clock.c	return;
000962   d09d     bra	0xa9e                	BRA	_00145_DS_
                                           _00135_DS_:
                                           ;	.line	140; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000964   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000966   6e03     movwf	0x3, 0             	MOVWF	r0x03
000968   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
00096a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00096c   0e80     movlw	0x80               	MOVLW	0x80
00096e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000970   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   ec3f     call	0x2e7e, 0           	CALL	_read_and_clear
00097e   f017
000980   6e02     movwf	0x2, 0             	MOVWF	r0x02
000982   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000984   f003
000986   0e03     movlw	0x3                	MOVLW	0x03
000988   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00098a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00098c   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
00098e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000990   d77a     bra	0x886                	BRA	_00143_DS_
                                           ;	.line	142; src/clock.c	switch(choice){
000992   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000994   0f80     addlw	0x80               	ADDLW	0x80
000996   0f81     addlw	0x81               	ADDLW	0x81
000998   e102     bnz	0x99e                	BNZ	_00158_DS_
00099a   0eff     movlw	0xff               	MOVLW	0xff
00099c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00158_DS_:
00099e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0009a0   d772     bra	0x886                	BRA	_00143_DS_
0009a2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009a4   0f80     addlw	0x80               	ADDLW	0x80
0009a6   0f80     addlw	0x80               	ADDLW	0x80
0009a8   e102     bnz	0x9ae                	BNZ	_00159_DS_
0009aa   0e02     movlw	0x2                	MOVLW	0x02
0009ac   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00159_DS_:
0009ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009b0   d76a     bra	0x886                	BRA	_00143_DS_
0009b2   2800     incf	0, 0, 0             	INCF	r0x00, W
0009b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009b6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0009b8   ffe5
0009ba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0009bc   ffe5
0009be   6a06     clrf	0x6, 0              	CLRF	r0x06
0009c0   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
0009c2   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009c4   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0009c6   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
0009c8   0bfc     andlw	0xfc               	ANDLW	0xfc
0009ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0009cc   0e00     movlw	0                  	MOVLW	UPPER(_00160_DS_)
0009ce   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0009d0   0e09     movlw	0x9                	MOVLW	HIGH(_00160_DS_)
0009d2   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0009d4   0eec     movlw	0xec               	MOVLW	LOW(_00160_DS_)
0009d6   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0009d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009da   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0009dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009de   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0009e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009e4   f006
0009e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009e8   f005
0009ea   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00160_DS_:
0009ec   effc     goto	0x9f8               	GOTO	_00136_DS_
0009ee   f004
0009f0   ef17     goto	0xa2e               	GOTO	_00137_DS_
0009f2   f005
0009f4   ef33     goto	0xa66               	GOTO	_00138_DS_
0009f6   f005
                                           _00136_DS_:
                                           ;	.line	145; src/clock.c	LCDErase();
0009f8   ecbc     call	0x2b78, 0           	CALL	_LCDErase
0009fa   f015
                                           ;	.line	146; src/clock.c	choice = CONFIG_MODE_ALARM;
0009fc   6a00     clrf	0, 0                	CLRF	r0x00
0009fe   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	147; src/clock.c	choice_string = CM_ALARM_STRING;
000a00   0e52     movlw	0x52               	MOVLW	LOW(__str_0)
000a02   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a04   6f51     movwf	0x51, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a06   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000a08   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a0a   6f52     movwf	0x52, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a0c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000a0e   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a10   6f53     movwf	0x53, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a12   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	148; src/clock.c	display_config_mode(choice_string);
000a14   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a18   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a1a   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1e   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a20   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a24   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
000a26   f017
000a28   0e03     movlw	0x3                	MOVLW	0x03
000a2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	149; src/clock.c	break;
000a2c   d72c     bra	0x886                	BRA	_00143_DS_
                                           _00137_DS_:
                                           ;	.line	152; src/clock.c	LCDErase();
000a2e   ecbc     call	0x2b78, 0           	CALL	_LCDErase
000a30   f015
                                           ;	.line	153; src/clock.c	choice = CONFIG_MODE_CLOCK;
000a32   0e01     movlw	0x1                	MOVLW	0x01
000a34   6e00     movwf	0, 0               	MOVWF	r0x00
000a36   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	154; src/clock.c	choice_string = CM_CLOCK_STRING;
000a38   0e76     movlw	0x76               	MOVLW	LOW(__str_3)
000a3a   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a3c   6f51     movwf	0x51, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a3e   0e22     movlw	0x22               	MOVLW	HIGH(__str_3)
000a40   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a42   6f52     movwf	0x52, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a44   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a46   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a48   6f53     movwf	0x53, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a4a   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	155; src/clock.c	display_config_mode(choice_string);
000a4c   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a50   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a52   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a56   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a58   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5c   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
000a5e   f017
000a60   0e03     movlw	0x3                	MOVLW	0x03
000a62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; src/clock.c	break;
000a64   d710     bra	0x886                	BRA	_00143_DS_
                                           _00138_DS_:
                                           ;	.line	159; src/clock.c	LCDErase();
000a66   ecbc     call	0x2b78, 0           	CALL	_LCDErase
000a68   f015
                                           ;	.line	160; src/clock.c	choice =CONFIG_MODE_QUIT;
000a6a   0eff     movlw	0xff               	MOVLW	0xff
000a6c   6e00     movwf	0, 0               	MOVWF	r0x00
000a6e   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	161; src/clock.c	choice_string = CM_QUIT_STRING;
000a70   0e82     movlw	0x82               	MOVLW	LOW(__str_4)
000a72   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a74   6f51     movwf	0x51, 0x1          	MOVWF	_init_config_choice_string_1_1, B
000a76   0e22     movlw	0x22               	MOVLW	HIGH(__str_4)
000a78   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a7a   6f52     movwf	0x52, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 1), B
000a7c   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a7e   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
000a80   6f53     movwf	0x53, 0x1          	MOVWF	(_init_config_choice_string_1_1 + 2), B
000a82   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 2)
                                           ;	.line	162; src/clock.c	display_config_mode(choice_string);
000a84   5153     movf	0x53, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 2), W, B
000a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a88   010f     movlb	0xf                	BANKSEL	(_init_config_choice_string_1_1 + 1)
000a8a   5152     movf	0x52, 0, 0x1        	MOVF	(_init_config_choice_string_1_1 + 1), W, B
000a8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a8e   010f     movlb	0xf                	BANKSEL	_init_config_choice_string_1_1
000a90   5151     movf	0x51, 0, 0x1        	MOVF	_init_config_choice_string_1_1, W, B
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   ecff     call	0x2ffe, 0           	CALL	_display_config_mode
000a96   f017
000a98   0e03     movlw	0x3                	MOVLW	0x03
000a9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	164; src/clock.c	}
000a9c   d6f4     bra	0x886                	BRA	_00143_DS_
                                           _00145_DS_:
000a9e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000aa0   f004
000aa2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000aa4   f003
000aa6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000aa8   f002
000aaa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aac   f001
000aae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ab0   f000
000ab2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ab4   ffd9
000ab6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_alarm_led	code
                                           _toggle_alarm_led:
                                           ;	.line	106; src/clock.c	void toggle_alarm_led(void){
003126   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003128   ffe5
00312a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00312c   ffd9
00312e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003130   ffe5
                                           ;	.line	107; src/clock.c	LED1_IO^=1;
003132   6a00     clrf	0, 0                	CLRF	r0x00
003134   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
003136   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003138   0e01     movlw	0x1                	MOVLW	0x01
00313a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00313c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00313e   0b01     andlw	0x1                	ANDLW	0x01
003140   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003142   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003144   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003146   0bfd     andlw	0xfd               	ANDLW	0xfd
003148   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00314a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	108; src/clock.c	LED2_IO^=1;
00314c   6a00     clrf	0, 0                	CLRF	r0x00
00314e   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
003150   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003152   0e01     movlw	0x1                	MOVLW	0x01
003154   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003156   5000     movf	0, 0, 0             	MOVF	r0x00, W
003158   0b01     andlw	0x1                	ANDLW	0x01
00315a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00315c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00315e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003160   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003162   0bfb     andlw	0xfb               	ANDLW	0xfb
003164   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003166   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
003168   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00316a   f000
00316c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00316e   ffd9
003170   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_second_led	code
                                           _toggle_second_led:
                                           ;	.line	99; src/clock.c	void toggle_second_led(void){
0031e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031ea   ffe5
0031ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031ee   ffd9
0031f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031f2   ffe5
                                           ;	.line	100; src/clock.c	LED0_IO^=1;
0031f4   6a00     clrf	0, 0                	CLRF	r0x00
0031f6   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0031f8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0031fa   0e01     movlw	0x1                	MOVLW	0x01
0031fc   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0031fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003200   0b01     andlw	0x1                	ANDLW	0x01
003202   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003204   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
003206   0bfe     andlw	0xfe               	ANDLW	0xfe
003208   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00320a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00320c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00320e   f000
003210   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003212   ffd9
003214   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	90; src/clock.c	void update_display(void){
0021d6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0021d8   ffe5
0021da   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0021dc   ffd9
0021de   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0021e0   ffe5
0021e2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0021e4   ffe5
0021e6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0021e8   ffe5
                                           ;	.line	92; src/clock.c	time_print(_time, display_line);
0021ea   0e0f     movlw	0xf                	MOVLW	HIGH(_update_display_display_line_1_1)
0021ec   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021ee   0e21     movlw	0x21               	MOVLW	LOW(_update_display_display_line_1_1)
0021f0   6e00     movwf	0, 0               	MOVWF	r0x00
0021f2   0e80     movlw	0x80               	MOVLW	0x80
0021f4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
002200   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002202   010f     movlb	0xf                	BANKSEL	(__time + 2)
002204   5157     movf	0x57, 0, 0x1        	MOVF	(__time + 2), W, B
002206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002208   010f     movlb	0xf                	BANKSEL	(__time + 1)
00220a   5156     movf	0x56, 0, 0x1        	MOVF	(__time + 1), W, B
00220c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00220e   010f     movlb	0xf                	BANKSEL	__time
002210   5155     movf	0x55, 0, 0x1        	MOVF	__time, W, B
002212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002214   ecd3     call	0x1ba6, 0           	CALL	_time_print
002216   f00d
002218   0e06     movlw	0x6                	MOVLW	0x06
00221a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	93; src/clock.c	display_string(0, display_line);
00221c   0e0f     movlw	0xf                	MOVLW	HIGH(_update_display_display_line_1_1)
00221e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002220   0e21     movlw	0x21               	MOVLW	LOW(_update_display_display_line_1_1)
002222   6e00     movwf	0, 0               	MOVWF	r0x00
002224   0e80     movlw	0x80               	MOVLW	0x80
002226   6e02     movwf	0x2, 0             	MOVWF	r0x02
002228   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00222a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00222c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00222e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002230   5000     movf	0, 0, 0             	MOVF	r0x00, W
002232   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002234   0e00     movlw	0                  	MOVLW	0x00
002236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002238   ecf1     call	0x1de2, 0           	CALL	_display_string
00223a   f00e
00223c   0e04     movlw	0x4                	MOVLW	0x04
00223e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002240   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002242   f002
002244   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002246   f001
002248   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00224a   f000
00224c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00224e   ffd9
002250   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002252   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
002254   2074     addwfc	0x74, 0, 0        
002256   6c61     negf	0x61, 0             
002258   7261     btg	0x61, 0x1, 0         
00225a   3f6d     incfsz	0x6d, 0x1, 0x1    
00225c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
00225e   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x00
002260   2074     addwfc	0x74, 0, 0        
002262   6c61     negf	0x61, 0             
002264   7261     btg	0x61, 0x1, 0         
002266   3a6d     swapf	0x6d, 0x1, 0       
002268   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
00226a   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x00
00226c   2074     addwfc	0x74, 0, 0        
00226e   6c63     negf	0x63, 0             
002270   636f     cpfseq	0x6f, 0x1         
002272   3a6b     swapf	0x6b, 0x1, 0       
002274   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
002276   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
002278   2074     addwfc	0x74, 0, 0        
00227a   6c63     negf	0x63, 0             
00227c   636f     cpfseq	0x6f, 0x1         
00227e   3f6b     incfsz	0x6b, 0x1, 0x1    
002280   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
002282   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
002284   7469     btg	0x69, 0x2, 0         
002286   6320     cpfseq	0x20, 0x1         
002288   6e6f     movwf	0x6f, 0            
00228a   6966     setf	0x66, 0x1           
00228c   2067     addwfc	0x67, 0, 0        
00228e   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
002290   6564     cpfsgt	0x64, 0x1         
002292   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
002294   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x3a
002296   6f6f     movwf	0x6f, 0x1          
002298   6573     cpfsgt	0x73, 0x1         
00229a   6d20     negf	0x20, 0x1           
00229c   646f     cpfsgt	0x6f, 0           
00229e   3a65     swapf	0x65, 0x1, 0       
0022a0   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_6:
0022a2   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
0022a4   7275     btg	0x75, 0x1, 0         
0022a6   3a73     swapf	0x73, 0x1, 0       
0022a8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
0022aa   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x00
0022ac   756e     btg	0x6e, 0x2, 0x1       
0022ae   6574     cpfsgt	0x74, 0x1         
0022b0   3a73     swapf	0x73, 0x1, 0       
0022b2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
0022b4   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x00
0022b6   6f63     movwf	0x63, 0x1          
0022b8   646e     cpfsgt	0x6e, 0           
0022ba   3a73     swapf	0x73, 0x1, 0       
0022bc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
0022be   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
0022c0   6432     cpfsgt	0x32, 0           
0022c2   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2926 (0x0b6e) bytes ( 2.23%)
                                           ;           	 1463 (0x05b7) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 14:15:36 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002b78   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b7a   ffe5
002b7c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b7e   ffd9
002b80   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b82   ffe5
002b84   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b86   ffe5
002b88   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b8a   ffe5
002b8c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b8e   ffe5
002b90   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b92   ffe5
002b94   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b96   ffe5
002b98   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b9a   ffe5
002b9c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b9e   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002ba0   0e01     movlw	0x1                	MOVLW	0x01
002ba2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba4   0e00     movlw	0                  	MOVLW	0x00
002ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ba8   ec33     call	0x3066, 0           	CALL	_LCDWrite
002baa   f018
002bac   0e02     movlw	0x2                	MOVLW	0x02
002bae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002bb0   0e48     movlw	0x48               	MOVLW	0x48
002bb2   6e00     movwf	0, 0               	MOVWF	r0x00
002bb4   0e0d     movlw	0xd                	MOVLW	0x0d
002bb6   6e01     movwf	0x1, 0             	MOVWF	r0x01
002bb8   6a02     clrf	0x2, 0              	CLRF	r0x02
002bba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002bbc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002bbe   f004
002bc0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002bc2   f005
002bc4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002bc6   f006
002bc8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002bca   f007
002bcc   0eff     movlw	0xff               	MOVLW	0xff
002bce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002bd0   0eff     movlw	0xff               	MOVLW	0xff
002bd2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002bd4   0eff     movlw	0xff               	MOVLW	0xff
002bd6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002bd8   0eff     movlw	0xff               	MOVLW	0xff
002bda   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002bdc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002bde   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002be0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002be2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002be4   e1eb     bnz	0x2bbc               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002be6   0e00     movlw	0                  	MOVLW	0x00
002be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bea   0e20     movlw	0x20               	MOVLW	0x20
002bec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bee   0e20     movlw	0x20               	MOVLW	0x20
002bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bf2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bf6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bfa   ecb9     call	0x2572, 0           	CALL	_memset
002bfc   f012
002bfe   0e05     movlw	0x5                	MOVLW	0x05
002c00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c02   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002c04   f007
002c06   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002c08   f006
002c0a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002c0c   f005
002c0e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c10   f004
002c12   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c14   f003
002c16   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c18   f002
002c1a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c1c   f001
002c1e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c20   f000
002c22   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c24   ffd9
002c26   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000ab8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aba   ffe5
000abc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000abe   ffd9
000ac0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ac2   ffe5
000ac4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ac6   ffe5
000ac8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000aca   ffe5
000acc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ace   ffe5
000ad0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ad2   ffe5
000ad4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ad6   ffe5
000ad8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ada   ffe5
000adc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ade   ffe5
000ae0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ae2   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
000ae4   0e02     movlw	0x2                	MOVLW	0x02
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   0e00     movlw	0                  	MOVLW	0x00
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   ec33     call	0x3066, 0           	CALL	_LCDWrite
000aee   f018
000af0   0e02     movlw	0x2                	MOVLW	0x02
000af2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
000af4   0e48     movlw	0x48               	MOVLW	0x48
000af6   6e00     movwf	0, 0               	MOVWF	r0x00
000af8   0e0d     movlw	0xd                	MOVLW	0x0d
000afa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000afc   6a02     clrf	0x2, 0              	CLRF	r0x02
000afe   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000b00   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000b02   f004
000b04   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000b06   f005
000b08   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000b0a   f006
000b0c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000b0e   f007
000b10   0eff     movlw	0xff               	MOVLW	0xff
000b12   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b14   0eff     movlw	0xff               	MOVLW	0xff
000b16   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b18   0eff     movlw	0xff               	MOVLW	0xff
000b1a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b1c   0eff     movlw	0xff               	MOVLW	0xff
000b1e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b22   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000b24   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b26   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b28   e1eb     bnz	0xb00                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000b2a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
000b2c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b2e   f001
000b30   6a02     clrf	0x2, 0              	CLRF	r0x02
000b32   0e00     movlw	0                  	MOVLW	0x00
000b34   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000b36   e102     bnz	0xb3c                	BNZ	_00297_DS_
000b38   0e10     movlw	0x10               	MOVLW	0x10
000b3a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
000b3c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000b3e   d057     bra	0xbee                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000b40   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b42   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b44   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b46   6a02     clrf	0x2, 0              	CLRF	r0x02
000b48   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b4a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b4c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b4e   ffe9
000b50   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000b52   ffea
000b54   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000b56   f001
000b58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b5a   e119     bnz	0xb8e                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000b5c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000b5e   f001
                                           _00253_DS_:
000b60   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000b62   f002
000b64   6a03     clrf	0x3, 0              	CLRF	r0x03
000b66   0e00     movlw	0                  	MOVLW	0x00
000b68   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b6a   e102     bnz	0xb70                	BNZ	_00298_DS_
000b6c   0e10     movlw	0x10               	MOVLW	0x10
000b6e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
000b70   e20e     bc	0xb8e                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
000b72   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b74   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000b76   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b78   6a03     clrf	0x3, 0              	CLRF	r0x03
000b7a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000b7e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000b80   ffe9
000b82   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000b84   ffea
000b86   0e20     movlw	0x20               	MOVLW	0x20
000b88   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000b8a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000b8c   d7e9     bra	0xb60                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000b8e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000b90   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b92   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b94   6a02     clrf	0x2, 0              	CLRF	r0x02
000b96   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000b98   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b9a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b9c   ffe9
000b9e   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000ba0   ffea
000ba2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000ba4   f001
000ba6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000baa   0e01     movlw	0x1                	MOVLW	0x01
000bac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bae   ec33     call	0x3066, 0           	CALL	_LCDWrite
000bb0   f018
000bb2   0e02     movlw	0x2                	MOVLW	0x02
000bb4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000bb6   0e55     movlw	0x55               	MOVLW	0x55
000bb8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bba   6a02     clrf	0x2, 0              	CLRF	r0x02
000bbc   6a03     clrf	0x3, 0              	CLRF	r0x03
000bbe   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000bc0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000bc2   f005
000bc4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000bc6   f006
000bc8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000bca   f007
000bcc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000bce   f008
000bd0   0eff     movlw	0xff               	MOVLW	0xff
000bd2   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000bd4   0eff     movlw	0xff               	MOVLW	0xff
000bd6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bd8   0eff     movlw	0xff               	MOVLW	0xff
000bda   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000bdc   0eff     movlw	0xff               	MOVLW	0xff
000bde   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000be0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000be4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000be6   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000be8   e1eb     bnz	0xbc0                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000bea   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bec   d79f     bra	0xb2c                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000bee   0ec0     movlw	0xc0               	MOVLW	0xc0
000bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf2   0e00     movlw	0                  	MOVLW	0x00
000bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf6   ec33     call	0x3066, 0           	CALL	_LCDWrite
000bf8   f018
000bfa   0e02     movlw	0x2                	MOVLW	0x02
000bfc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000bfe   0e55     movlw	0x55               	MOVLW	0x55
000c00   6e00     movwf	0, 0               	MOVWF	r0x00
000c02   6a01     clrf	0x1, 0              	CLRF	r0x01
000c04   6a02     clrf	0x2, 0              	CLRF	r0x02
000c06   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000c08   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000c0a   f004
000c0c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000c0e   f005
000c10   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000c12   f006
000c14   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000c16   f007
000c18   0eff     movlw	0xff               	MOVLW	0xff
000c1a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c1c   0eff     movlw	0xff               	MOVLW	0xff
000c1e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c20   0eff     movlw	0xff               	MOVLW	0xff
000c22   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c24   0eff     movlw	0xff               	MOVLW	0xff
000c26   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c2a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000c2c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000c2e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c30   e1eb     bnz	0xc08                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000c32   0e10     movlw	0x10               	MOVLW	0x10
000c34   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
000c36   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000c38   f001
000c3a   6a02     clrf	0x2, 0              	CLRF	r0x02
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c40   e102     bnz	0xc46                	BNZ	_00299_DS_
000c42   0e20     movlw	0x20               	MOVLW	0x20
000c44   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
000c46   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c48   d057     bra	0xcf8                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
000c4a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c4c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000c4e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c50   6a02     clrf	0x2, 0              	CLRF	r0x02
000c52   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000c54   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c56   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000c58   ffe9
000c5a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000c5c   ffea
000c5e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000c60   f001
000c62   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c64   e119     bnz	0xc98                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000c66   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000c68   f001
                                           _00261_DS_:
000c6a   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000c6c   f002
000c6e   6a03     clrf	0x3, 0              	CLRF	r0x03
000c70   0e00     movlw	0                  	MOVLW	0x00
000c72   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000c74   e102     bnz	0xc7a                	BNZ	_00300_DS_
000c76   0e20     movlw	0x20               	MOVLW	0x20
000c78   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000c7a   e20e     bc	0xc98                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000c7c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c7e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000c80   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c82   6a03     clrf	0x3, 0              	CLRF	r0x03
000c84   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000c86   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c88   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000c8a   ffe9
000c8c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000c8e   ffea
000c90   0e20     movlw	0x20               	MOVLW	0x20
000c92   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000c94   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000c96   d7e9     bra	0xc6a                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000c98   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000c9a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000c9c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c9e   6a02     clrf	0x2, 0              	CLRF	r0x02
000ca0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000ca2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ca4   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000ca6   ffe9
000ca8   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000caa   ffea
000cac   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000cae   f001
000cb0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb4   0e01     movlw	0x1                	MOVLW	0x01
000cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb8   ec33     call	0x3066, 0           	CALL	_LCDWrite
000cba   f018
000cbc   0e02     movlw	0x2                	MOVLW	0x02
000cbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000cc0   0e55     movlw	0x55               	MOVLW	0x55
000cc2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cc4   6a02     clrf	0x2, 0              	CLRF	r0x02
000cc6   6a03     clrf	0x3, 0              	CLRF	r0x03
000cc8   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000cca   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ccc   f005
000cce   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000cd0   f006
000cd2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000cd4   f007
000cd6   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000cd8   f008
000cda   0eff     movlw	0xff               	MOVLW	0xff
000cdc   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000cde   0eff     movlw	0xff               	MOVLW	0xff
000ce0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ce2   0eff     movlw	0xff               	MOVLW	0xff
000ce4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ce6   0eff     movlw	0xff               	MOVLW	0xff
000ce8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000cea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000cec   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000cee   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000cf0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000cf2   e1eb     bnz	0xcca                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000cf4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000cf6   d79f     bra	0xc36                	BRA	_00265_DS_
                                           _00269_DS_:
000cf8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cfa   f008
000cfc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cfe   f007
000d00   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000d02   f006
000d04   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000d06   f005
000d08   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000d0a   f004
000d0c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000d0e   f003
000d10   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d12   f002
000d14   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d16   f001
000d18   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d1a   f000
000d1c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d1e   ffd9
000d20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000d22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d24   ffe5
000d26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d28   ffd9
000d2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d2c   ffe5
000d2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d30   ffe5
000d32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d34   ffe5
000d36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d38   ffe5
000d3a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d3c   ffe5
000d3e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d40   ffe5
000d42   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d44   ffe5
000d46   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d48   ffe5
000d4a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d4c   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000d4e   0e00     movlw	0                  	MOVLW	0x00
000d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d52   0e20     movlw	0x20               	MOVLW	0x20
000d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d56   0e20     movlw	0x20               	MOVLW	0x20
000d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   ecb9     call	0x2572, 0           	CALL	_memset
000d64   f012
000d66   0e05     movlw	0x5                	MOVLW	0x05
000d68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d6a   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000d6c   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000d6e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000d70   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000d72   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000d74   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000d76   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000d78   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000d7a   0ea0     movlw	0xa0               	MOVLW	0xa0
000d7c   6e00     movwf	0, 0               	MOVWF	r0x00
000d7e   0e09     movlw	0x9                	MOVLW	0x09
000d80   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d82   0e01     movlw	0x1                	MOVLW	0x01
000d84   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d86   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000d88   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000d8a   f004
000d8c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000d8e   f005
000d90   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000d92   f006
000d94   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000d96   f007
000d98   0eff     movlw	0xff               	MOVLW	0xff
000d9a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d9c   0eff     movlw	0xff               	MOVLW	0xff
000d9e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000da0   0eff     movlw	0xff               	MOVLW	0xff
000da2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000da4   0eff     movlw	0xff               	MOVLW	0xff
000da6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000dac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000dae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000db0   e1eb     bnz	0xd88                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000db2   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000db4   0e03     movlw	0x3                	MOVLW	0x03
000db6   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000db8   0000     nop                      	nop 
000dba   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000dbc   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000dbe   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000dc0   f001
000dc2   6a02     clrf	0x2, 0              	CLRF	r0x02
000dc4   0e00     movlw	0                  	MOVLW	0x00
000dc6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000dc8   e102     bnz	0xdce                	BNZ	_00220_DS_
000dca   0e03     movlw	0x3                	MOVLW	0x03
000dcc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000dce   e239     bc	0xe42                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000dd0   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000dd2   0e11     movlw	0x11               	MOVLW	0x11
000dd4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dd6   6a02     clrf	0x2, 0              	CLRF	r0x02
000dd8   6a03     clrf	0x3, 0              	CLRF	r0x03
000dda   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000ddc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000dde   f005
000de0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000de2   f006
000de4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000de6   f007
000de8   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000dea   f008
000dec   0eff     movlw	0xff               	MOVLW	0xff
000dee   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000df0   0eff     movlw	0xff               	MOVLW	0xff
000df2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000df4   0eff     movlw	0xff               	MOVLW	0xff
000df6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000df8   0eff     movlw	0xff               	MOVLW	0xff
000dfa   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000dfc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000dfe   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e00   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e02   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e04   e1eb     bnz	0xddc                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000e06   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000e08   0e48     movlw	0x48               	MOVLW	0x48
000e0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e0c   0e0d     movlw	0xd                	MOVLW	0x0d
000e0e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e10   6a03     clrf	0x3, 0              	CLRF	r0x03
000e12   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000e14   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e16   f005
000e18   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e1a   f006
000e1c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e1e   f007
000e20   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000e22   f008
000e24   0eff     movlw	0xff               	MOVLW	0xff
000e26   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000e28   0eff     movlw	0xff               	MOVLW	0xff
000e2a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e2c   0eff     movlw	0xff               	MOVLW	0xff
000e2e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e30   0eff     movlw	0xff               	MOVLW	0xff
000e32   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000e34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e36   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e3a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e3c   e1eb     bnz	0xe14                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000e3e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e40   d7be     bra	0xdbe                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000e42   0e38     movlw	0x38               	MOVLW	0x38
000e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e46   0e00     movlw	0                  	MOVLW	0x00
000e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4a   ec33     call	0x3066, 0           	CALL	_LCDWrite
000e4c   f018
000e4e   0e02     movlw	0x2                	MOVLW	0x02
000e50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000e52   0e55     movlw	0x55               	MOVLW	0x55
000e54   6e00     movwf	0, 0               	MOVWF	r0x00
000e56   6a01     clrf	0x1, 0              	CLRF	r0x01
000e58   6a02     clrf	0x2, 0              	CLRF	r0x02
000e5a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000e5c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000e5e   f004
000e60   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e62   f005
000e64   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e66   f006
000e68   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e6a   f007
000e6c   0eff     movlw	0xff               	MOVLW	0xff
000e6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000e70   0eff     movlw	0xff               	MOVLW	0xff
000e72   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000e74   0eff     movlw	0xff               	MOVLW	0xff
000e76   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e78   0eff     movlw	0xff               	MOVLW	0xff
000e7a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e7c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e7e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000e80   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e84   e1eb     bnz	0xe5c                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000e86   0e06     movlw	0x6                	MOVLW	0x06
000e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8a   0e00     movlw	0                  	MOVLW	0x00
000e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8e   ec33     call	0x3066, 0           	CALL	_LCDWrite
000e90   f018
000e92   0e02     movlw	0x2                	MOVLW	0x02
000e94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000e96   0e55     movlw	0x55               	MOVLW	0x55
000e98   6e00     movwf	0, 0               	MOVWF	r0x00
000e9a   6a01     clrf	0x1, 0              	CLRF	r0x01
000e9c   6a02     clrf	0x2, 0              	CLRF	r0x02
000e9e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000ea0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ea2   f004
000ea4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ea6   f005
000ea8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eaa   f006
000eac   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000eae   f007
000eb0   0eff     movlw	0xff               	MOVLW	0xff
000eb2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000eb4   0eff     movlw	0xff               	MOVLW	0xff
000eb6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000eb8   0eff     movlw	0xff               	MOVLW	0xff
000eba   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ebc   0eff     movlw	0xff               	MOVLW	0xff
000ebe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ec0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ec2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000ec4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000ec6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000ec8   e1eb     bnz	0xea0                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000eca   0e0c     movlw	0xc                	MOVLW	0x0c
000ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ece   0e00     movlw	0                  	MOVLW	0x00
000ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed2   ec33     call	0x3066, 0           	CALL	_LCDWrite
000ed4   f018
000ed6   0e02     movlw	0x2                	MOVLW	0x02
000ed8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000eda   0e55     movlw	0x55               	MOVLW	0x55
000edc   6e00     movwf	0, 0               	MOVWF	r0x00
000ede   6a01     clrf	0x1, 0              	CLRF	r0x01
000ee0   6a02     clrf	0x2, 0              	CLRF	r0x02
000ee2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000ee4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ee6   f004
000ee8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000eea   f005
000eec   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eee   f006
000ef0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ef2   f007
000ef4   0eff     movlw	0xff               	MOVLW	0xff
000ef6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ef8   0eff     movlw	0xff               	MOVLW	0xff
000efa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000efc   0eff     movlw	0xff               	MOVLW	0xff
000efe   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f00   0eff     movlw	0xff               	MOVLW	0xff
000f02   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f06   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f08   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f0a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f0c   e1eb     bnz	0xee4                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000f0e   0e01     movlw	0x1                	MOVLW	0x01
000f10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f12   0e00     movlw	0                  	MOVLW	0x00
000f14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f16   ec33     call	0x3066, 0           	CALL	_LCDWrite
000f18   f018
000f1a   0e02     movlw	0x2                	MOVLW	0x02
000f1c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000f1e   0e48     movlw	0x48               	MOVLW	0x48
000f20   6e00     movwf	0, 0               	MOVWF	r0x00
000f22   0e0d     movlw	0xd                	MOVLW	0x0d
000f24   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f26   6a02     clrf	0x2, 0              	CLRF	r0x02
000f28   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000f2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f2c   f004
000f2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f30   f005
000f32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f34   f006
000f36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f38   f007
000f3a   0eff     movlw	0xff               	MOVLW	0xff
000f3c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f3e   0eff     movlw	0xff               	MOVLW	0xff
000f40   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f42   0eff     movlw	0xff               	MOVLW	0xff
000f44   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f46   0eff     movlw	0xff               	MOVLW	0xff
000f48   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f4c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f4e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f50   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f52   e1eb     bnz	0xf2a                	BNZ	_00185_DS_
000f54   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000f56   f008
000f58   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f5a   f007
000f5c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f5e   f006
000f60   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f62   f005
000f64   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f66   f004
000f68   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f6a   f003
000f6c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f6e   f002
000f70   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f72   f001
000f74   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f76   f000
000f78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f7a   ffd9
000f7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
003066   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003068   ffe5
00306a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00306c   ffd9
00306e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003070   ffe5
003072   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003074   ffe5
003076   0e02     movlw	0x2                	MOVLW	0x02
003078   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00307a   f000
00307c   0e03     movlw	0x3                	MOVLW	0x03
00307e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003080   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
003082   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
003084   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
003086   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
003088   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
00308a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00308c   0b01     andlw	0x1                	ANDLW	0x01
00308e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003090   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003092   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003094   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
003096   0bfb     andlw	0xfb               	ANDLW	0xfb
003098   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00309a   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
00309c   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00309e   ff8d
0030a0   0000     nop                      	nop 
0030a2   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
0030a4   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
0030a6   0000     nop                      	nop 
0030a8   0000     nop                      	nop 
0030aa   0000     nop                      	nop 
0030ac   0000     nop                      	nop 
0030ae   0000     nop                      	nop 
0030b0   0000     nop                      	nop 
0030b2   0000     nop                      	nop 
0030b4   0000     nop                      	nop 
0030b6   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
0030b8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0030ba   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0030bc   f001
0030be   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0030c0   f000
0030c2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0030c4   ffd9
0030c6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 14:15:36 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
001662   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001664   ffe5
001666   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001668   ffd9
00166a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00166c   ffe5
00166e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001670   ffe5
001672   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001674   ffe5
001676   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001678   ffe5
00167a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00167c   ffe5
00167e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001680   ffe5
001682   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001684   ffe5
001686   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001688   ffe5
00168a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00168c   ffe5
00168e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001690   ffe5
001692   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001694   ffe5
001696   0e02     movlw	0x2                	MOVLW	0x02
001698   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00169a   f000
00169c   0e03     movlw	0x3                	MOVLW	0x03
00169e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0016a0   f001
0016a2   0e04     movlw	0x4                	MOVLW	0x04
0016a4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0016a6   f002
0016a8   0e05     movlw	0x5                	MOVLW	0x05
0016aa   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0016ac   f003
0016ae   0e06     movlw	0x6                	MOVLW	0x06
0016b0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0016b2   f004
0016b4   0e07     movlw	0x7                	MOVLW	0x07
0016b6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0016b8   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
0016ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016bc   0f04     addlw	0x4                	ADDLW	0x04
0016be   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016c0   0e00     movlw	0                  	MOVLW	0x00
0016c2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0016c4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0016c6   0e00     movlw	0                  	MOVLW	0x00
0016c8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0016ca   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016cc   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0016ce   ffe9
0016d0   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0016d2   fff3
0016d4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0016d6   ec22     call	0x3244, 0           	CALL	__gptrget2
0016d8   f019
0016da   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016dc   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016de   f007
0016e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016e2   0f04     addlw	0x4                	ADDLW	0x04
0016e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016e6   0e00     movlw	0                  	MOVLW	0x00
0016e8   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0016ea   6e09     movwf	0x9, 0             	MOVWF	r0x09
0016ec   0e00     movlw	0                  	MOVLW	0x00
0016ee   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016f0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0016f2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0016f4   ffe9
0016f6   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0016f8   fff3
0016fa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0016fc   ec22     call	0x3244, 0           	CALL	__gptrget2
0016fe   f019
001700   6e08     movwf	0x8, 0             	MOVWF	r0x08
001702   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001704   f009
001706   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001708   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
00170a   e103     bnz	0x1712               	BNZ	_00166_DS_
00170c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00170e   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001710   e003     bz	0x1718                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
001712   6af3     clrf	0xf3, 0             	CLRF	PRODL
001714   6ae8     clrf	0xe8, 0             	CLRF	WREG
001716   d04e     bra	0x17b4               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
001718   5000     movf	0, 0, 0             	MOVF	r0x00, W
00171a   0f02     addlw	0x2                	ADDLW	0x02
00171c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00171e   0e00     movlw	0                  	MOVLW	0x00
001720   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001722   6e07     movwf	0x7, 0             	MOVWF	r0x07
001724   0e00     movlw	0                  	MOVLW	0x00
001726   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001728   6e08     movwf	0x8, 0             	MOVWF	r0x08
00172a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00172c   ffe9
00172e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001730   fff3
001732   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001734   ec22     call	0x3244, 0           	CALL	__gptrget2
001736   f019
001738   6e06     movwf	0x6, 0             	MOVWF	r0x06
00173a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00173c   f007
00173e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001740   0f02     addlw	0x2                	ADDLW	0x02
001742   6e08     movwf	0x8, 0             	MOVWF	r0x08
001744   0e00     movlw	0                  	MOVLW	0x00
001746   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001748   6e09     movwf	0x9, 0             	MOVWF	r0x09
00174a   0e00     movlw	0                  	MOVLW	0x00
00174c   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00174e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001750   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001752   ffe9
001754   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001756   fff3
001758   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00175a   ec22     call	0x3244, 0           	CALL	__gptrget2
00175c   f019
00175e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001760   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001762   f009
001764   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001766   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001768   e103     bnz	0x1770               	BNZ	_00168_DS_
00176a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00176c   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00176e   e003     bz	0x1776                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
001770   6af3     clrf	0xf3, 0             	CLRF	PRODL
001772   6ae8     clrf	0xe8, 0             	CLRF	WREG
001774   d01f     bra	0x17b4               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
001776   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001778   ffe9
00177a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00177c   fff3
00177e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001780   ec22     call	0x3244, 0           	CALL	__gptrget2
001782   f019
001784   6e00     movwf	0, 0               	MOVWF	r0x00
001786   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001788   f001
00178a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00178c   ffe9
00178e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001790   fff3
001792   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001794   ec22     call	0x3244, 0           	CALL	__gptrget2
001796   f019
001798   6e03     movwf	0x3, 0             	MOVWF	r0x03
00179a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00179c   f004
00179e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017a0   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0017a2   e103     bnz	0x17aa               	BNZ	_00170_DS_
0017a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017a6   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
0017a8   e003     bz	0x17b0                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
0017aa   6af3     clrf	0xf3, 0             	CLRF	PRODL
0017ac   6ae8     clrf	0xe8, 0             	CLRF	WREG
0017ae   d002     bra	0x17b4               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
0017b0   6af3     clrf	0xf3, 0             	CLRF	PRODL
0017b2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0017b4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0017b6   f00a
0017b8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0017ba   f009
0017bc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0017be   f008
0017c0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0017c2   f007
0017c4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0017c6   f006
0017c8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017ca   f005
0017cc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017ce   f004
0017d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017d2   f003
0017d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017d6   f002
0017d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017da   f001
0017dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017de   f000
0017e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017e2   ffd9
0017e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
001ba6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ba8   ffe5
001baa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bac   ffd9
001bae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bb0   ffe5
001bb2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bb4   ffe5
001bb6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bb8   ffe5
001bba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bbc   ffe5
001bbe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bc0   ffe5
001bc2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001bc4   ffe5
001bc6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bc8   ffe5
001bca   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bcc   ffe5
001bce   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bd0   ffe5
001bd2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bd4   ffe5
001bd6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bd8   ffe5
001bda   0e02     movlw	0x2                	MOVLW	0x02
001bdc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001bde   f000
001be0   0e03     movlw	0x3                	MOVLW	0x03
001be2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001be4   f001
001be6   0e04     movlw	0x4                	MOVLW	0x04
001be8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001bea   f002
001bec   0e05     movlw	0x5                	MOVLW	0x05
001bee   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001bf0   f003
001bf2   0e06     movlw	0x6                	MOVLW	0x06
001bf4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001bf6   f004
001bf8   0e07     movlw	0x7                	MOVLW	0x07
001bfa   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001bfc   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001bfe   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c00   0f04     addlw	0x4                	ADDLW	0x04
001c02   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c04   0e00     movlw	0                  	MOVLW	0x00
001c06   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c08   6e07     movwf	0x7, 0             	MOVWF	r0x07
001c0a   0e00     movlw	0                  	MOVLW	0x00
001c0c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c0e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c10   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001c12   ffe9
001c14   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001c16   fff3
001c18   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c1a   ec22     call	0x3244, 0           	CALL	__gptrget2
001c1c   f019
001c1e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c20   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001c22   f007
001c24   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c26   0f02     addlw	0x2                	ADDLW	0x02
001c28   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c2a   0e00     movlw	0                  	MOVLW	0x00
001c2c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c2e   6e09     movwf	0x9, 0             	MOVWF	r0x09
001c30   0e00     movlw	0                  	MOVLW	0x00
001c32   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c34   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001c36   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001c38   ffe9
001c3a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001c3c   fff3
001c3e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001c40   ec22     call	0x3244, 0           	CALL	__gptrget2
001c42   f019
001c44   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c46   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001c48   f009
001c4a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001c4c   ffe9
001c4e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001c50   fff3
001c52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c54   ec22     call	0x3244, 0           	CALL	__gptrget2
001c56   f019
001c58   6e00     movwf	0, 0               	MOVWF	r0x00
001c5a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c5c   f001
001c5e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c62   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c66   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c72   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c76   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7a   0e2e     movlw	0x2e               	MOVLW	HIGH(__str_0)
001c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7e   0e6e     movlw	0x6e               	MOVLW	LOW(__str_0)
001c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c82   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8e   ec62     call	0x22c4, 0           	CALL	_sprintf
001c90   f011
001c92   0e0c     movlw	0xc                	MOVLW	0x0c
001c94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c96   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001c98   f00a
001c9a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001c9c   f009
001c9e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ca0   f008
001ca2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ca4   f007
001ca6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ca8   f006
001caa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001cac   f005
001cae   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001cb0   f004
001cb2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001cb4   f003
001cb6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001cb8   f002
001cba   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001cbc   f001
001cbe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cc0   f000
001cc2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cc4   ffd9
001cc6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002f80   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f82   ffe5
002f84   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f86   ffd9
002f88   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f8a   ffe5
002f8c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f8e   ffe5
002f90   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002f92   ffe5
002f94   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002f96   ffe5
002f98   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002f9a   ffe5
002f9c   0e02     movlw	0x2                	MOVLW	0x02
002f9e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fa0   f000
002fa2   0e03     movlw	0x3                	MOVLW	0x03
002fa4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002fa6   f001
002fa8   0e04     movlw	0x4                	MOVLW	0x04
002faa   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002fac   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002fae   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002fb0   ffe9
002fb2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002fb4   fff3
002fb6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fb8   ec22     call	0x3244, 0           	CALL	__gptrget2
002fba   f019
002fbc   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fbe   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002fc0   f004
002fc2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002fc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002fc6   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002fc8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fcc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fdc   ec4a     call	0x2894, 0           	CALL	_set_hours
002fde   f014
002fe0   0e05     movlw	0x5                	MOVLW	0x05
002fe2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002fe4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002fe6   f004
002fe8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002fea   f003
002fec   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002fee   f002
002ff0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ff2   f001
002ff4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ff6   f000
002ff8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ffa   ffd9
002ffc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
002950   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002952   ffe5
002954   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002956   ffd9
002958   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00295a   ffe5
00295c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00295e   ffe5
002960   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002962   ffe5
002964   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002966   ffe5
002968   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00296a   ffe5
00296c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00296e   ffe5
002970   0e02     movlw	0x2                	MOVLW	0x02
002972   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002974   f000
002976   0e03     movlw	0x3                	MOVLW	0x03
002978   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00297a   f001
00297c   0e04     movlw	0x4                	MOVLW	0x04
00297e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002980   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
002982   5000     movf	0, 0, 0             	MOVF	r0x00, W
002984   0f02     addlw	0x2                	ADDLW	0x02
002986   6e03     movwf	0x3, 0             	MOVWF	r0x03
002988   0e00     movlw	0                  	MOVLW	0x00
00298a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00298c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00298e   0e00     movlw	0                  	MOVLW	0x00
002990   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002992   6e05     movwf	0x5, 0             	MOVWF	r0x05
002994   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002996   ffe9
002998   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00299a   fff3
00299c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00299e   ec22     call	0x3244, 0           	CALL	__gptrget2
0029a0   f019
0029a2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029a4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029a6   f004
0029a8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0029aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0029ac   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0029ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c2   ec82     call	0x2704, 0           	CALL	_set_minutes
0029c4   f013
0029c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029c8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029ca   f004
0029cc   0e05     movlw	0x5                	MOVLW	0x05
0029ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029d2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0029d4   e00a     bz	0x29ea                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0029d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029de   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e2   ecc0     call	0x2f80, 0           	CALL	_add_hour
0029e4   f017
0029e6   0e03     movlw	0x3                	MOVLW	0x03
0029e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0029ea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0029ec   f005
0029ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029f0   f004
0029f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029f4   f003
0029f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029f8   f002
0029fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029fc   f001
0029fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a00   f000
002a02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a04   ffd9
002a06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
002a08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a0a   ffe5
002a0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a0e   ffd9
002a10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a12   ffe5
002a14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a16   ffe5
002a18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a1a   ffe5
002a1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a1e   ffe5
002a20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a22   ffe5
002a24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002a26   ffe5
002a28   0e02     movlw	0x2                	MOVLW	0x02
002a2a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a2c   f000
002a2e   0e03     movlw	0x3                	MOVLW	0x03
002a30   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a32   f001
002a34   0e04     movlw	0x4                	MOVLW	0x04
002a36   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002a38   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
002a3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a3c   0f04     addlw	0x4                	ADDLW	0x04
002a3e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a40   0e00     movlw	0                  	MOVLW	0x00
002a42   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002a44   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a46   0e00     movlw	0                  	MOVLW	0x00
002a48   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002a4a   6e05     movwf	0x5, 0             	MOVWF	r0x05
002a4c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002a4e   ffe9
002a50   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002a52   fff3
002a54   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a56   ec22     call	0x3244, 0           	CALL	__gptrget2
002a58   f019
002a5a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a5c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a5e   f004
002a60   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002a62   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002a64   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002a66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a72   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a76   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a7a   ec1e     call	0x263c, 0           	CALL	_set_seconds
002a7c   f013
002a7e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a80   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a82   f004
002a84   0e05     movlw	0x5                	MOVLW	0x05
002a86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002a88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a8a   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002a8c   e00a     bz	0x2aa2                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002a8e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a92   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a96   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a9a   eca8     call	0x2950, 0           	CALL	_add_minute
002a9c   f014
002a9e   0e03     movlw	0x3                	MOVLW	0x03
002aa0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002aa2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002aa4   f005
002aa6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002aa8   f004
002aaa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002aac   f003
002aae   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002ab0   f002
002ab2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ab4   f001
002ab6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ab8   f000
002aba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002abc   ffd9
002abe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
00263c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00263e   ffe5
002640   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002642   ffd9
002644   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002646   ffe5
002648   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00264a   ffe5
00264c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00264e   ffe5
002650   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002652   ffe5
002654   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002656   ffe5
002658   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00265a   ffe5
00265c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00265e   ffe5
002660   0e02     movlw	0x2                	MOVLW	0x02
002662   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002664   f000
002666   0e03     movlw	0x3                	MOVLW	0x03
002668   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00266a   f001
00266c   0e04     movlw	0x4                	MOVLW	0x04
00266e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002670   f002
002672   0e05     movlw	0x5                	MOVLW	0x05
002674   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002676   f003
002678   0e06     movlw	0x6                	MOVLW	0x06
00267a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00267c   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
00267e   0e00     movlw	0                  	MOVLW	0x00
002680   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002682   0e3c     movlw	0x3c               	MOVLW	0x3c
002684   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002686   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00268a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00268c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00268e   ecf8     call	0x1ff0, 0           	CALL	__divsint
002690   f00f
002692   6e05     movwf	0x5, 0             	MOVWF	r0x05
002694   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002696   f006
002698   0e04     movlw	0x4                	MOVLW	0x04
00269a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
00269c   0e04     movlw	0x4                	MOVLW	0x04
00269e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0026a0   0e00     movlw	0                  	MOVLW	0x00
0026a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0026a4   0e00     movlw	0                  	MOVLW	0x00
0026a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026a8   0e00     movlw	0                  	MOVLW	0x00
0026aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ac   0e3c     movlw	0x3c               	MOVLW	0x3c
0026ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0026b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b8   ecd7     call	0x23ae, 0           	CALL	__modsint
0026ba   f011
0026bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0026be   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0026c0   f004
0026c2   0e04     movlw	0x4                	MOVLW	0x04
0026c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026c8   ffe5
0026ca   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0026cc   fff4
0026ce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0026d0   ffe9
0026d2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0026d4   fff3
0026d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0026d8   ec76     call	0x32ec, 0           	CALL	__gptrput2
0026da   f019
                                           ;	.line	42; src/newtime.c	return overflow;
0026dc   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0026de   fff3
0026e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0026e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0026e4   f006
0026e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026e8   f005
0026ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026ec   f004
0026ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026f0   f003
0026f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026f4   f002
0026f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026f8   f001
0026fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026fc   f000
0026fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002700   ffd9
002702   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
002704   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002706   ffe5
002708   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00270a   ffd9
00270c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00270e   ffe5
002710   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002712   ffe5
002714   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002716   ffe5
002718   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00271a   ffe5
00271c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00271e   ffe5
002720   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002722   ffe5
002724   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002726   ffe5
002728   0e02     movlw	0x2                	MOVLW	0x02
00272a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00272c   f000
00272e   0e03     movlw	0x3                	MOVLW	0x03
002730   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002732   f001
002734   0e04     movlw	0x4                	MOVLW	0x04
002736   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002738   f002
00273a   0e05     movlw	0x5                	MOVLW	0x05
00273c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00273e   f003
002740   0e06     movlw	0x6                	MOVLW	0x06
002742   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002744   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
002746   0e00     movlw	0                  	MOVLW	0x00
002748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00274a   0e3c     movlw	0x3c               	MOVLW	0x3c
00274c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00274e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002752   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002756   ecf8     call	0x1ff0, 0           	CALL	__divsint
002758   f00f
00275a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00275c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00275e   f006
002760   0e04     movlw	0x4                	MOVLW	0x04
002762   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002764   0e02     movlw	0x2                	MOVLW	0x02
002766   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002768   0e00     movlw	0                  	MOVLW	0x00
00276a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00276c   0e00     movlw	0                  	MOVLW	0x00
00276e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002770   0e00     movlw	0                  	MOVLW	0x00
002772   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002774   0e3c     movlw	0x3c               	MOVLW	0x3c
002776   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002778   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00277a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00277c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00277e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002780   ecd7     call	0x23ae, 0           	CALL	__modsint
002782   f011
002784   6e03     movwf	0x3, 0             	MOVWF	r0x03
002786   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002788   f004
00278a   0e04     movlw	0x4                	MOVLW	0x04
00278c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00278e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002790   ffe5
002792   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002794   fff4
002796   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002798   ffe9
00279a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00279c   fff3
00279e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027a0   ec76     call	0x32ec, 0           	CALL	__gptrput2
0027a2   f019
                                           ;	.line	36; src/newtime.c	return overflow;
0027a4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0027a6   fff3
0027a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0027aa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0027ac   f006
0027ae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0027b0   f005
0027b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027b4   f004
0027b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027b8   f003
0027ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027bc   f002
0027be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027c0   f001
0027c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027c4   f000
0027c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027c8   ffd9
0027ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002894   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002896   ffe5
002898   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00289a   ffd9
00289c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00289e   ffe5
0028a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028a2   ffe5
0028a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028a6   ffe5
0028a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028aa   ffe5
0028ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028ae   ffe5
0028b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0028b2   ffe5
0028b4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0028b6   ffe5
0028b8   0e02     movlw	0x2                	MOVLW	0x02
0028ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0028bc   f000
0028be   0e03     movlw	0x3                	MOVLW	0x03
0028c0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0028c2   f001
0028c4   0e04     movlw	0x4                	MOVLW	0x04
0028c6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0028c8   f002
0028ca   0e05     movlw	0x5                	MOVLW	0x05
0028cc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0028ce   f003
0028d0   0e06     movlw	0x6                	MOVLW	0x06
0028d2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0028d4   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0028d6   0e00     movlw	0                  	MOVLW	0x00
0028d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028da   0e18     movlw	0x18               	MOVLW	0x18
0028dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e6   ecf8     call	0x1ff0, 0           	CALL	__divsint
0028e8   f00f
0028ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028ec   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028ee   f006
0028f0   0e04     movlw	0x4                	MOVLW	0x04
0028f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0028f4   0e00     movlw	0                  	MOVLW	0x00
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   0e18     movlw	0x18               	MOVLW	0x18
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002900   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002904   ecd7     call	0x23ae, 0           	CALL	__modsint
002906   f011
002908   6e03     movwf	0x3, 0             	MOVWF	r0x03
00290a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00290c   f004
00290e   0e04     movlw	0x4                	MOVLW	0x04
002910   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002912   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002914   ffe5
002916   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002918   fff4
00291a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00291c   ffe9
00291e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002920   fff3
002922   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002924   ec76     call	0x32ec, 0           	CALL	__gptrput2
002926   f019
                                           ;	.line	30; src/newtime.c	return overflow;
002928   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00292a   fff3
00292c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00292e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002930   f006
002932   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002934   f005
002936   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002938   f004
00293a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00293c   f003
00293e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002940   f002
002942   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002944   f001
002946   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002948   f000
00294a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00294c   ffd9
00294e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
002492   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002494   ffe5
002496   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002498   ffd9
00249a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00249c   ffe5
00249e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024a0   ffe5
0024a2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024a4   ffe5
0024a6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024a8   ffe5
0024aa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024ac   ffe5
0024ae   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024b0   ffe5
0024b2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024b4   ffe5
0024b6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0024b8   ffe5
0024ba   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0024bc   ffe5
0024be   0e02     movlw	0x2                	MOVLW	0x02
0024c0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024c2   f000
0024c4   0e03     movlw	0x3                	MOVLW	0x03
0024c6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024c8   f001
0024ca   0e04     movlw	0x4                	MOVLW	0x04
0024cc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024ce   f002
0024d0   0e05     movlw	0x5                	MOVLW	0x05
0024d2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024d4   f003
0024d6   0e06     movlw	0x6                	MOVLW	0x06
0024d8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024da   f004
0024dc   0e07     movlw	0x7                	MOVLW	0x07
0024de   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0024e0   f005
0024e2   0e08     movlw	0x8                	MOVLW	0x08
0024e4   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0024e6   f006
0024e8   0e09     movlw	0x9                	MOVLW	0x09
0024ea   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0024ec   f007
0024ee   0e0a     movlw	0xa                	MOVLW	0x0a
0024f0   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0024f2   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0024f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002500   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002502   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002504   5000     movf	0, 0, 0             	MOVF	r0x00, W
002506   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002508   ec4a     call	0x2894, 0           	CALL	_set_hours
00250a   f014
00250c   0e05     movlw	0x5                	MOVLW	0x05
00250e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
002510   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002512   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002514   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002516   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002518   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00251a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00251e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002520   5000     movf	0, 0, 0             	MOVF	r0x00, W
002522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002524   ec82     call	0x2704, 0           	CALL	_set_minutes
002526   f013
002528   0e05     movlw	0x5                	MOVLW	0x05
00252a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
00252c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00252e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002530   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002534   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002538   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00253a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00253c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00253e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002540   ec1e     call	0x263c, 0           	CALL	_set_seconds
002542   f013
002544   0e05     movlw	0x5                	MOVLW	0x05
002546   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002548   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00254a   f008
00254c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00254e   f007
002550   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002552   f006
002554   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002556   f005
002558   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00255a   f004
00255c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00255e   f003
002560   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002562   f002
002564   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002566   f001
002568   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00256a   f000
00256c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00256e   ffd9
002570   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002df6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002df8   ffe5
002dfa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002dfc   ffd9
002dfe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e00   ffe5
002e02   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e04   ffe5
002e06   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e08   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002e0a   0e06     movlw	0x6                	MOVLW	0x06
002e0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e0e   ec6e     call	0x14dc, 0           	CALL	_malloc
002e10   f00a
002e12   6e00     movwf	0, 0               	MOVWF	r0x00
002e14   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002e16   f001
002e18   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002e1a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e1c   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e20   6e00     movwf	0, 0               	MOVWF	r0x00
002e22   0e80     movlw	0x80               	MOVLW	0x80
002e24   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002e26   0e00     movlw	0                  	MOVLW	0x00
002e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e2a   0e00     movlw	0                  	MOVLW	0x00
002e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e2e   0e00     movlw	0                  	MOVLW	0x00
002e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e32   0e00     movlw	0                  	MOVLW	0x00
002e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e36   0e00     movlw	0                  	MOVLW	0x00
002e38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e3a   0e00     movlw	0                  	MOVLW	0x00
002e3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e3e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e46   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4a   ec49     call	0x2492, 0           	CALL	_time_set
002e4c   f012
002e4e   0e09     movlw	0x9                	MOVLW	0x09
002e50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002e52   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002e54   fff4
002e56   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e58   fff3
002e5a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e5c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e5e   f002
002e60   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e62   f001
002e64   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e66   f000
002e68   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e6a   ffd9
002e6c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002e6e   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002e70   6432     cpfsgt	0x32, 0           
002e72   253a     addwf	0x3a, 0, 0x1       
002e74   3230     rrcf	0x30, 0x1, 0        
002e76   3a64     swapf	0x64, 0x1, 0       
002e78   3025     rrcf	0x25, 0, 0          
002e7a   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002e7c   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
