gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2013  14:00:43
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Sat Nov 16 14:00:42 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _config_mode_clock
                                           	global _update_display
                                           	global _toggle_led
                                           	global _init_config
                                           	global _display_config_mode
                                           	global _init_time
                                           	global _read_and_clear
                                           	global _get_input
                                           	global _display_string
                                           	global _to_double_digits
                                           	global _init
                                           	global __time
                                           	global __alarm
                                           	global _display_line
                                           	global _alarm_going_off
                                           	global _alarm_counter
                                           	global _overflow_counter
                                           	global _but1_pressed
                                           	global _but2_pressed
                                           	global _config_mode_on
                                           	global _config_called
                                           	global _main
                                           	global _alarm_led
                                           	global _highPriorityInterruptHandler
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _LCDErase
                                           	extern _time_create
                                           	extern _time_set
                                           	extern _add_second
                                           	extern _time_print
                                           	extern _time_equals
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _alarm_going_off	db	0x00, 0x00
                                           _alarm_counter	db	0x00, 0x00
                                           _overflow_counter	db	0x00, 0x00
                                           _but1_pressed	db	0x00, 0x00
                                           _but2_pressed	db	0x00, 0x00
                                           _config_mode_on	db	0x00, 0x00
                                           _config_mode_clock	db	0x01, 0x00
                                           _config_called	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_clock_0	udata
                                           __time	res	3
                                           
                                           udata_clock_1	udata
                                           __alarm	res	3
                                           
                                           udata_clock_2	udata
                                           _display_line	res	32
                                           
                                           udata_clock_3	udata
                                           _to_double_digits_buffer_1_1	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_highPriorityInterruptHandler	code	0X000008
                                           ivec_0x1_highPriorityInterruptHandler:
000008   ef8c     goto	0x1318              	GOTO	_highPriorityInterruptHandler
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	72; src/clock.c	_time = time_create();
003100   ecf1     call	0x2de2, 0           	CALL	_time_create
003102   f016
003104   010e     movlb	0xe                	BANKSEL	__time
003106   6f40     movwf	0x40, 0x1          	MOVWF	__time, B
003108   cff3     movff	0xff3, 0xe41       	MOVFF	PRODL, (__time + 1)
00310a   fe41
00310c   cff4     movff	0xff4, 0xe42       	MOVFF	PRODH, (__time + 2)
00310e   fe42
                                           ;	.line	73; src/clock.c	_alarm = time_create();
003110   ecf1     call	0x2de2, 0           	CALL	_time_create
003112   f016
003114   010e     movlb	0xe                	BANKSEL	__alarm
003116   6f43     movwf	0x43, 0x1          	MOVWF	__alarm, B
003118   cff3     movff	0xff3, 0xe44       	MOVFF	PRODL, (__alarm + 1)
00311a   fe44
00311c   cff4     movff	0xff4, 0xe45       	MOVFF	PRODH, (__alarm + 2)
00311e   fe45
                                           ;	.line	75; src/clock.c	init();
003120   ecc4     call	0x3188, 0           	CALL	_init
003122   f018
                                           ;	.line	76; src/clock.c	init_config();
003124   ec56     call	0xaac, 0            	CALL	_init_config
003126   f005
                                           ;	.line	78; src/clock.c	T0CONbits.TMR0ON = 1;
003128   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	79; src/clock.c	update_display();
00312a   ece1     call	0x21c2, 0           	CALL	_update_display
00312c   f010
                                           _00108_DS_:
00312e   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	81; src/clock.c	if(config_called){
003130   514f     movf	0x4f, 0, 0x1        	MOVF	_config_called, W, B
003132   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
003134   1150     iorwf	0x50, 0, 0x1       	IORWF	(_config_called + 1), W, B
003136   e0fb     bz	0x312e                	BZ	_00108_DS_
003138   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	82; src/clock.c	config_called =0;
00313a   6b4f     clrf	0x4f, 0x1           	CLRF	_config_called, B
00313c   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
00313e   6b50     clrf	0x50, 0x1           	CLRF	(_config_called + 1), B
                                           ;	.line	83; src/clock.c	init_config();
003140   ec56     call	0xaac, 0            	CALL	_init_config
003142   f005
003144   d7f4     bra	0x312e               	BRA	_00108_DS_
                                           ;	.line	86; src/clock.c	return 0;
003146   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init	code
                                           _init:
                                           ;	.line	264; src/clock.c	void init(void){
003188   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00318a   ffe5
00318c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00318e   ffd9
                                           ;	.line	266; src/clock.c	LCDInit();
003190   ec87     call	0xd0e, 0            	CALL	_LCDInit
003192   f006
                                           ;	.line	269; src/clock.c	BUTTON0_TRIS = 1;
003194   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	270; src/clock.c	BUTTON1_TRIS = 1;
003196   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	273; src/clock.c	INTCONbits.GIE = 1;
003198   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	274; src/clock.c	INTCONbits.PEIE = 1;
00319a   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	275; src/clock.c	RCONbits.IPEN = 1; 
00319c   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	278; src/clock.c	T0CONbits.TMR0ON = 0;
00319e   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	281; src/clock.c	TMR0H = 0x00000000;
0031a0   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	282; src/clock.c	TMR0L = 0x00000000;
0031a2   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	285; src/clock.c	T0CONbits.T08BIT = 0;
0031a4   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	288; src/clock.c	T0CONbits.T0CS = 0;
0031a6   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	291; src/clock.c	T0CONbits.PSA = 1;
0031a8   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	294; src/clock.c	INTCONbits.TMR0IE = 1;
0031aa   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	297; src/clock.c	INTCON3bits.INT1IE = 1;
0031ac   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	298; src/clock.c	INTCON3bits.INT3IE = 1;
0031ae   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	301; src/clock.c	LED0_TRIS = 0;
0031b0   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	302; src/clock.c	LED1_TRIS = 0;   
0031b2   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	303; src/clock.c	LED2_TRIS = 0;
0031b4   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	304; src/clock.c	LED3_TRIS = 0;
0031b6   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	307; src/clock.c	LED0_IO = 0; 
0031b8   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	308; src/clock.c	LED1_IO = 0;
0031ba   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	309; src/clock.c	LED2_IO = 0;
0031bc   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	310; src/clock.c	LED3_IO = 1;
0031be   8a86     bsf	0x86, 0x5, 0         	BSF	_PORTGbits, 5
0031c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0031c2   ffd9
0031c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__highPriorityInterruptHandler	code
                                           _highPriorityInterruptHandler:
                                           ;	.line	220; src/clock.c	void highPriorityInterruptHandler (void) __interrupt(1){
001318   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00131a   ffe5
00131c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00131e   ffe5
001320   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001322   ffe5
001324   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001326   ffe5
001328   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00132a   ffe5
00132c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00132e   ffe5
001330   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001332   ffe5
001334   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001336   ffe5
001338   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00133a   ffe5
00133c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00133e   ffe5
001340   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001342   ffd9
001344   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001346   ffe5
001348   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00134a   ffe5
                                           ;	.line	221; src/clock.c	if(INTCON3bits.INT1F == 1){
00134c   6a00     clrf	0, 0                	CLRF	r0x00
00134e   b0f0     btfsc	0xf0, 0, 0         	BTFSC	_INTCON3bits, 0
001350   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001352   5000     movf	0, 0, 0             	MOVF	r0x00, W
001354   0a01     xorlw	0x1                	XORLW	0x01
001356   e114     bnz	0x1380               	BNZ	_00229_DS_
                                           _00262_DS_:
001358   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	222; src/clock.c	if(!config_mode_on){
00135a   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
00135c   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
00135e   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001360   e106     bnz	0x136e               	BNZ	_00226_DS_
                                           ;	.line	223; src/clock.c	config_called =1;	
001362   0e01     movlw	0x1                	MOVLW	0x01
001364   010f     movlb	0xf                	BANKSEL	_config_called
001366   6f4f     movwf	0x4f, 0x1          	MOVWF	_config_called, B
001368   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
00136a   6b50     clrf	0x50, 0x1           	CLRF	(_config_called + 1), B
00136c   d005     bra	0x1378               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	225; src/clock.c	but2_pressed = 1;	
00136e   0e01     movlw	0x1                	MOVLW	0x01
001370   010f     movlb	0xf                	BANKSEL	_but2_pressed
001372   6f49     movwf	0x49, 0x1          	MOVWF	_but2_pressed, B
001374   010f     movlb	0xf                	BANKSEL	(_but2_pressed + 1)
001376   6b4a     clrf	0x4a, 0x1           	CLRF	(_but2_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           _00227_DS_:
                                           ;	.line	227; src/clock.c	if(BUTTON0_IO);
001378   6ae8     clrf	0xe8, 0             	CLRF	WREG
00137a   b681     btfsc	0x81, 0x3, 0       	BTFSC	_PORTBbits, 3
00137c   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	228; src/clock.c	INTCON3bits.INT1F = 0; 
00137e   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00229_DS_:
                                           ;	.line	231; src/clock.c	if(INTCON3bits.INT3F  == 1){
001380   6a00     clrf	0, 0                	CLRF	r0x00
001382   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
001384   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001386   5000     movf	0, 0, 0             	MOVF	r0x00, W
001388   0a01     xorlw	0x1                	XORLW	0x01
00138a   e109     bnz	0x139e               	BNZ	_00231_DS_
                                           ;	.line	232; src/clock.c	but1_pressed = 1;	
00138c   0e01     movlw	0x1                	MOVLW	0x01
00138e   010f     movlb	0xf                	BANKSEL	_but1_pressed
001390   6f47     movwf	0x47, 0x1          	MOVWF	_but1_pressed, B
001392   010f     movlb	0xf                	BANKSEL	(_but1_pressed + 1)
001394   6b48     clrf	0x48, 0x1           	CLRF	(_but1_pressed + 1), B
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	233; src/clock.c	if(BUTTON1_IO);
001396   6ae8     clrf	0xe8, 0             	CLRF	WREG
001398   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
00139a   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ;	.line	234; src/clock.c	INTCON3bits.INT3F = 0; 
00139c   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00231_DS_:
                                           ;	.line	236; src/clock.c	if(INTCONbits.TMR0IF == 1) {
00139e   6a00     clrf	0, 0                	CLRF	r0x00
0013a0   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
0013a2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0013a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013a6   0a01     xorlw	0x1                	XORLW	0x01
0013a8   e001     bz	0x13ac                	BZ	_00266_DS_
0013aa   d075     bra	0x1496               	BRA	_00248_DS_
                                           _00266_DS_:
0013ac   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	237; src/clock.c	overflow_counter++;
0013ae   2b45     incf	0x45, 0x1, 0x1      	INCF	_overflow_counter, F, B
0013b0   e302     bnc	0x13b6               	BNC	_10277_DS_
0013b2   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013b4   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflow_counter + 1), F, B
                                           _10277_DS_:
0013b6   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	238; src/clock.c	if(overflow_counter == CYCLES/2){
0013b8   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
0013ba   0a2e     xorlw	0x2e               	XORLW	0x2e
0013bc   e103     bnz	0x13c4               	BNZ	_00267_DS_
0013be   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013c0   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013c2   e001     bz	0x13c6                	BZ	_00268_DS_
                                           _00267_DS_:
0013c4   d003     bra	0x13cc               	BRA	_00244_DS_
                                           _00268_DS_:
                                           ;	.line	239; src/clock.c	toggle_led();
0013c6   ecfe     call	0x31fc, 0           	CALL	_toggle_led
0013c8   f018
0013ca   d064     bra	0x1494               	BRA	_00245_DS_
                                           _00244_DS_:
0013cc   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	240; src/clock.c	}else if(overflow_counter == CYCLES){
0013ce   5145     movf	0x45, 0, 0x1        	MOVF	_overflow_counter, W, B
0013d0   0a5d     xorlw	0x5d               	XORLW	0x5d
0013d2   e103     bnz	0x13da               	BNZ	_00269_DS_
0013d4   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
0013d6   5146     movf	0x46, 0, 0x1        	MOVF	(_overflow_counter + 1), W, B
0013d8   e001     bz	0x13dc                	BZ	_00270_DS_
                                           _00269_DS_:
0013da   d05c     bra	0x1494               	BRA	_00245_DS_
                                           _00270_DS_:
0013dc   010e     movlb	0xe                	BANKSEL	(__time + 2)
                                           ;	.line	241; src/clock.c	if(time_equals(_alarm,_time)){
0013de   5142     movf	0x42, 0, 0x1        	MOVF	(__time + 2), W, B
0013e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e2   010e     movlb	0xe                	BANKSEL	(__time + 1)
0013e4   5141     movf	0x41, 0, 0x1        	MOVF	(__time + 1), W, B
0013e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e8   010e     movlb	0xe                	BANKSEL	__time
0013ea   5140     movf	0x40, 0, 0x1        	MOVF	__time, W, B
0013ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ee   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
0013f0   5145     movf	0x45, 0, 0x1        	MOVF	(__alarm + 2), W, B
0013f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f4   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
0013f6   5144     movf	0x44, 0, 0x1        	MOVF	(__alarm + 1), W, B
0013f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fa   010e     movlb	0xe                	BANKSEL	__alarm
0013fc   5143     movf	0x43, 0, 0x1        	MOVF	__alarm, W, B
0013fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001400   ec27     call	0x164e, 0           	CALL	_time_equals
001402   f00b
001404   6e00     movwf	0, 0               	MOVWF	r0x00
001406   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001408   f001
00140a   0e06     movlw	0x6                	MOVLW	0x06
00140c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00140e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001410   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001412   e005     bz	0x141e                	BZ	_00233_DS_
                                           ;	.line	242; src/clock.c	alarm_going_off = 1;
001414   0e01     movlw	0x1                	MOVLW	0x01
001416   010f     movlb	0xf                	BANKSEL	_alarm_going_off
001418   6f41     movwf	0x41, 0x1          	MOVWF	_alarm_going_off, B
00141a   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
00141c   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
                                           _00233_DS_:
00141e   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	244; src/clock.c	if(alarm_going_off){
001420   5141     movf	0x41, 0, 0x1        	MOVF	_alarm_going_off, W, B
001422   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
001424   1142     iorwf	0x42, 0, 0x1       	IORWF	(_alarm_going_off + 1), W, B
001426   e017     bz	0x1456                	BZ	_00237_DS_
001428   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	245; src/clock.c	alarm_counter++;
00142a   2b43     incf	0x43, 0x1, 0x1      	INCF	_alarm_counter, F, B
00142c   e302     bnc	0x1432               	BNC	_20278_DS_
00142e   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001430   2b44     incf	0x44, 0x1, 0x1      	INCF	(_alarm_counter + 1), F, B
                                           _20278_DS_:
                                           ;	.line	246; src/clock.c	alarm_led();
001432   ec5a     call	0x30b4, 0           	CALL	_alarm_led
001434   f018
001436   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	247; src/clock.c	if(alarm_counter==30){
001438   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_counter, W, B
00143a   0a1e     xorlw	0x1e               	XORLW	0x1e
00143c   e103     bnz	0x1444               	BNZ	_00271_DS_
00143e   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001440   5144     movf	0x44, 0, 0x1        	MOVF	(_alarm_counter + 1), W, B
001442   e001     bz	0x1446                	BZ	_00272_DS_
                                           _00271_DS_:
001444   d008     bra	0x1456               	BRA	_00237_DS_
                                           _00272_DS_:
001446   010f     movlb	0xf                	BANKSEL	_alarm_going_off
                                           ;	.line	248; src/clock.c	alarm_going_off =0;
001448   6b41     clrf	0x41, 0x1           	CLRF	_alarm_going_off, B
00144a   010f     movlb	0xf                	BANKSEL	(_alarm_going_off + 1)
00144c   6b42     clrf	0x42, 0x1           	CLRF	(_alarm_going_off + 1), B
00144e   010f     movlb	0xf                	BANKSEL	_alarm_counter
                                           ;	.line	249; src/clock.c	alarm_counter = 0;
001450   6b43     clrf	0x43, 0x1           	CLRF	_alarm_counter, B
001452   010f     movlb	0xf                	BANKSEL	(_alarm_counter + 1)
001454   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_counter + 1), B
                                           _00237_DS_:
001456   010f     movlb	0xf                	BANKSEL	_overflow_counter
                                           ;	.line	252; src/clock.c	overflow_counter = 0;
001458   6b45     clrf	0x45, 0x1           	CLRF	_overflow_counter, B
00145a   010f     movlb	0xf                	BANKSEL	(_overflow_counter + 1)
00145c   6b46     clrf	0x46, 0x1           	CLRF	(_overflow_counter + 1), B
                                           ;	.line	253; src/clock.c	toggle_led();
00145e   ecfe     call	0x31fc, 0           	CALL	_toggle_led
001460   f018
001462   010e     movlb	0xe                	BANKSEL	(__time + 2)
                                           ;	.line	254; src/clock.c	add_second(_time);
001464   5142     movf	0x42, 0, 0x1        	MOVF	(__time + 2), W, B
001466   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001468   010e     movlb	0xe                	BANKSEL	(__time + 1)
00146a   5141     movf	0x41, 0, 0x1        	MOVF	(__time + 1), W, B
00146c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00146e   010e     movlb	0xe                	BANKSEL	__time
001470   5140     movf	0x40, 0, 0x1        	MOVF	__time, W, B
001472   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001474   ecfa     call	0x29f4, 0           	CALL	_add_second
001476   f014
001478   0e03     movlw	0x3                	MOVLW	0x03
00147a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00147c   010f     movlb	0xf                	BANKSEL	_config_called
                                           ;	.line	255; src/clock.c	if(!config_called && !config_mode_on){
00147e   514f     movf	0x4f, 0, 0x1        	MOVF	_config_called, W, B
001480   010f     movlb	0xf                	BANKSEL	(_config_called + 1)
001482   1150     iorwf	0x50, 0, 0x1       	IORWF	(_config_called + 1), W, B
001484   e107     bnz	0x1494               	BNZ	_00245_DS_
001486   010f     movlb	0xf                	BANKSEL	_config_mode_on
001488   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
00148a   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
00148c   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
00148e   e102     bnz	0x1494               	BNZ	_00245_DS_
                                           ;	.line	256; src/clock.c	update_display();
001490   ece1     call	0x21c2, 0           	CALL	_update_display
001492   f010
                                           _00245_DS_:
                                           ;	.line	259; src/clock.c	INTCONbits.TMR0IF = 0;
001494   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00248_DS_:
001496   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001498   f001
00149a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00149c   f000
00149e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014a0   ffd9
0014a2   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0014a4   fffb
0014a6   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0014a8   fffa
0014aa   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0014ac   ffea
0014ae   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0014b0   ffe9
0014b2   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0014b4   fff4
0014b6   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0014b8   fff3
0014ba   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0014bc   ffe0
0014be   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0014c0   ffd8
0014c2   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0014c4   ffe8
0014c6   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__to_double_digits	code
                                           _to_double_digits:
                                           ;	.line	214; src/clock.c	char* to_double_digits(int value){
002d56   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d58   ffe5
002d5a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d5c   ffd9
002d5e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d60   ffe5
002d62   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d64   ffe5
002d66   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d68   ffe5
002d6a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002d6c   ffe5
002d6e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002d70   ffe5
002d72   0e02     movlw	0x2                	MOVLW	0x02
002d74   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d76   f000
002d78   0e03     movlw	0x3                	MOVLW	0x03
002d7a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d7c   f001
                                           ;	.line	216; src/clock.c	sprintf(buffer, "%02d", value);
002d7e   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002d80   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d82   0e46     movlw	0x46               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002d84   6e02     movwf	0x2, 0             	MOVWF	r0x02
002d86   0e80     movlw	0x80               	MOVLW	0x80
002d88   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d8a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d92   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
002d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d96   0e22     movlw	0x22               	MOVLW	HIGH(__str_9)
002d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9a   0eaa     movlw	0xaa               	MOVLW	LOW(__str_9)
002d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002daa   ec58     call	0x22b0, 0           	CALL	_sprintf
002dac   f011
002dae   0e08     movlw	0x8                	MOVLW	0x08
002db0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; src/clock.c	return buffer;
002db2   0e0e     movlw	0xe                	MOVLW	HIGH(_to_double_digits_buffer_1_1)
002db4   6e01     movwf	0x1, 0             	MOVWF	r0x01
002db6   0e46     movlw	0x46               	MOVLW	LOW(_to_double_digits_buffer_1_1)
002db8   6e00     movwf	0, 0               	MOVWF	r0x00
002dba   0e80     movlw	0x80               	MOVLW	0x80
002dbc   6e02     movwf	0x2, 0             	MOVWF	r0x02
002dbe   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002dc0   fff4
002dc2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002dc4   fff3
002dc6   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dc8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dca   f004
002dcc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002dce   f003
002dd0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002dd2   f002
002dd4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002dd6   f001
002dd8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dda   f000
002ddc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dde   ffd9
002de0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_string	code
                                           _display_string:
                                           ;	.line	203; src/clock.c	void display_string(BYTE pos, char* text){
001dce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001dd0   ffe5
001dd2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001dd4   ffd9
001dd6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001dd8   ffe5
001dda   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ddc   ffe5
001dde   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001de0   ffe5
001de2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001de4   ffe5
001de6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001de8   ffe5
001dea   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001dec   ffe5
001dee   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001df0   ffe5
001df2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001df4   ffe5
001df6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001df8   ffe5
001dfa   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001dfc   ffe5
001dfe   0e02     movlw	0x2                	MOVLW	0x02
001e00   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001e02   f000
001e04   0e03     movlw	0x3                	MOVLW	0x03
001e06   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001e08   f001
001e0a   0e04     movlw	0x4                	MOVLW	0x04
001e0c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001e0e   f002
001e10   0e05     movlw	0x5                	MOVLW	0x05
001e12   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001e14   f003
                                           ;	.line	204; src/clock.c	BYTE        l = strlen(text);
001e16   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e1e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e22   ec76     call	0x2eec, 0           	CALL	_strlen
001e24   f017
001e26   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e28   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001e2a   f005
001e2c   0e03     movlw	0x3                	MOVLW	0x03
001e2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	205; src/clock.c	BYTE      max = 32-pos;    
001e30   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e32   0820     sublw	0x20               	SUBLW	0x20
001e34   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	206; src/clock.c	char       *d = (char*)&LCDText[pos];
001e36   6a06     clrf	0x6, 0              	CLRF	r0x06
001e38   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e3a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e3c   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e3e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001e40   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001e42   6e06     movwf	0x6, 0             	MOVWF	r0x06
001e44   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e46   6e00     movwf	0, 0               	MOVWF	r0x00
001e48   0e80     movlw	0x80               	MOVLW	0x80
001e4a   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	208; src/clock.c	size_t      n = (l<max)?l:max;
001e4c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e4e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001e50   e302     bnc	0x1e56               	BNC	_00210_DS_
001e52   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001e54   f004
                                           _00210_DS_:
001e56   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	209; src/clock.c	if (n != 0)
001e58   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e5a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001e5c   e027     bz	0x1eac                	BZ	_00206_DS_
                                           _00202_DS_:
                                           ;	.line	210; src/clock.c	while (n-- != 0)*d++ = *s++;
001e5e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001e60   f008
001e62   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
001e64   f009
001e66   0eff     movlw	0xff               	MOVLW	0xff
001e68   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001e6a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e6c   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001e6e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001e70   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
001e72   e01c     bz	0x1eac                	BZ	_00206_DS_
001e74   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001e76   ffe9
001e78   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001e7a   fff3
001e7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e7e   ec42     call	0x3284, 0           	CALL	__gptrget1
001e80   f019
001e82   6e08     movwf	0x8, 0             	MOVWF	r0x08
001e84   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e88   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001e8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e8c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001e8e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e90   ffe5
001e92   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e94   ffe9
001e96   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001e98   fff3
001e9a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001e9c   ec79     call	0x32f2, 0           	CALL	__gptrput1
001e9e   f019
001ea0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001ea2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ea4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001ea6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001ea8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001eaa   d7d9     bra	0x1e5e               	BRA	_00202_DS_
                                           _00206_DS_:
                                           ;	.line	211; src/clock.c	LCDUpdate();
001eac   ec21     call	0x842, 0            	CALL	_LCDUpdate
001eae   f004
001eb0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001eb2   f009
001eb4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001eb6   f008
001eb8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001eba   f007
001ebc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ebe   f006
001ec0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ec2   f005
001ec4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ec6   f004
001ec8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001eca   f003
001ecc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ece   f002
001ed0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ed2   f001
001ed4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ed6   f000
001ed8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001eda   ffd9
001edc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__get_input	code
                                           _get_input:
                                           ;	.line	179; src/clock.c	int get_input(int maxvalue, char *text, char *mode){
000f6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f6c   ffe5
000f6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f70   ffd9
000f72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f74   ffe5
000f76   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f78   ffe5
000f7a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f7c   ffe5
000f7e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f80   ffe5
000f82   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f84   ffe5
000f86   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f88   ffe5
000f8a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000f8c   ffe5
000f8e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000f90   ffe5
000f92   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000f94   ffe5
000f96   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000f98   ffe5
000f9a   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000f9c   ffe5
000f9e   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000fa0   ffe5
000fa2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000fa4   ffe5
000fa6   0e02     movlw	0x2                	MOVLW	0x02
000fa8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000faa   f000
000fac   0e03     movlw	0x3                	MOVLW	0x03
000fae   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000fb0   f001
000fb2   0e04     movlw	0x4                	MOVLW	0x04
000fb4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000fb6   f002
000fb8   0e05     movlw	0x5                	MOVLW	0x05
000fba   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000fbc   f003
000fbe   0e06     movlw	0x6                	MOVLW	0x06
000fc0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000fc2   f004
000fc4   0e07     movlw	0x7                	MOVLW	0x07
000fc6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000fc8   f005
000fca   0e08     movlw	0x8                	MOVLW	0x08
000fcc   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000fce   f006
000fd0   0e09     movlw	0x9                	MOVLW	0x09
000fd2   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000fd4   f007
                                           ;	.line	180; src/clock.c	BYTE length = strlen(text);
000fd6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fda   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000fdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fe0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe2   ec76     call	0x2eec, 0           	CALL	_strlen
000fe4   f017
000fe6   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fe8   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000fea   f009
000fec   0e03     movlw	0x3                	MOVLW	0x03
000fee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	181; src/clock.c	int value = 0;
000ff0   6a09     clrf	0x9, 0              	CLRF	r0x09
000ff2   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	182; src/clock.c	display_string(START_FIRST_LINE , mode);
000ff4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ffe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001000   0e00     movlw	0                  	MOVLW	0x00
001002   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001004   ece7     call	0x1dce, 0           	CALL	_display_string
001006   f00e
001008   0e04     movlw	0x4                	MOVLW	0x04
00100a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	183; src/clock.c	display_string(START_SECOND_LINE, text);
00100c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   0e10     movlw	0x10               	MOVLW	0x10
00101a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101c   ece7     call	0x1dce, 0           	CALL	_display_string
00101e   f00e
001020   0e04     movlw	0x4                	MOVLW	0x04
001022   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	184; src/clock.c	while(1)
001024   0e11     movlw	0x11               	MOVLW	0x11
001026   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
001028   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00195_DS_:
00102a   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	187; src/clock.c	if(config_mode_on){
00102c   514b     movf	0x4b, 0, 0x1        	MOVF	_config_mode_on, W, B
00102e   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
001030   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_config_mode_on + 1), W, B
001032   e0fb     bz	0x102a                	BZ	_00195_DS_
                                           ;	.line	188; src/clock.c	DelayMs(10);
001034   0e68     movlw	0x68               	MOVLW	0x68
001036   6e03     movwf	0x3, 0             	MOVWF	r0x03
001038   0e42     movlw	0x42               	MOVLW	0x42
00103a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00103c   6a05     clrf	0x5, 0              	CLRF	r0x05
00103e   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00182_DS_:
001040   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001042   f007
001044   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001046   f008
001048   c005     movff	0x5, 0xb           	MOVFF	r0x05, r0x0b
00104a   f00b
00104c   c006     movff	0x6, 0xc           	MOVFF	r0x06, r0x0c
00104e   f00c
001050   0eff     movlw	0xff               	MOVLW	0xff
001052   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001054   0eff     movlw	0xff               	MOVLW	0xff
001056   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001058   0eff     movlw	0xff               	MOVLW	0xff
00105a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00105c   0eff     movlw	0xff               	MOVLW	0xff
00105e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001060   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001062   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001064   100b     iorwf	0xb, 0, 0          	IORWF	r0x0b, W
001066   100c     iorwf	0xc, 0, 0          	IORWF	r0x0c, W
001068   e1eb     bnz	0x1040               	BNZ	_00182_DS_
                                           ;	.line	189; src/clock.c	if(read_and_clear(&but2_pressed)){
00106a   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
00106c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00106e   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
001070   6e03     movwf	0x3, 0             	MOVWF	r0x03
001072   0e80     movlw	0x80               	MOVLW	0x80
001074   6e05     movwf	0x5, 0             	MOVWF	r0x05
001076   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001078   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00107c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001082   ec35     call	0x2e6a, 0           	CALL	_read_and_clear
001084   f017
001086   6e03     movwf	0x3, 0             	MOVWF	r0x03
001088   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00108a   f004
00108c   0e03     movlw	0x3                	MOVLW	0x03
00108e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001090   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001092   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
001094   e006     bz	0x10a2                	BZ	_00189_DS_
                                           ;	.line	190; src/clock.c	LCDErase();
001096   ecb2     call	0x2b64, 0           	CALL	_LCDErase
001098   f015
                                           ;	.line	191; src/clock.c	return value;
00109a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
00109c   fff3
00109e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010a0   d042     bra	0x1126               	BRA	_00197_DS_
                                           _00189_DS_:
                                           ;	.line	193; src/clock.c	if(read_and_clear(&but1_pressed)){ 
0010a2   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
0010a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010a6   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
0010a8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010aa   0e80     movlw	0x80               	MOVLW	0x80
0010ac   6e05     movwf	0x5, 0             	MOVWF	r0x05
0010ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ba   ec35     call	0x2e6a, 0           	CALL	_read_and_clear
0010bc   f017
0010be   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010c0   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0010c2   f004
0010c4   0e03     movlw	0x3                	MOVLW	0x03
0010c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010ca   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0010cc   e012     bz	0x10f2                	BZ	_00191_DS_
                                           ;	.line	194; src/clock.c	value = (++value)%maxvalue;
0010ce   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0010d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010d2   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0010d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010dc   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e4   eccd     call	0x239a, 0           	CALL	__modsint
0010e6   f011
0010e8   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010ea   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
0010ec   f00a
0010ee   0e04     movlw	0x4                	MOVLW	0x04
0010f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00191_DS_:
                                           ;	.line	196; src/clock.c	display_string(START_SECOND_LINE + length + 1, to_double_digits(value));
0010f2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010fa   ecab     call	0x2d56, 0           	CALL	_to_double_digits
0010fc   f016
0010fe   6e03     movwf	0x3, 0             	MOVWF	r0x03
001100   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001102   f004
001104   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
001106   f005
001108   0e02     movlw	0x2                	MOVLW	0x02
00110a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00110c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00110e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001110   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001114   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001118   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00111a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111c   ece7     call	0x1dce, 0           	CALL	_display_string
00111e   f00e
001120   0e04     movlw	0x4                	MOVLW	0x04
001122   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001124   d782     bra	0x102a               	BRA	_00195_DS_
                                           _00197_DS_:
001126   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001128   f00c
00112a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00112c   f00b
00112e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001130   f00a
001132   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001134   f009
001136   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001138   f008
00113a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00113c   f007
00113e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001140   f006
001142   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001144   f005
001146   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001148   f004
00114a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00114c   f003
00114e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001150   f002
001152   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001154   f001
001156   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001158   f000
00115a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00115c   ffd9
00115e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__read_and_clear	code
                                           _read_and_clear:
                                           ;	.line	172; src/clock.c	int read_and_clear(int *variable){
002e6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002e6c   ffe5
002e6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002e70   ffd9
002e72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e74   ffe5
002e76   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e78   ffe5
002e7a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e7c   ffe5
002e7e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e80   ffe5
002e82   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e84   ffe5
002e86   0e02     movlw	0x2                	MOVLW	0x02
002e88   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002e8a   f000
002e8c   0e03     movlw	0x3                	MOVLW	0x03
002e8e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002e90   f001
002e92   0e04     movlw	0x4                	MOVLW	0x04
002e94   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002e96   f002
                                           ;	.line	173; src/clock.c	if(*variable){
002e98   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002e9a   ffe9
002e9c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e9e   fff3
002ea0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ea2   ec2c     call	0x3258, 0           	CALL	__gptrget2
002ea4   f019
002ea6   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ea8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002eaa   f004
002eac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002eae   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002eb0   e00e     bz	0x2ece                	BZ	_00176_DS_
                                           ;	.line	174; src/clock.c	*variable = 0;
002eb2   0e00     movlw	0                  	MOVLW	0x00
002eb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eb6   0e00     movlw	0                  	MOVLW	0x00
002eb8   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002eba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ebc   ffe9
002ebe   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002ec0   fff3
002ec2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ec4   ec6d     call	0x32da, 0           	CALL	__gptrput2
002ec6   f019
                                           ;	.line	175; src/clock.c	return 1;
002ec8   6af3     clrf	0xf3, 0             	CLRF	PRODL
002eca   0e01     movlw	0x1                	MOVLW	0x01
002ecc   d002     bra	0x2ed2               	BRA	_00177_DS_
                                           _00176_DS_:
                                           ;	.line	177; src/clock.c	return 0;
002ece   6af3     clrf	0xf3, 0             	CLRF	PRODL
002ed0   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00177_DS_:
002ed2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002ed4   f004
002ed6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002ed8   f003
002eda   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002edc   f002
002ede   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002ee0   f001
002ee2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002ee4   f000
002ee6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002ee8   ffd9
002eea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_time	code
                                           _init_time:
                                           ;	.line	164; src/clock.c	void init_time(time t, char *mode){ 
001936   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001938   ffe5
00193a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00193c   ffd9
00193e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001940   ffe5
001942   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001944   ffe5
001946   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001948   ffe5
00194a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00194c   ffe5
00194e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001950   ffe5
001952   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001954   ffe5
001956   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001958   ffe5
00195a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00195c   ffe5
00195e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001960   ffe5
001962   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001964   ffe5
001966   0e02     movlw	0x2                	MOVLW	0x02
001968   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00196a   f000
00196c   0e03     movlw	0x3                	MOVLW	0x03
00196e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001970   f001
001972   0e04     movlw	0x4                	MOVLW	0x04
001974   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001976   f002
001978   0e05     movlw	0x5                	MOVLW	0x05
00197a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00197c   f003
00197e   0e06     movlw	0x6                	MOVLW	0x06
001980   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001982   f004
001984   0e07     movlw	0x7                	MOVLW	0x07
001986   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001988   f005
                                           ;	.line	166; src/clock.c	h = get_input(24, "Hours:", mode);
00198a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00198c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00198e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001990   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001992   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001994   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001996   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
001998   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199a   0e22     movlw	0x22               	MOVLW	HIGH(__str_6)
00199c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199e   0e8e     movlw	0x8e               	MOVLW	LOW(__str_6)
0019a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a2   0e00     movlw	0                  	MOVLW	0x00
0019a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019a6   0e18     movlw	0x18               	MOVLW	0x18
0019a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019aa   ecb5     call	0xf6a, 0            	CALL	_get_input
0019ac   f007
0019ae   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019b0   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0019b2   f007
0019b4   0e08     movlw	0x8                	MOVLW	0x08
0019b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	167; src/clock.c	m = get_input(60, "Minutes:", mode);
0019b8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c4   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0019c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c8   0e22     movlw	0x22               	MOVLW	HIGH(__str_7)
0019ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019cc   0e96     movlw	0x96               	MOVLW	LOW(__str_7)
0019ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d0   0e00     movlw	0                  	MOVLW	0x00
0019d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d4   0e3c     movlw	0x3c               	MOVLW	0x3c
0019d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d8   ecb5     call	0xf6a, 0            	CALL	_get_input
0019da   f007
0019dc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0019de   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0019e0   f009
0019e2   0e08     movlw	0x8                	MOVLW	0x08
0019e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; src/clock.c	s = get_input(60, "Seconds:", mode);
0019e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f2   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
0019f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019f6   0e22     movlw	0x22               	MOVLW	HIGH(__str_8)
0019f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019fa   0ea0     movlw	0xa0               	MOVLW	LOW(__str_8)
0019fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019fe   0e00     movlw	0                  	MOVLW	0x00
001a00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a02   0e3c     movlw	0x3c               	MOVLW	0x3c
001a04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a06   ecb5     call	0xf6a, 0            	CALL	_get_input
001a08   f007
001a0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
001a0c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001a0e   f004
001a10   0e08     movlw	0x8                	MOVLW	0x08
001a12   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	169; src/clock.c	time_set(t,h,m,s);
001a14   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a18   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a1c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a20   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a24   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a28   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a30   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a34   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a38   ec3f     call	0x247e, 0           	CALL	_time_set
001a3a   f012
001a3c   0e09     movlw	0x9                	MOVLW	0x09
001a3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001a40   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a42   f009
001a44   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a46   f008
001a48   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a4a   f007
001a4c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a4e   f006
001a50   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a52   f005
001a54   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a56   f004
001a58   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a5a   f003
001a5c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a5e   f002
001a60   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a62   f001
001a64   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a66   f000
001a68   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a6a   ffd9
001a6c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_config_mode	code
                                           _display_config_mode:
                                           ;	.line	159; src/clock.c	void display_config_mode(char *choice_string){
002fea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002fec   ffe5
002fee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002ff0   ffd9
002ff2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002ff4   ffe5
002ff6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002ff8   ffe5
002ffa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002ffc   ffe5
002ffe   0e02     movlw	0x2                	MOVLW	0x02
003000   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003002   f000
003004   0e03     movlw	0x3                	MOVLW	0x03
003006   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003008   f001
00300a   0e04     movlw	0x4                	MOVLW	0x04
00300c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00300e   f002
                                           ;	.line	160; src/clock.c	display_string(START_FIRST_LINE, CM_STRING);
003010   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
003012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003014   0e22     movlw	0x22               	MOVLW	HIGH(__str_5)
003016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003018   0e80     movlw	0x80               	MOVLW	LOW(__str_5)
00301a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00301c   0e00     movlw	0                  	MOVLW	0x00
00301e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003020   ece7     call	0x1dce, 0           	CALL	_display_string
003022   f00e
003024   0e04     movlw	0x4                	MOVLW	0x04
003026   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	161; src/clock.c	display_string(START_SECOND_LINE, choice_string);
003028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00302a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00302c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00302e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003030   5000     movf	0, 0, 0             	MOVF	r0x00, W
003032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003034   0e10     movlw	0x10               	MOVLW	0x10
003036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003038   ece7     call	0x1dce, 0           	CALL	_display_string
00303a   f00e
00303c   0e04     movlw	0x4                	MOVLW	0x04
00303e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003040   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003042   f002
003044   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003046   f001
003048   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00304a   f000
00304c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00304e   ffd9
003050   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__init_config	code
                                           _init_config:
                                           ;	.line	102; src/clock.c	void init_config(void){
000aac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000aae   ffe5
000ab0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab2   ffd9
000ab4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ab6   ffe5
000ab8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000aba   ffe5
000abc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000abe   ffe5
000ac0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ac2   ffe5
000ac4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ac6   ffe5
000ac8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aca   ffe5
000acc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ace   ffe5
000ad0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ad2   ffe5
                                           ;	.line	104; src/clock.c	int choice = CONFIG_MODE_ALARM;
000ad4   6a00     clrf	0, 0                	CLRF	r0x00
000ad6   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	105; src/clock.c	char *choice_string = CM_ALARM_STRING;
000ad8   0e3e     movlw	0x3e               	MOVLW	LOW(__str_0)
000ada   6e02     movwf	0x2, 0             	MOVWF	r0x02
000adc   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000ade   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ae0   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000ae2   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	106; src/clock.c	config_mode_on = 1;
000ae4   0e01     movlw	0x1                	MOVLW	0x01
000ae6   010f     movlb	0xf                	BANKSEL	_config_mode_on
000ae8   6f4b     movwf	0x4b, 0x1          	MOVWF	_config_mode_on, B
000aea   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
000aec   6b4c     clrf	0x4c, 0x1           	CLRF	(_config_mode_on + 1), B
                                           ;	.line	107; src/clock.c	display_config_mode(choice_string);
000aee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000af0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000af4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000af8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afa   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000afc   f017
000afe   0e03     movlw	0x3                	MOVLW	0x03
000b00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00143_DS_:
                                           ;	.line	109; src/clock.c	if(read_and_clear(&but2_pressed)){
000b02   0e0f     movlw	0xf                	MOVLW	HIGH(_but2_pressed)
000b04   6e06     movwf	0x6, 0             	MOVWF	r0x06
000b06   0e49     movlw	0x49               	MOVLW	LOW(_but2_pressed)
000b08   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b0a   0e80     movlw	0x80               	MOVLW	0x80
000b0c   6e07     movwf	0x7, 0             	MOVWF	r0x07
000b0e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1a   ec35     call	0x2e6a, 0           	CALL	_read_and_clear
000b1c   f017
000b1e   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b20   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000b22   f006
000b24   0e03     movlw	0x3                	MOVLW	0x03
000b26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b2a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000b2c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000b2e   d051     bra	0xbd2                	BRA	_00135_DS_
                                           ;	.line	111; src/clock.c	switch(choice){
000b30   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b32   e102     bnz	0xb38                	BNZ	_00155_DS_
000b34   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b36   e006     bz	0xb44                 	BZ	_00130_DS_
                                           _00155_DS_:
000b38   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b3a   0a01     xorlw	0x1                	XORLW	0x01
000b3c   e102     bnz	0xb42                	BNZ	_00157_DS_
000b3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b40   e021     bz	0xb84                 	BZ	_00131_DS_
                                           _00157_DS_:
000b42   d040     bra	0xbc4                	BRA	_00132_DS_
                                           _00130_DS_:
                                           ;	.line	114; src/clock.c	LCDErase();
000b44   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000b46   f015
                                           ;	.line	115; src/clock.c	init_time(_alarm, SM_ALARM_STRING);			
000b48   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4c   0e22     movlw	0x22               	MOVLW	HIGH(__str_1)
000b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b50   0e4a     movlw	0x4a               	MOVLW	LOW(__str_1)
000b52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b54   010e     movlb	0xe                	BANKSEL	(__alarm + 2)
000b56   5145     movf	0x45, 0, 0x1        	MOVF	(__alarm + 2), W, B
000b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5a   010e     movlb	0xe                	BANKSEL	(__alarm + 1)
000b5c   5144     movf	0x44, 0, 0x1        	MOVF	(__alarm + 1), W, B
000b5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b60   010e     movlb	0xe                	BANKSEL	__alarm
000b62   5143     movf	0x43, 0, 0x1        	MOVF	__alarm, W, B
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   ec9b     call	0x1936, 0           	CALL	_init_time
000b68   f00c
000b6a   0e06     movlw	0x6                	MOVLW	0x06
000b6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	116; src/clock.c	display_config_mode(choice_string);
000b6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b7a   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000b7c   f017
000b7e   0e03     movlw	0x3                	MOVLW	0x03
000b80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; src/clock.c	break;
000b82   d027     bra	0xbd2                	BRA	_00135_DS_
                                           _00131_DS_:
                                           ;	.line	120; src/clock.c	LCDErase();
000b84   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000b86   f015
                                           ;	.line	121; src/clock.c	init_time(_time, SM_CLOCK_STRING);			
000b88   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000b8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8c   0e22     movlw	0x22               	MOVLW	HIGH(__str_2)
000b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b90   0e56     movlw	0x56               	MOVLW	LOW(__str_2)
000b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b94   010e     movlb	0xe                	BANKSEL	(__time + 2)
000b96   5142     movf	0x42, 0, 0x1        	MOVF	(__time + 2), W, B
000b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9a   010e     movlb	0xe                	BANKSEL	(__time + 1)
000b9c   5141     movf	0x41, 0, 0x1        	MOVF	(__time + 1), W, B
000b9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba0   010e     movlb	0xe                	BANKSEL	__time
000ba2   5140     movf	0x40, 0, 0x1        	MOVF	__time, W, B
000ba4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba6   ec9b     call	0x1936, 0           	CALL	_init_time
000ba8   f00c
000baa   0e06     movlw	0x6                	MOVLW	0x06
000bac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	122; src/clock.c	display_config_mode(choice_string);
000bae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bba   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000bbc   f017
000bbe   0e03     movlw	0x3                	MOVLW	0x03
000bc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	123; src/clock.c	break;
000bc2   d007     bra	0xbd2                	BRA	_00135_DS_
                                           _00132_DS_:
                                           ;	.line	125; src/clock.c	LCDErase();
000bc4   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000bc6   f015
000bc8   010f     movlb	0xf                	BANKSEL	_config_mode_on
                                           ;	.line	126; src/clock.c	config_mode_on = 0;
000bca   6b4b     clrf	0x4b, 0x1           	CLRF	_config_mode_on, B
000bcc   010f     movlb	0xf                	BANKSEL	(_config_mode_on + 1)
000bce   6b4c     clrf	0x4c, 0x1           	CLRF	(_config_mode_on + 1), B
                                           ;	.line	127; src/clock.c	return;
000bd0   d08b     bra	0xce8                	BRA	_00145_DS_
                                           _00135_DS_:
                                           ;	.line	130; src/clock.c	if(read_and_clear(&but1_pressed)){ 
000bd2   0e0f     movlw	0xf                	MOVLW	HIGH(_but1_pressed)
000bd4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000bd6   0e47     movlw	0x47               	MOVLW	LOW(_but1_pressed)
000bd8   6e05     movwf	0x5, 0             	MOVWF	r0x05
000bda   0e80     movlw	0x80               	MOVLW	0x80
000bdc   6e07     movwf	0x7, 0             	MOVWF	r0x07
000bde   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000be0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000be4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bea   ec35     call	0x2e6a, 0           	CALL	_read_and_clear
000bec   f017
000bee   6e05     movwf	0x5, 0             	MOVWF	r0x05
000bf0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000bf2   f006
000bf4   0e03     movlw	0x3                	MOVLW	0x03
000bf6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bf8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bfa   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000bfc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000bfe   d781     bra	0xb02                	BRA	_00143_DS_
                                           ;	.line	132; src/clock.c	switch(choice){
000c00   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c02   0f80     addlw	0x80               	ADDLW	0x80
000c04   0f81     addlw	0x81               	ADDLW	0x81
000c06   e102     bnz	0xc0c                	BNZ	_00158_DS_
000c08   0eff     movlw	0xff               	MOVLW	0xff
000c0a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00158_DS_:
000c0c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c0e   d779     bra	0xb02                	BRA	_00143_DS_
000c10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c12   0f80     addlw	0x80               	ADDLW	0x80
000c14   0f80     addlw	0x80               	ADDLW	0x80
000c16   e102     bnz	0xc1c                	BNZ	_00159_DS_
000c18   0e02     movlw	0x2                	MOVLW	0x02
000c1a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00159_DS_:
000c1c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c1e   d771     bra	0xb02                	BRA	_00143_DS_
000c20   2800     incf	0, 0, 0             	INCF	r0x00, W
000c22   6e05     movwf	0x5, 0             	MOVWF	r0x05
000c24   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000c26   ffe5
000c28   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000c2a   ffe5
000c2c   6a09     clrf	0x9, 0              	CLRF	r0x09
000c2e   3405     rlcf	0x5, 0, 0           	RLCF	r0x05, W
000c30   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000c32   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000c34   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000c36   0bfc     andlw	0xfc               	ANDLW	0xfc
000c38   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c3a   0e00     movlw	0                  	MOVLW	UPPER(_00160_DS_)
000c3c   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000c3e   0e0c     movlw	0xc                	MOVLW	HIGH(_00160_DS_)
000c40   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000c42   0e5a     movlw	0x5a               	MOVLW	LOW(_00160_DS_)
000c44   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000c46   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000c48   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000c4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c4c   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000c4e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c50   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000c52   f009
000c54   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000c56   f008
000c58   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00160_DS_:
000c5a   ef33     goto	0xc66               	GOTO	_00136_DS_
000c5c   f006
000c5e   ef48     goto	0xc90               	GOTO	_00137_DS_
000c60   f006
000c62   ef5e     goto	0xcbc               	GOTO	_00138_DS_
000c64   f006
                                           _00136_DS_:
                                           ;	.line	135; src/clock.c	LCDErase();
000c66   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000c68   f015
                                           ;	.line	136; src/clock.c	choice = CONFIG_MODE_ALARM;
000c6a   6a00     clrf	0, 0                	CLRF	r0x00
000c6c   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	137; src/clock.c	choice_string = CM_ALARM_STRING;
000c6e   0e3e     movlw	0x3e               	MOVLW	LOW(__str_0)
000c70   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c72   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000c74   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c76   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000c78   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	138; src/clock.c	display_config_mode(choice_string);
000c7a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c86   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000c88   f017
000c8a   0e03     movlw	0x3                	MOVLW	0x03
000c8c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	139; src/clock.c	break;
000c8e   d739     bra	0xb02                	BRA	_00143_DS_
                                           _00137_DS_:
                                           ;	.line	142; src/clock.c	LCDErase();
000c90   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000c92   f015
                                           ;	.line	143; src/clock.c	choice = CONFIG_MODE_CLOCK;
000c94   0e01     movlw	0x1                	MOVLW	0x01
000c96   6e00     movwf	0, 0               	MOVWF	r0x00
000c98   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	144; src/clock.c	choice_string = CM_CLOCK_STRING;
000c9a   0e62     movlw	0x62               	MOVLW	LOW(__str_3)
000c9c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c9e   0e22     movlw	0x22               	MOVLW	HIGH(__str_3)
000ca0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ca2   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000ca4   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	145; src/clock.c	display_config_mode(choice_string);
000ca6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ca8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000caa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb2   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000cb4   f017
000cb6   0e03     movlw	0x3                	MOVLW	0x03
000cb8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	146; src/clock.c	break;
000cba   d723     bra	0xb02                	BRA	_00143_DS_
                                           _00138_DS_:
                                           ;	.line	149; src/clock.c	LCDErase();
000cbc   ecb2     call	0x2b64, 0           	CALL	_LCDErase
000cbe   f015
                                           ;	.line	150; src/clock.c	choice =CONFIG_MODE_QUIT;
000cc0   0eff     movlw	0xff               	MOVLW	0xff
000cc2   6e00     movwf	0, 0               	MOVWF	r0x00
000cc4   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	151; src/clock.c	choice_string = CM_QUIT_STRING;
000cc6   0e6e     movlw	0x6e               	MOVLW	LOW(__str_4)
000cc8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cca   0e22     movlw	0x22               	MOVLW	HIGH(__str_4)
000ccc   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cce   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000cd0   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	152; src/clock.c	display_config_mode(choice_string);
000cd2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ecf5     call	0x2fea, 0           	CALL	_display_config_mode
000ce0   f017
000ce2   0e03     movlw	0x3                	MOVLW	0x03
000ce4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	154; src/clock.c	}
000ce6   d70d     bra	0xb02                	BRA	_00143_DS_
                                           _00145_DS_:
000ce8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cea   f007
000cec   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000cee   f006
000cf0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cf2   f005
000cf4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cf6   f004
000cf8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cfa   f003
000cfc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cfe   f002
000d00   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d02   f001
000d04   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d06   f000
000d08   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d0a   ffd9
000d0c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__alarm_led	code
                                           _alarm_led:
                                           ;	.line	98; src/clock.c	void alarm_led(void){
0030b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0030b6   ffe5
0030b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0030ba   ffd9
0030bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0030be   ffe5
                                           ;	.line	99; src/clock.c	LED1_IO^=1;
0030c0   6a00     clrf	0, 0                	CLRF	r0x00
0030c2   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
0030c4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0030c6   0e01     movlw	0x1                	MOVLW	0x01
0030c8   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0030ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0030cc   0b01     andlw	0x1                	ANDLW	0x01
0030ce   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0030d0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0030d2   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0030d4   0bfd     andlw	0xfd               	ANDLW	0xfd
0030d6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0030d8   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	100; src/clock.c	LED2_IO^=1;
0030da   6a00     clrf	0, 0                	CLRF	r0x00
0030dc   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
0030de   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0030e0   0e01     movlw	0x1                	MOVLW	0x01
0030e2   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0030e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0030e6   0b01     andlw	0x1                	ANDLW	0x01
0030e8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0030ea   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0030ec   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0030ee   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0030f0   0bfb     andlw	0xfb               	ANDLW	0xfb
0030f2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0030f4   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0030f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0030f8   f000
0030fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0030fc   ffd9
0030fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__toggle_led	code
                                           _toggle_led:
                                           ;	.line	94; src/clock.c	void toggle_led(void){
0031fc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031fe   ffe5
003200   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003202   ffd9
003204   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003206   ffe5
                                           ;	.line	95; src/clock.c	LED0_IO^=1;
003208   6a00     clrf	0, 0                	CLRF	r0x00
00320a   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
00320c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00320e   0e01     movlw	0x1                	MOVLW	0x01
003210   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
003212   5000     movf	0, 0, 0             	MOVF	r0x00, W
003214   0b01     andlw	0x1                	ANDLW	0x01
003216   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003218   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
00321a   0bfe     andlw	0xfe               	ANDLW	0xfe
00321c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00321e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
003220   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003222   f000
003224   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003226   ffd9
003228   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__update_display	code
                                           _update_display:
                                           ;	.line	89; src/clock.c	void update_display(void){
0021c2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0021c4   ffe5
0021c6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0021c8   ffd9
0021ca   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0021cc   ffe5
0021ce   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0021d0   ffe5
0021d2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0021d4   ffe5
                                           ;	.line	90; src/clock.c	time_print(_time, display_line);
0021d6   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
0021d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021da   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
0021dc   6e00     movwf	0, 0               	MOVWF	r0x00
0021de   0e80     movlw	0x80               	MOVLW	0x80
0021e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ee   010e     movlb	0xe                	BANKSEL	(__time + 2)
0021f0   5142     movf	0x42, 0, 0x1        	MOVF	(__time + 2), W, B
0021f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021f4   010e     movlb	0xe                	BANKSEL	(__time + 1)
0021f6   5141     movf	0x41, 0, 0x1        	MOVF	(__time + 1), W, B
0021f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fa   010e     movlb	0xe                	BANKSEL	__time
0021fc   5140     movf	0x40, 0, 0x1        	MOVF	__time, W, B
0021fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002200   ecc9     call	0x1b92, 0           	CALL	_time_print
002202   f00d
002204   0e06     movlw	0x6                	MOVLW	0x06
002206   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	91; src/clock.c	display_string(0, display_line);
002208   0e0f     movlw	0xf                	MOVLW	HIGH(_display_line)
00220a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00220c   0e21     movlw	0x21               	MOVLW	LOW(_display_line)
00220e   6e00     movwf	0, 0               	MOVWF	r0x00
002210   0e80     movlw	0x80               	MOVLW	0x80
002212   6e02     movwf	0x2, 0             	MOVWF	r0x02
002214   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002216   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002218   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00221a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00221c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00221e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002220   0e00     movlw	0                  	MOVLW	0x00
002222   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002224   ece7     call	0x1dce, 0           	CALL	_display_string
002226   f00e
002228   0e04     movlw	0x4                	MOVLW	0x04
00222a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00222c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00222e   f002
002230   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002232   f001
002234   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002236   f000
002238   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00223a   ffd9
00223c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00223e   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3f, 0x00
002240   2074     addwfc	0x74, 0, 0        
002242   6c61     negf	0x61, 0             
002244   7261     btg	0x61, 0x1, 0         
002246   3f6d     incfsz	0x6d, 0x1, 0x1    
002248   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
00224a   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x00
00224c   2074     addwfc	0x74, 0, 0        
00224e   6c61     negf	0x61, 0             
002250   7261     btg	0x61, 0x1, 0         
002252   3a6d     swapf	0x6d, 0x1, 0       
002254   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
002256   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x00
002258   2074     addwfc	0x74, 0, 0        
00225a   6c63     negf	0x63, 0             
00225c   636f     cpfseq	0x6f, 0x1         
00225e   3a6b     swapf	0x6b, 0x1, 0       
002260   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
002262   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
002264   2074     addwfc	0x74, 0, 0        
002266   6c63     negf	0x63, 0             
002268   636f     cpfseq	0x6f, 0x1         
00226a   3f6b     incfsz	0x6b, 0x1, 0x1    
00226c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
00226e   7551     btg	0x51, 0x2, 0x1       	DB	0x51, 0x75, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20
002270   7469     btg	0x69, 0x2, 0         
002272   6320     cpfseq	0x20, 0x1         
002274   6e6f     movwf	0x6f, 0            
002276   6966     setf	0x66, 0x1           
002278   2067     addwfc	0x67, 0, 0        
00227a   6f6d     movwf	0x6d, 0x1          	DB	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x00
00227c   6564     cpfsgt	0x64, 0x1         
00227e   002e     dw	0x2e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
002280   6843     setf	0x43, 0             	DB	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x3a
002282   6f6f     movwf	0x6f, 0x1          
002284   6573     cpfsgt	0x73, 0x1         
002286   6d20     negf	0x20, 0x1           
002288   646f     cpfsgt	0x6f, 0           
00228a   3a65     swapf	0x65, 0x1, 0       
00228c   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_6:
00228e   6f48     movwf	0x48, 0x1          	DB	0x48, 0x6f, 0x75, 0x72, 0x73, 0x3a, 0x00
002290   7275     btg	0x75, 0x1, 0         
002292   3a73     swapf	0x73, 0x1, 0       
002294   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
002296   694d     setf	0x4d, 0x1           	DB	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x00
002298   756e     btg	0x6e, 0x2, 0x1       
00229a   6574     cpfsgt	0x74, 0x1         
00229c   3a73     swapf	0x73, 0x1, 0       
00229e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
0022a0   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x00
0022a2   6f63     movwf	0x63, 0x1          
0022a4   646e     cpfsgt	0x6e, 0           
0022a6   3a73     swapf	0x73, 0x1, 0       
0022a8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
0022aa   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x00
0022ac   6432     cpfsgt	0x32, 0           
0022ae   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2908 (0x0b5c) bytes ( 2.22%)
                                           ;           	 1454 (0x05ae) words
                                           ; udata size:	   41 (0x0029) bytes ( 1.07%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; lib/LCDBlocking.c	void LCDErase(void)
002b64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b66   ffe5
002b68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b6a   ffd9
002b6c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b6e   ffe5
002b70   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b72   ffe5
002b74   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b76   ffe5
002b78   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b7a   ffe5
002b7c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b7e   ffe5
002b80   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b82   ffe5
002b84   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b86   ffe5
002b88   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b8a   ffe5
                                           ;	.line	395; lib/LCDBlocking.c	LCDWrite(0, 0x01);
002b8c   0e01     movlw	0x1                	MOVLW	0x01
002b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b90   0e00     movlw	0                  	MOVLW	0x00
002b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b94   ec29     call	0x3052, 0           	CALL	_LCDWrite
002b96   f018
002b98   0e02     movlw	0x2                	MOVLW	0x02
002b9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; lib/LCDBlocking.c	DelayMs(2);
002b9c   0e48     movlw	0x48               	MOVLW	0x48
002b9e   6e00     movwf	0, 0               	MOVWF	r0x00
002ba0   0e0d     movlw	0xd                	MOVLW	0x0d
002ba2   6e01     movwf	0x1, 0             	MOVWF	r0x01
002ba4   6a02     clrf	0x2, 0              	CLRF	r0x02
002ba6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002ba8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002baa   f004
002bac   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002bae   f005
002bb0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002bb2   f006
002bb4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002bb6   f007
002bb8   0eff     movlw	0xff               	MOVLW	0xff
002bba   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002bbc   0eff     movlw	0xff               	MOVLW	0xff
002bbe   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002bc0   0eff     movlw	0xff               	MOVLW	0xff
002bc2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002bc4   0eff     movlw	0xff               	MOVLW	0xff
002bc6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002bc8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002bca   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002bcc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002bce   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002bd0   e1eb     bnz	0x2ba8               	BNZ	_00305_DS_
                                           ;	.line	399; lib/LCDBlocking.c	memset(LCDText, ' ', 32);
002bd2   0e00     movlw	0                  	MOVLW	0x00
002bd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bd6   0e20     movlw	0x20               	MOVLW	0x20
002bd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bda   0e20     movlw	0x20               	MOVLW	0x20
002bdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bde   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002be0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002be2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002be4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002be6   ecaf     call	0x255e, 0           	CALL	_memset
002be8   f012
002bea   0e05     movlw	0x5                	MOVLW	0x05
002bec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002bee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002bf0   f007
002bf2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002bf4   f006
002bf6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002bf8   f005
002bfa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002bfc   f004
002bfe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c00   f003
002c02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c04   f002
002c06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c08   f001
002c0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c0c   f000
002c0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c10   ffd9
002c12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; lib/LCDBlocking.c	void LCDUpdate(void)
000842   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000844   ffe5
000846   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000848   ffd9
00084a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00084c   ffe5
00084e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000850   ffe5
000852   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000854   ffe5
000856   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000858   ffe5
00085a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00085c   ffe5
00085e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000860   ffe5
000862   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000864   ffe5
000866   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000868   ffe5
00086a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00086c   ffe5
                                           ;	.line	337; lib/LCDBlocking.c	LCDWrite(0, 0x02);
00086e   0e02     movlw	0x2                	MOVLW	0x02
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   ec29     call	0x3052, 0           	CALL	_LCDWrite
000878   f018
00087a   0e02     movlw	0x2                	MOVLW	0x02
00087c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; lib/LCDBlocking.c	DelayMs(2);
00087e   0e48     movlw	0x48               	MOVLW	0x48
000880   6e00     movwf	0, 0               	MOVWF	r0x00
000882   0e0d     movlw	0xd                	MOVLW	0x0d
000884   6e01     movwf	0x1, 0             	MOVWF	r0x01
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00088a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00088c   f004
00088e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000890   f005
000892   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000894   f006
000896   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000898   f007
00089a   0eff     movlw	0xff               	MOVLW	0xff
00089c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00089e   0eff     movlw	0xff               	MOVLW	0xff
0008a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008a2   0eff     movlw	0xff               	MOVLW	0xff
0008a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008a6   0eff     movlw	0xff               	MOVLW	0xff
0008a8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008ac   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008ae   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0008b0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0008b2   e1eb     bnz	0x88a                	BNZ	_00225_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
0008b4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0008b6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008b8   f001
0008ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0008bc   0e00     movlw	0                  	MOVLW	0x00
0008be   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0008c0   e102     bnz	0x8c6                	BNZ	_00297_DS_
0008c2   0e10     movlw	0x10               	MOVLW	0x10
0008c4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0008c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008c8   d057     bra	0x978                	BRA	_00260_DS_
                                           ;	.line	345; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0008ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0008ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0008d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0008d8   ffe9
0008da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0008dc   ffea
0008de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0008e0   f001
0008e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008e4   e119     bnz	0x918                	BNZ	_00232_DS_
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
0008e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0008e8   f001
                                           _00253_DS_:
0008ea   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0008ec   f002
0008ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0008f0   0e00     movlw	0                  	MOVLW	0x00
0008f2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0008f4   e102     bnz	0x8fa                	BNZ	_00298_DS_
0008f6   0e10     movlw	0x10               	MOVLW	0x10
0008f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0008fa   e20e     bc	0x918                 	BC	_00232_DS_
                                           ;	.line	349; lib/LCDBlocking.c	LCDText[j] = ' ';
0008fc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008fe   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000900   6e02     movwf	0x2, 0             	MOVWF	r0x02
000902   6a03     clrf	0x3, 0              	CLRF	r0x03
000904   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000906   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000908   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00090a   ffe9
00090c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00090e   ffea
000910   0e20     movlw	0x20               	MOVLW	0x20
000912   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; lib/LCDBlocking.c	for(j=i; j < 16u; j++)
000914   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000916   d7e9     bra	0x8ea                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000918   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00091a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00091c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091e   6a02     clrf	0x2, 0              	CLRF	r0x02
000920   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000922   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000926   ffe9
000928   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00092a   ffea
00092c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00092e   f001
000930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   0e01     movlw	0x1                	MOVLW	0x01
000936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000938   ec29     call	0x3052, 0           	CALL	_LCDWrite
00093a   f018
00093c   0e02     movlw	0x2                	MOVLW	0x02
00093e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; lib/LCDBlocking.c	Delay10us(5);
000940   0e55     movlw	0x55               	MOVLW	0x55
000942   6e01     movwf	0x1, 0             	MOVWF	r0x01
000944   6a02     clrf	0x2, 0              	CLRF	r0x02
000946   6a03     clrf	0x3, 0              	CLRF	r0x03
000948   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00094a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00094c   f005
00094e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000950   f006
000952   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000954   f007
000956   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000958   f008
00095a   0eff     movlw	0xff               	MOVLW	0xff
00095c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00095e   0eff     movlw	0xff               	MOVLW	0xff
000960   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000962   0eff     movlw	0xff               	MOVLW	0xff
000964   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000966   0eff     movlw	0xff               	MOVLW	0xff
000968   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00096a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00096c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00096e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000970   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000972   e1eb     bnz	0x94a                	BNZ	_00233_DS_
                                           ;	.line	341; lib/LCDBlocking.c	for(i = 0; i < 16u; i++)
000974   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000976   d79f     bra	0x8b6                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; lib/LCDBlocking.c	LCDWrite(0, 0xC0);
000978   0ec0     movlw	0xc0               	MOVLW	0xc0
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	0x00
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   ec29     call	0x3052, 0           	CALL	_LCDWrite
000982   f018
000984   0e02     movlw	0x2                	MOVLW	0x02
000986   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; lib/LCDBlocking.c	Delay10us(5);
000988   0e55     movlw	0x55               	MOVLW	0x55
00098a   6e00     movwf	0, 0               	MOVWF	r0x00
00098c   6a01     clrf	0x1, 0              	CLRF	r0x01
00098e   6a02     clrf	0x2, 0              	CLRF	r0x02
000990   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
000992   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000994   f004
000996   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000998   f005
00099a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00099c   f006
00099e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009a0   f007
0009a2   0eff     movlw	0xff               	MOVLW	0xff
0009a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009a6   0eff     movlw	0xff               	MOVLW	0xff
0009a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009aa   0eff     movlw	0xff               	MOVLW	0xff
0009ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ae   0eff     movlw	0xff               	MOVLW	0xff
0009b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009ba   e1eb     bnz	0x992                	BNZ	_00239_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
0009bc   0e10     movlw	0x10               	MOVLW	0x10
0009be   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0009c0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009c2   f001
0009c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0009c6   0e00     movlw	0                  	MOVLW	0x00
0009c8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0009ca   e102     bnz	0x9d0                	BNZ	_00299_DS_
0009cc   0e20     movlw	0x20               	MOVLW	0x20
0009ce   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0009d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d2   d057     bra	0xa82                	BRA	_00269_DS_
                                           ;	.line	365; lib/LCDBlocking.c	if(LCDText[i] == 0u)
0009d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0009d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0009d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009da   6a02     clrf	0x2, 0              	CLRF	r0x02
0009dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0009de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009e0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0009e2   ffe9
0009e4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0009e6   ffea
0009e8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0009ea   f001
0009ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ee   e119     bnz	0xa22                	BNZ	_00246_DS_
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
0009f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0009f2   f001
                                           _00261_DS_:
0009f4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0009f6   f002
0009f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0009fa   0e00     movlw	0                  	MOVLW	0x00
0009fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0009fe   e102     bnz	0xa04                	BNZ	_00300_DS_
000a00   0e20     movlw	0x20               	MOVLW	0x20
000a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
000a04   e20e     bc	0xa22                 	BC	_00246_DS_
                                           ;	.line	369; lib/LCDBlocking.c	LCDText[j] = ' ';
000a06   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a08   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000a0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a0c   6a03     clrf	0x3, 0              	CLRF	r0x03
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000a14   ffe9
000a16   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000a18   ffea
000a1a   0e20     movlw	0x20               	MOVLW	0x20
000a1c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; lib/LCDBlocking.c	for(j=i; j < 32u; j++)
000a1e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a20   d7e9     bra	0x9f4                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; lib/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000a22   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000a24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a26   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a28   6a02     clrf	0x2, 0              	CLRF	r0x02
000a2a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000a2c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a2e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000a30   ffe9
000a32   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000a34   ffea
000a36   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000a38   f001
000a3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   0e01     movlw	0x1                	MOVLW	0x01
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec29     call	0x3052, 0           	CALL	_LCDWrite
000a44   f018
000a46   0e02     movlw	0x2                	MOVLW	0x02
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; lib/LCDBlocking.c	Delay10us(5);
000a4a   0e55     movlw	0x55               	MOVLW	0x55
000a4c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a4e   6a02     clrf	0x2, 0              	CLRF	r0x02
000a50   6a03     clrf	0x3, 0              	CLRF	r0x03
000a52   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
000a54   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a56   f005
000a58   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a5a   f006
000a5c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a5e   f007
000a60   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000a62   f008
000a64   0eff     movlw	0xff               	MOVLW	0xff
000a66   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a68   0eff     movlw	0xff               	MOVLW	0xff
000a6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a6c   0eff     movlw	0xff               	MOVLW	0xff
000a6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a70   0eff     movlw	0xff               	MOVLW	0xff
000a72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a76   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a7a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000a7c   e1eb     bnz	0xa54                	BNZ	_00247_DS_
                                           ;	.line	361; lib/LCDBlocking.c	for(i = 16; i < 32u; i++)
000a7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a80   d79f     bra	0x9c0                	BRA	_00265_DS_
                                           _00269_DS_:
000a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a84   f008
000a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000a88   f007
000a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000a8c   f006
000a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000a90   f005
000a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000a94   f004
000a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000a98   f003
000a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a9c   f002
000a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aa0   f001
000aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa4   f000
000aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aa8   ffd9
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; lib/LCDBlocking.c	void LCDInit(void)
000d0e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d10   ffe5
000d12   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d14   ffd9
000d16   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d18   ffe5
000d1a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d1c   ffe5
000d1e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d20   ffe5
000d22   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d24   ffe5
000d26   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000d28   ffe5
000d2a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000d2c   ffe5
000d2e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000d30   ffe5
000d32   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000d34   ffe5
000d36   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000d38   ffe5
                                           ;	.line	211; lib/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
000d3a   0e00     movlw	0                  	MOVLW	0x00
000d3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3e   0e20     movlw	0x20               	MOVLW	0x20
000d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d42   0e20     movlw	0x20               	MOVLW	0x20
000d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d46   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4e   ecaf     call	0x255e, 0           	CALL	_memset
000d50   f012
000d52   0e05     movlw	0x5                	MOVLW	0x05
000d54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d56   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; lib/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000d58   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; lib/LCDBlocking.c	LCD_E_IO = 0;
000d5a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
000d5c   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000d5e   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000d60   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
000d62   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; lib/LCDBlocking.c	LCD_E_TRIS = 0;
000d64   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; lib/LCDBlocking.c	DelayMs(40);
000d66   0ea0     movlw	0xa0               	MOVLW	0xa0
000d68   6e00     movwf	0, 0               	MOVWF	r0x00
000d6a   0e09     movlw	0x9                	MOVLW	0x09
000d6c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d6e   0e01     movlw	0x1                	MOVLW	0x01
000d70   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d72   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
000d74   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000d76   f004
000d78   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000d7a   f005
000d7c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000d7e   f006
000d80   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000d82   f007
000d84   0eff     movlw	0xff               	MOVLW	0xff
000d86   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d88   0eff     movlw	0xff               	MOVLW	0xff
000d8a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000d8c   0eff     movlw	0xff               	MOVLW	0xff
000d8e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000d90   0eff     movlw	0xff               	MOVLW	0xff
000d92   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000d94   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d96   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000d98   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000d9a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000d9c   e1eb     bnz	0xd74                	BNZ	_00143_DS_
                                           ;	.line	247; lib/LCDBlocking.c	LCD_RS_IO = 0;
000d9e   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; lib/LCDBlocking.c	LCD_DATA_IO = 0x03;
000da0   0e03     movlw	0x3                	MOVLW	0x03
000da2   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
000da4   0000     nop                      	nop 
000da6   0000     nop                      	nop 
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000da8   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000daa   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000dac   f001
000dae   6a02     clrf	0x2, 0              	CLRF	r0x02
000db0   0e00     movlw	0                  	MOVLW	0x00
000db2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000db4   e102     bnz	0xdba                	BNZ	_00220_DS_
000db6   0e03     movlw	0x3                	MOVLW	0x03
000db8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000dba   e239     bc	0xe2e                 	BC	_00194_DS_
                                           ;	.line	266; lib/LCDBlocking.c	LCD_E_IO = 1;
000dbc   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; lib/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000dbe   0e11     movlw	0x11               	MOVLW	0x11
000dc0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dc2   6a02     clrf	0x2, 0              	CLRF	r0x02
000dc4   6a03     clrf	0x3, 0              	CLRF	r0x03
000dc6   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000dc8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000dca   f005
000dcc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000dce   f006
000dd0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000dd2   f007
000dd4   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000dd6   f008
000dd8   0eff     movlw	0xff               	MOVLW	0xff
000dda   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000ddc   0eff     movlw	0xff               	MOVLW	0xff
000dde   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000de0   0eff     movlw	0xff               	MOVLW	0xff
000de2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000de4   0eff     movlw	0xff               	MOVLW	0xff
000de6   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000de8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000dea   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000dec   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000dee   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000df0   e1eb     bnz	0xdc8                	BNZ	_00155_DS_
                                           ;	.line	268; lib/LCDBlocking.c	LCD_E_IO = 0;
000df2   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; lib/LCDBlocking.c	DelayMs(2);
000df4   0e48     movlw	0x48               	MOVLW	0x48
000df6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000df8   0e0d     movlw	0xd                	MOVLW	0x0d
000dfa   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dfc   6a03     clrf	0x3, 0              	CLRF	r0x03
000dfe   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000e00   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e02   f005
000e04   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e06   f006
000e08   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e0a   f007
000e0c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000e0e   f008
000e10   0eff     movlw	0xff               	MOVLW	0xff
000e12   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000e14   0eff     movlw	0xff               	MOVLW	0xff
000e16   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e18   0eff     movlw	0xff               	MOVLW	0xff
000e1a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e1c   0eff     movlw	0xff               	MOVLW	0xff
000e1e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000e20   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e22   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e24   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e26   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000e28   e1eb     bnz	0xe00                	BNZ	_00161_DS_
                                           ;	.line	264; lib/LCDBlocking.c	for(i = 0; i < 3u; i++)
000e2a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000e2c   d7be     bra	0xdaa                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; lib/LCDBlocking.c	LCDWrite(0, 0x38);
000e2e   0e38     movlw	0x38               	MOVLW	0x38
000e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e32   0e00     movlw	0                  	MOVLW	0x00
000e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e36   ec29     call	0x3052, 0           	CALL	_LCDWrite
000e38   f018
000e3a   0e02     movlw	0x2                	MOVLW	0x02
000e3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; lib/LCDBlocking.c	Delay10us(5);
000e3e   0e55     movlw	0x55               	MOVLW	0x55
000e40   6e00     movwf	0, 0               	MOVWF	r0x00
000e42   6a01     clrf	0x1, 0              	CLRF	r0x01
000e44   6a02     clrf	0x2, 0              	CLRF	r0x02
000e46   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000e48   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000e4a   f004
000e4c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e4e   f005
000e50   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e52   f006
000e54   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e56   f007
000e58   0eff     movlw	0xff               	MOVLW	0xff
000e5a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000e5c   0eff     movlw	0xff               	MOVLW	0xff
000e5e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000e60   0eff     movlw	0xff               	MOVLW	0xff
000e62   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e64   0eff     movlw	0xff               	MOVLW	0xff
000e66   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e68   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e6a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000e6c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000e6e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000e70   e1eb     bnz	0xe48                	BNZ	_00167_DS_
                                           ;	.line	300; lib/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000e72   0e06     movlw	0x6                	MOVLW	0x06
000e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e76   0e00     movlw	0                  	MOVLW	0x00
000e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7a   ec29     call	0x3052, 0           	CALL	_LCDWrite
000e7c   f018
000e7e   0e02     movlw	0x2                	MOVLW	0x02
000e80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; lib/LCDBlocking.c	Delay10us(5);
000e82   0e55     movlw	0x55               	MOVLW	0x55
000e84   6e00     movwf	0, 0               	MOVWF	r0x00
000e86   6a01     clrf	0x1, 0              	CLRF	r0x01
000e88   6a02     clrf	0x2, 0              	CLRF	r0x02
000e8a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000e8c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000e8e   f004
000e90   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000e92   f005
000e94   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000e96   f006
000e98   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000e9a   f007
000e9c   0eff     movlw	0xff               	MOVLW	0xff
000e9e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ea0   0eff     movlw	0xff               	MOVLW	0xff
000ea2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ea4   0eff     movlw	0xff               	MOVLW	0xff
000ea6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ea8   0eff     movlw	0xff               	MOVLW	0xff
000eaa   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000eac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000eae   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000eb0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000eb2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000eb4   e1eb     bnz	0xe8c                	BNZ	_00173_DS_
                                           ;	.line	304; lib/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000eb6   0e0c     movlw	0xc                	MOVLW	0x0c
000eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eba   0e00     movlw	0                  	MOVLW	0x00
000ebc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ebe   ec29     call	0x3052, 0           	CALL	_LCDWrite
000ec0   f018
000ec2   0e02     movlw	0x2                	MOVLW	0x02
000ec4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; lib/LCDBlocking.c	Delay10us(5);
000ec6   0e55     movlw	0x55               	MOVLW	0x55
000ec8   6e00     movwf	0, 0               	MOVWF	r0x00
000eca   6a01     clrf	0x1, 0              	CLRF	r0x01
000ecc   6a02     clrf	0x2, 0              	CLRF	r0x02
000ece   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000ed0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ed2   f004
000ed4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ed6   f005
000ed8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000eda   f006
000edc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000ede   f007
000ee0   0eff     movlw	0xff               	MOVLW	0xff
000ee2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ee4   0eff     movlw	0xff               	MOVLW	0xff
000ee6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ee8   0eff     movlw	0xff               	MOVLW	0xff
000eea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000eec   0eff     movlw	0xff               	MOVLW	0xff
000eee   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ef0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ef2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000ef4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000ef6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000ef8   e1eb     bnz	0xed0                	BNZ	_00179_DS_
                                           ;	.line	308; lib/LCDBlocking.c	LCDWrite(0, 0x01);	
000efa   0e01     movlw	0x1                	MOVLW	0x01
000efc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efe   0e00     movlw	0                  	MOVLW	0x00
000f00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f02   ec29     call	0x3052, 0           	CALL	_LCDWrite
000f04   f018
000f06   0e02     movlw	0x2                	MOVLW	0x02
000f08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; lib/LCDBlocking.c	DelayMs(2);
000f0a   0e48     movlw	0x48               	MOVLW	0x48
000f0c   6e00     movwf	0, 0               	MOVWF	r0x00
000f0e   0e0d     movlw	0xd                	MOVLW	0x0d
000f10   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f12   6a02     clrf	0x2, 0              	CLRF	r0x02
000f14   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000f16   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f18   f004
000f1a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f1c   f005
000f1e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f20   f006
000f22   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f24   f007
000f26   0eff     movlw	0xff               	MOVLW	0xff
000f28   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f2a   0eff     movlw	0xff               	MOVLW	0xff
000f2c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f2e   0eff     movlw	0xff               	MOVLW	0xff
000f30   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f32   0eff     movlw	0xff               	MOVLW	0xff
000f34   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f36   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f38   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f3a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f3c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f3e   e1eb     bnz	0xf16                	BNZ	_00185_DS_
000f40   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000f42   f008
000f44   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f46   f007
000f48   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f4a   f006
000f4c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f4e   f005
000f50   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f52   f004
000f54   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f56   f003
000f58   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f5a   f002
000f5c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f5e   f001
000f60   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f62   f000
000f64   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f66   ffd9
000f68   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; lib/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
003052   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003054   ffe5
003056   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003058   ffd9
00305a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00305c   ffe5
00305e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003060   ffe5
003062   0e02     movlw	0x2                	MOVLW	0x02
003064   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003066   f000
003068   0e03     movlw	0x3                	MOVLW	0x03
00306a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00306c   f001
                                           ;	.line	97; lib/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00306e   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; lib/LCDBlocking.c	LCD_RS_TRIS = 0;
003070   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; lib/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
003072   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; lib/LCDBlocking.c	LCD_RD_WR_IO = 0;
003074   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; lib/LCDBlocking.c	LCD_RS_IO = RS;
003076   5000     movf	0, 0, 0             	MOVF	r0x00, W
003078   0b01     andlw	0x1                	ANDLW	0x01
00307a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00307c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00307e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003080   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
003082   0bfb     andlw	0xfb               	ANDLW	0xfb
003084   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003086   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; lib/LCDBlocking.c	LCD_DATA_IO = Data;
003088   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00308a   ff8d
00308c   0000     nop                      	nop 
00308e   0000     nop                      	nop 
                                           ;	.line	155; lib/LCDBlocking.c	LCD_E_IO = 1;
003090   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
003092   0000     nop                      	nop 
003094   0000     nop                      	nop 
003096   0000     nop                      	nop 
003098   0000     nop                      	nop 
00309a   0000     nop                      	nop 
00309c   0000     nop                      	nop 
00309e   0000     nop                      	nop 
0030a0   0000     nop                      	nop 
0030a2   0000     nop                      	nop 
                                           ;	.line	165; lib/LCDBlocking.c	LCD_E_IO = 0;
0030a4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0030a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0030a8   f001
0030aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0030ac   f000
0030ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0030b0   ffd9
0030b2   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 14 2013) (UNIX)
                                           ; This file was generated Fri Nov 15 19:50:16 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _heap
                                           	global _time_create
                                           	global _time_set
                                           	global _set_hours
                                           	global _set_minutes
                                           	global _set_seconds
                                           	global _add_second
                                           	global _add_minute
                                           	global _add_hour
                                           	global _time_print
                                           	global _time_equals
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _sprintf
                                           	extern _malloc
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_newtime_0	udata
                                           _heap	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_newtime__time_equals	code
                                           _time_equals:
                                           ;	.line	63; src/newtime.c	int time_equals(time t1, time t2){
00164e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001650   ffe5
001652   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001654   ffd9
001656   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001658   ffe5
00165a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00165c   ffe5
00165e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001660   ffe5
001662   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001664   ffe5
001666   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001668   ffe5
00166a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00166c   ffe5
00166e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001670   ffe5
001672   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001674   ffe5
001676   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001678   ffe5
00167a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00167c   ffe5
00167e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001680   ffe5
001682   0e02     movlw	0x2                	MOVLW	0x02
001684   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001686   f000
001688   0e03     movlw	0x3                	MOVLW	0x03
00168a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00168c   f001
00168e   0e04     movlw	0x4                	MOVLW	0x04
001690   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001692   f002
001694   0e05     movlw	0x5                	MOVLW	0x05
001696   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001698   f003
00169a   0e06     movlw	0x6                	MOVLW	0x06
00169c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00169e   f004
0016a0   0e07     movlw	0x7                	MOVLW	0x07
0016a2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0016a4   f005
                                           ;	.line	64; src/newtime.c	if(t1->seconds != t2->seconds)
0016a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016a8   0f04     addlw	0x4                	ADDLW	0x04
0016aa   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016ac   0e00     movlw	0                  	MOVLW	0x00
0016ae   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0016b0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0016b2   0e00     movlw	0                  	MOVLW	0x00
0016b4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0016b6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016b8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0016ba   ffe9
0016bc   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0016be   fff3
0016c0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0016c2   ec2c     call	0x3258, 0           	CALL	__gptrget2
0016c4   f019
0016c6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0016c8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0016ca   f007
0016cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016ce   0f04     addlw	0x4                	ADDLW	0x04
0016d0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016d2   0e00     movlw	0                  	MOVLW	0x00
0016d4   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0016d6   6e09     movwf	0x9, 0             	MOVWF	r0x09
0016d8   0e00     movlw	0                  	MOVLW	0x00
0016da   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0016dc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0016de   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0016e0   ffe9
0016e2   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0016e4   fff3
0016e6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0016e8   ec2c     call	0x3258, 0           	CALL	__gptrget2
0016ea   f019
0016ec   6e08     movwf	0x8, 0             	MOVWF	r0x08
0016ee   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0016f0   f009
0016f2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0016f4   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
0016f6   e103     bnz	0x16fe               	BNZ	_00166_DS_
0016f8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016fa   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0016fc   e003     bz	0x1704                	BZ	_00155_DS_
                                           _00166_DS_:
                                           ;	.line	65; src/newtime.c	return 0;
0016fe   6af3     clrf	0xf3, 0             	CLRF	PRODL
001700   6ae8     clrf	0xe8, 0             	CLRF	WREG
001702   d04e     bra	0x17a0               	BRA	_00160_DS_
                                           _00155_DS_:
                                           ;	.line	66; src/newtime.c	if(t1->minutes != t2->minutes)
001704   5000     movf	0, 0, 0             	MOVF	r0x00, W
001706   0f02     addlw	0x2                	ADDLW	0x02
001708   6e06     movwf	0x6, 0             	MOVWF	r0x06
00170a   0e00     movlw	0                  	MOVLW	0x00
00170c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00170e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001710   0e00     movlw	0                  	MOVLW	0x00
001712   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001714   6e08     movwf	0x8, 0             	MOVWF	r0x08
001716   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001718   ffe9
00171a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00171c   fff3
00171e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001720   ec2c     call	0x3258, 0           	CALL	__gptrget2
001722   f019
001724   6e06     movwf	0x6, 0             	MOVWF	r0x06
001726   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001728   f007
00172a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00172c   0f02     addlw	0x2                	ADDLW	0x02
00172e   6e08     movwf	0x8, 0             	MOVWF	r0x08
001730   0e00     movlw	0                  	MOVLW	0x00
001732   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001734   6e09     movwf	0x9, 0             	MOVWF	r0x09
001736   0e00     movlw	0                  	MOVLW	0x00
001738   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00173a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00173c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00173e   ffe9
001740   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001742   fff3
001744   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001746   ec2c     call	0x3258, 0           	CALL	__gptrget2
001748   f019
00174a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00174c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00174e   f009
001750   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001752   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001754   e103     bnz	0x175c               	BNZ	_00168_DS_
001756   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001758   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00175a   e003     bz	0x1762                	BZ	_00157_DS_
                                           _00168_DS_:
                                           ;	.line	67; src/newtime.c	return 0;
00175c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00175e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001760   d01f     bra	0x17a0               	BRA	_00160_DS_
                                           _00157_DS_:
                                           ;	.line	68; src/newtime.c	if(t1->hours != t2->hours)
001762   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001764   ffe9
001766   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001768   fff3
00176a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00176c   ec2c     call	0x3258, 0           	CALL	__gptrget2
00176e   f019
001770   6e00     movwf	0, 0               	MOVWF	r0x00
001772   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001774   f001
001776   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001778   ffe9
00177a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00177c   fff3
00177e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001780   ec2c     call	0x3258, 0           	CALL	__gptrget2
001782   f019
001784   6e03     movwf	0x3, 0             	MOVWF	r0x03
001786   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001788   f004
00178a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00178c   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
00178e   e103     bnz	0x1796               	BNZ	_00170_DS_
001790   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001792   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
001794   e003     bz	0x179c                	BZ	_00159_DS_
                                           _00170_DS_:
                                           ;	.line	69; src/newtime.c	return 0;
001796   6af3     clrf	0xf3, 0             	CLRF	PRODL
001798   6ae8     clrf	0xe8, 0             	CLRF	WREG
00179a   d002     bra	0x17a0               	BRA	_00160_DS_
                                           _00159_DS_:
                                           ;	.line	70; src/newtime.c	return 1;
00179c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00179e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00160_DS_:
0017a0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0017a2   f00a
0017a4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0017a6   f009
0017a8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0017aa   f008
0017ac   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0017ae   f007
0017b0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0017b2   f006
0017b4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017b6   f005
0017b8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017ba   f004
0017bc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017be   f003
0017c0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017c2   f002
0017c4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017c6   f001
0017c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017ca   f000
0017cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017ce   ffd9
0017d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_print	code
                                           _time_print:
                                           ;	.line	59; src/newtime.c	void time_print(time t, char* str){
001b92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b94   ffe5
001b96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b98   ffd9
001b9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b9c   ffe5
001b9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ba0   ffe5
001ba2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001ba4   ffe5
001ba6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001ba8   ffe5
001baa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bac   ffe5
001bae   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001bb0   ffe5
001bb2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bb4   ffe5
001bb6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bb8   ffe5
001bba   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bbc   ffe5
001bbe   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bc0   ffe5
001bc2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bc4   ffe5
001bc6   0e02     movlw	0x2                	MOVLW	0x02
001bc8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001bca   f000
001bcc   0e03     movlw	0x3                	MOVLW	0x03
001bce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001bd0   f001
001bd2   0e04     movlw	0x4                	MOVLW	0x04
001bd4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001bd6   f002
001bd8   0e05     movlw	0x5                	MOVLW	0x05
001bda   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001bdc   f003
001bde   0e06     movlw	0x6                	MOVLW	0x06
001be0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001be2   f004
001be4   0e07     movlw	0x7                	MOVLW	0x07
001be6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001be8   f005
                                           ;	.line	60; src/newtime.c	sprintf(str, "%02d:%02d:%02d", t->hours, t->minutes, t->seconds);
001bea   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bec   0f04     addlw	0x4                	ADDLW	0x04
001bee   6e06     movwf	0x6, 0             	MOVWF	r0x06
001bf0   0e00     movlw	0                  	MOVLW	0x00
001bf2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001bf4   6e07     movwf	0x7, 0             	MOVWF	r0x07
001bf6   0e00     movlw	0                  	MOVLW	0x00
001bf8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001bfa   6e08     movwf	0x8, 0             	MOVWF	r0x08
001bfc   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001bfe   ffe9
001c00   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001c02   fff3
001c04   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c06   ec2c     call	0x3258, 0           	CALL	__gptrget2
001c08   f019
001c0a   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c0c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001c0e   f007
001c10   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c12   0f02     addlw	0x2                	ADDLW	0x02
001c14   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c16   0e00     movlw	0                  	MOVLW	0x00
001c18   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c1a   6e09     movwf	0x9, 0             	MOVWF	r0x09
001c1c   0e00     movlw	0                  	MOVLW	0x00
001c1e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c20   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001c22   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001c24   ffe9
001c26   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001c28   fff3
001c2a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001c2c   ec2c     call	0x3258, 0           	CALL	__gptrget2
001c2e   f019
001c30   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c32   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
001c34   f009
001c36   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001c38   ffe9
001c3a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001c3c   fff3
001c3e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c40   ec2c     call	0x3258, 0           	CALL	__gptrget2
001c42   f019
001c44   6e00     movwf	0, 0               	MOVWF	r0x00
001c46   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c48   f001
001c4a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c52   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c56   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c62   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
001c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c66   0e2e     movlw	0x2e               	MOVLW	HIGH(__str_0)
001c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6a   0e5a     movlw	0x5a               	MOVLW	LOW(__str_0)
001c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c6e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c72   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7a   ec58     call	0x22b0, 0           	CALL	_sprintf
001c7c   f011
001c7e   0e0c     movlw	0xc                	MOVLW	0x0c
001c80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c82   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001c84   f00a
001c86   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001c88   f009
001c8a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c8c   f008
001c8e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c90   f007
001c92   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c94   f006
001c96   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c98   f005
001c9a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c9c   f004
001c9e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ca0   f003
001ca2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ca4   f002
001ca6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ca8   f001
001caa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cac   f000
001cae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cb0   ffd9
001cb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_hour	code
                                           _add_hour:
                                           ;	.line	55; src/newtime.c	void add_hour(time t){
002f6c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f6e   ffe5
002f70   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f72   ffd9
002f74   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002f76   ffe5
002f78   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002f7a   ffe5
002f7c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002f7e   ffe5
002f80   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002f82   ffe5
002f84   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002f86   ffe5
002f88   0e02     movlw	0x2                	MOVLW	0x02
002f8a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002f8c   f000
002f8e   0e03     movlw	0x3                	MOVLW	0x03
002f90   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002f92   f001
002f94   0e04     movlw	0x4                	MOVLW	0x04
002f96   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002f98   f002
                                           ;	.line	56; src/newtime.c	set_hours(t,t->hours + 1);
002f9a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f9c   ffe9
002f9e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002fa0   fff3
002fa2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fa4   ec2c     call	0x3258, 0           	CALL	__gptrget2
002fa6   f019
002fa8   6e03     movwf	0x3, 0             	MOVWF	r0x03
002faa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002fac   f004
002fae   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002fb0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002fb2   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002fb4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fb8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fc8   ec40     call	0x2880, 0           	CALL	_set_hours
002fca   f014
002fcc   0e05     movlw	0x5                	MOVLW	0x05
002fce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002fd0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002fd2   f004
002fd4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002fd6   f003
002fd8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002fda   f002
002fdc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002fde   f001
002fe0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002fe2   f000
002fe4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002fe6   ffd9
002fe8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_minute	code
                                           _add_minute:
                                           ;	.line	50; src/newtime.c	void add_minute(time t){
00293c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00293e   ffe5
002940   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002942   ffd9
002944   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002946   ffe5
002948   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00294a   ffe5
00294c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00294e   ffe5
002950   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002952   ffe5
002954   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002956   ffe5
002958   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00295a   ffe5
00295c   0e02     movlw	0x2                	MOVLW	0x02
00295e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002960   f000
002962   0e03     movlw	0x3                	MOVLW	0x03
002964   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002966   f001
002968   0e04     movlw	0x4                	MOVLW	0x04
00296a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00296c   f002
                                           ;	.line	51; src/newtime.c	if(set_minutes(t,t->minutes + 1) != 0)
00296e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002970   0f02     addlw	0x2                	ADDLW	0x02
002972   6e03     movwf	0x3, 0             	MOVWF	r0x03
002974   0e00     movlw	0                  	MOVLW	0x00
002976   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002978   6e04     movwf	0x4, 0             	MOVWF	r0x04
00297a   0e00     movlw	0                  	MOVLW	0x00
00297c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00297e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002980   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002982   ffe9
002984   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002986   fff3
002988   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00298a   ec2c     call	0x3258, 0           	CALL	__gptrget2
00298c   f019
00298e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002990   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002992   f004
002994   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002996   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002998   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00299a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00299c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00299e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ae   ec78     call	0x26f0, 0           	CALL	_set_minutes
0029b0   f013
0029b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0029b4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0029b6   f004
0029b8   0e05     movlw	0x5                	MOVLW	0x05
0029ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029be   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0029c0   e00a     bz	0x29d6                	BZ	_00139_DS_
                                           ;	.line	52; src/newtime.c	add_hour(t);
0029c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ce   ecb6     call	0x2f6c, 0           	CALL	_add_hour
0029d0   f017
0029d2   0e03     movlw	0x3                	MOVLW	0x03
0029d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00139_DS_:
0029d6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0029d8   f005
0029da   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029dc   f004
0029de   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029e0   f003
0029e2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029e4   f002
0029e6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029e8   f001
0029ea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029ec   f000
0029ee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029f0   ffd9
0029f2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__add_second	code
                                           _add_second:
                                           ;	.line	45; src/newtime.c	void add_second(time t){
0029f4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0029f6   ffe5
0029f8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0029fa   ffd9
0029fc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0029fe   ffe5
002a00   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a02   ffe5
002a04   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a06   ffe5
002a08   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a0a   ffe5
002a0c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a0e   ffe5
002a10   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002a12   ffe5
002a14   0e02     movlw	0x2                	MOVLW	0x02
002a16   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a18   f000
002a1a   0e03     movlw	0x3                	MOVLW	0x03
002a1c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a1e   f001
002a20   0e04     movlw	0x4                	MOVLW	0x04
002a22   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002a24   f002
                                           ;	.line	46; src/newtime.c	if(set_seconds(t,t->seconds + 1) != 0)
002a26   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a28   0f04     addlw	0x4                	ADDLW	0x04
002a2a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a2c   0e00     movlw	0                  	MOVLW	0x00
002a2e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002a30   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a32   0e00     movlw	0                  	MOVLW	0x00
002a34   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002a36   6e05     movwf	0x5, 0             	MOVWF	r0x05
002a38   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002a3a   ffe9
002a3c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002a3e   fff3
002a40   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a42   ec2c     call	0x3258, 0           	CALL	__gptrget2
002a44   f019
002a46   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a48   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a4a   f004
002a4c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002a4e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002a50   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002a52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a62   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a66   ec14     call	0x2628, 0           	CALL	_set_seconds
002a68   f013
002a6a   6e03     movwf	0x3, 0             	MOVWF	r0x03
002a6c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002a6e   f004
002a70   0e05     movlw	0x5                	MOVLW	0x05
002a72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002a74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a76   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
002a78   e00a     bz	0x2a8e                	BZ	_00132_DS_
                                           ;	.line	47; src/newtime.c	add_minute(t);
002a7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a7e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a82   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a86   ec9e     call	0x293c, 0           	CALL	_add_minute
002a88   f014
002a8a   0e03     movlw	0x3                	MOVLW	0x03
002a8c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00132_DS_:
002a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a90   f005
002a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a94   f004
002a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a98   f003
002a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a9c   f002
002a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002aa0   f001
002aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002aa4   f000
002aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002aa8   ffd9
002aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_seconds	code
                                           _set_seconds:
                                           ;	.line	39; src/newtime.c	int set_seconds(time t, int value){
002628   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00262a   ffe5
00262c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00262e   ffd9
002630   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002632   ffe5
002634   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002636   ffe5
002638   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00263a   ffe5
00263c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00263e   ffe5
002640   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002642   ffe5
002644   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002646   ffe5
002648   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00264a   ffe5
00264c   0e02     movlw	0x2                	MOVLW	0x02
00264e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002650   f000
002652   0e03     movlw	0x3                	MOVLW	0x03
002654   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002656   f001
002658   0e04     movlw	0x4                	MOVLW	0x04
00265a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00265c   f002
00265e   0e05     movlw	0x5                	MOVLW	0x05
002660   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002662   f003
002664   0e06     movlw	0x6                	MOVLW	0x06
002666   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002668   f004
                                           ;	.line	40; src/newtime.c	int overflow = value/60;
00266a   0e00     movlw	0                  	MOVLW	0x00
00266c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266e   0e3c     movlw	0x3c               	MOVLW	0x3c
002670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002672   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002676   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267a   ecee     call	0x1fdc, 0           	CALL	__divsint
00267c   f00f
00267e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002680   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002682   f006
002684   0e04     movlw	0x4                	MOVLW	0x04
002686   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	41; src/newtime.c	t->seconds = value % 60;
002688   0e04     movlw	0x4                	MOVLW	0x04
00268a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00268c   0e00     movlw	0                  	MOVLW	0x00
00268e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002690   0e00     movlw	0                  	MOVLW	0x00
002692   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002694   0e00     movlw	0                  	MOVLW	0x00
002696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002698   0e3c     movlw	0x3c               	MOVLW	0x3c
00269a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00269c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00269e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0026a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026a4   eccd     call	0x239a, 0           	CALL	__modsint
0026a6   f011
0026a8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0026aa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0026ac   f004
0026ae   0e04     movlw	0x4                	MOVLW	0x04
0026b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026b4   ffe5
0026b6   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0026b8   fff4
0026ba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0026bc   ffe9
0026be   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0026c0   fff3
0026c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0026c4   ec6d     call	0x32da, 0           	CALL	__gptrput2
0026c6   f019
                                           ;	.line	42; src/newtime.c	return overflow;
0026c8   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0026ca   fff3
0026cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0026ce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0026d0   f006
0026d2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026d4   f005
0026d6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026d8   f004
0026da   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026dc   f003
0026de   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026e0   f002
0026e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026e4   f001
0026e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026e8   f000
0026ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026ec   ffd9
0026ee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_minutes	code
                                           _set_minutes:
                                           ;	.line	33; src/newtime.c	int set_minutes(time t, int value){
0026f0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026f2   ffe5
0026f4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026f6   ffd9
0026f8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026fa   ffe5
0026fc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026fe   ffe5
002700   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002702   ffe5
002704   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002706   ffe5
002708   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00270a   ffe5
00270c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00270e   ffe5
002710   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002712   ffe5
002714   0e02     movlw	0x2                	MOVLW	0x02
002716   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002718   f000
00271a   0e03     movlw	0x3                	MOVLW	0x03
00271c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00271e   f001
002720   0e04     movlw	0x4                	MOVLW	0x04
002722   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002724   f002
002726   0e05     movlw	0x5                	MOVLW	0x05
002728   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00272a   f003
00272c   0e06     movlw	0x6                	MOVLW	0x06
00272e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002730   f004
                                           ;	.line	34; src/newtime.c	int overflow = value/60;
002732   0e00     movlw	0                  	MOVLW	0x00
002734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002736   0e3c     movlw	0x3c               	MOVLW	0x3c
002738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00273a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00273c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00273e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002742   ecee     call	0x1fdc, 0           	CALL	__divsint
002744   f00f
002746   6e05     movwf	0x5, 0             	MOVWF	r0x05
002748   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00274a   f006
00274c   0e04     movlw	0x4                	MOVLW	0x04
00274e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	35; src/newtime.c	t->minutes = value%60;
002750   0e02     movlw	0x2                	MOVLW	0x02
002752   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002754   0e00     movlw	0                  	MOVLW	0x00
002756   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002758   0e00     movlw	0                  	MOVLW	0x00
00275a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00275c   0e00     movlw	0                  	MOVLW	0x00
00275e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002760   0e3c     movlw	0x3c               	MOVLW	0x3c
002762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002764   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002766   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002768   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00276a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00276c   eccd     call	0x239a, 0           	CALL	__modsint
00276e   f011
002770   6e03     movwf	0x3, 0             	MOVWF	r0x03
002772   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
002774   f004
002776   0e04     movlw	0x4                	MOVLW	0x04
002778   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00277a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00277c   ffe5
00277e   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002780   fff4
002782   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002784   ffe9
002786   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002788   fff3
00278a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00278c   ec6d     call	0x32da, 0           	CALL	__gptrput2
00278e   f019
                                           ;	.line	36; src/newtime.c	return overflow;
002790   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002792   fff3
002794   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002796   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002798   f006
00279a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00279c   f005
00279e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027a0   f004
0027a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027a4   f003
0027a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027a8   f002
0027aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027ac   f001
0027ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027b0   f000
0027b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027b4   ffd9
0027b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__set_hours	code
                                           _set_hours:
                                           ;	.line	27; src/newtime.c	int set_hours(time t, int value){
002880   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002882   ffe5
002884   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002886   ffd9
002888   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00288a   ffe5
00288c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00288e   ffe5
002890   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002892   ffe5
002894   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002896   ffe5
002898   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00289a   ffe5
00289c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00289e   ffe5
0028a0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0028a2   ffe5
0028a4   0e02     movlw	0x2                	MOVLW	0x02
0028a6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0028a8   f000
0028aa   0e03     movlw	0x3                	MOVLW	0x03
0028ac   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0028ae   f001
0028b0   0e04     movlw	0x4                	MOVLW	0x04
0028b2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0028b4   f002
0028b6   0e05     movlw	0x5                	MOVLW	0x05
0028b8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0028ba   f003
0028bc   0e06     movlw	0x6                	MOVLW	0x06
0028be   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0028c0   f004
                                           ;	.line	28; src/newtime.c	int overflow = value/24;
0028c2   0e00     movlw	0                  	MOVLW	0x00
0028c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c6   0e18     movlw	0x18               	MOVLW	0x18
0028c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028d2   ecee     call	0x1fdc, 0           	CALL	__divsint
0028d4   f00f
0028d6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028d8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028da   f006
0028dc   0e04     movlw	0x4                	MOVLW	0x04
0028de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	29; src/newtime.c	t->hours = value%24;
0028e0   0e00     movlw	0                  	MOVLW	0x00
0028e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e4   0e18     movlw	0x18               	MOVLW	0x18
0028e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028ec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f0   eccd     call	0x239a, 0           	CALL	__modsint
0028f2   f011
0028f4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0028f6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0028f8   f004
0028fa   0e04     movlw	0x4                	MOVLW	0x04
0028fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028fe   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002900   ffe5
002902   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
002904   fff4
002906   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002908   ffe9
00290a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00290c   fff3
00290e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002910   ec6d     call	0x32da, 0           	CALL	__gptrput2
002912   f019
                                           ;	.line	30; src/newtime.c	return overflow;
002914   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002916   fff3
002918   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00291a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00291c   f006
00291e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002920   f005
002922   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002924   f004
002926   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002928   f003
00292a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00292c   f002
00292e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002930   f001
002932   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002934   f000
002936   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002938   ffd9
00293a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_set	code
                                           _time_set:
                                           ;	.line	21; src/newtime.c	void time_set(time t, int hours, int minutes, int seconds){
00247e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002480   ffe5
002482   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002484   ffd9
002486   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002488   ffe5
00248a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00248c   ffe5
00248e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002490   ffe5
002492   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002494   ffe5
002496   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002498   ffe5
00249a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00249c   ffe5
00249e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024a0   ffe5
0024a2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0024a4   ffe5
0024a6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0024a8   ffe5
0024aa   0e02     movlw	0x2                	MOVLW	0x02
0024ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024ae   f000
0024b0   0e03     movlw	0x3                	MOVLW	0x03
0024b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024b4   f001
0024b6   0e04     movlw	0x4                	MOVLW	0x04
0024b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024ba   f002
0024bc   0e05     movlw	0x5                	MOVLW	0x05
0024be   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024c0   f003
0024c2   0e06     movlw	0x6                	MOVLW	0x06
0024c4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024c6   f004
0024c8   0e07     movlw	0x7                	MOVLW	0x07
0024ca   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0024cc   f005
0024ce   0e08     movlw	0x8                	MOVLW	0x08
0024d0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0024d2   f006
0024d4   0e09     movlw	0x9                	MOVLW	0x09
0024d6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0024d8   f007
0024da   0e0a     movlw	0xa                	MOVLW	0x0a
0024dc   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0024de   f008
                                           ;	.line	22; src/newtime.c	set_hours(t,hours);
0024e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f4   ec40     call	0x2880, 0           	CALL	_set_hours
0024f6   f014
0024f8   0e05     movlw	0x5                	MOVLW	0x05
0024fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	23; src/newtime.c	set_minutes(t,minutes);
0024fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0024fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002500   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002502   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002504   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002506   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002508   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00250a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00250c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00250e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002510   ec78     call	0x26f0, 0           	CALL	_set_minutes
002512   f013
002514   0e05     movlw	0x5                	MOVLW	0x05
002516   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	24; src/newtime.c	set_seconds(t,seconds);
002518   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00251a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00251e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002520   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002524   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002528   5000     movf	0, 0, 0             	MOVF	r0x00, W
00252a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00252c   ec14     call	0x2628, 0           	CALL	_set_seconds
00252e   f013
002530   0e05     movlw	0x5                	MOVLW	0x05
002532   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002534   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002536   f008
002538   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00253a   f007
00253c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00253e   f006
002540   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002542   f005
002544   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002546   f004
002548   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00254a   f003
00254c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00254e   f002
002550   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002552   f001
002554   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002556   f000
002558   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00255a   ffd9
00255c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_newtime__time_create	code
                                           _time_create:
                                           ;	.line	15; src/newtime.c	time time_create(){
002de2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002de4   ffe5
002de6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002de8   ffd9
002dea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002dec   ffe5
002dee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002df0   ffe5
002df2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002df4   ffe5
                                           ;	.line	16; src/newtime.c	time t = (time)malloc(sizeof (struct time_struct));
002df6   0e06     movlw	0x6                	MOVLW	0x06
002df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dfa   ec64     call	0x14c8, 0           	CALL	_malloc
002dfc   f00a
002dfe   6e00     movwf	0, 0               	MOVWF	r0x00
002e00   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002e02   f001
002e04   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002e06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e08   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e0c   6e00     movwf	0, 0               	MOVWF	r0x00
002e0e   0e80     movlw	0x80               	MOVLW	0x80
002e10   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	17; src/newtime.c	time_set(t,0,0,0);
002e12   0e00     movlw	0                  	MOVLW	0x00
002e14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e16   0e00     movlw	0                  	MOVLW	0x00
002e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e1a   0e00     movlw	0                  	MOVLW	0x00
002e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e1e   0e00     movlw	0                  	MOVLW	0x00
002e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e22   0e00     movlw	0                  	MOVLW	0x00
002e24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e26   0e00     movlw	0                  	MOVLW	0x00
002e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e32   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e36   ec3f     call	0x247e, 0           	CALL	_time_set
002e38   f012
002e3a   0e09     movlw	0x9                	MOVLW	0x09
002e3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	18; src/newtime.c	return t;
002e3e   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
002e40   fff4
002e42   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002e44   fff3
002e46   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e48   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e4a   f002
002e4c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e4e   f001
002e50   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e52   f000
002e54   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e56   ffd9
002e58   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002e5a   3025     rrcf	0x25, 0, 0          	DB	0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30, 0x32, 0x64, 0x3a, 0x25, 0x30
002e5c   6432     cpfsgt	0x32, 0           
002e5e   253a     addwf	0x3a, 0, 0x1       
002e60   3230     rrcf	0x30, 0x1, 0        
002e62   3a64     swapf	0x64, 0x1, 0       
002e64   3025     rrcf	0x25, 0, 0          
002e66   6432     cpfsgt	0x32, 0           	DB	0x32, 0x64, 0x00
002e68   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2108 (0x083c) bytes ( 1.61%)
                                           ;           	 1054 (0x041e) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
